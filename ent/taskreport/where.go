// Code generated by ent, DO NOT EDIT.

package taskreport

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldTitle, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldContent, v))
}

// ProgressPercentage applies equality check predicate on the "progress_percentage" field. It's identical to ProgressPercentageEQ.
func ProgressPercentage(v int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldProgressPercentage, v))
}

// ReportedAt applies equality check predicate on the "reported_at" field. It's identical to ReportedAtEQ.
func ReportedAt(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldReportedAt, v))
}

// IssuesEncountered applies equality check predicate on the "issues_encountered" field. It's identical to IssuesEncounteredEQ.
func IssuesEncountered(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldIssuesEncountered, v))
}

// NextSteps applies equality check predicate on the "next_steps" field. It's identical to NextStepsEQ.
func NextSteps(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldNextSteps, v))
}

// EstimatedCompletion applies equality check predicate on the "estimated_completion" field. It's identical to EstimatedCompletionEQ.
func EstimatedCompletion(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldEstimatedCompletion, v))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldTaskID, v))
}

// ReporterID applies equality check predicate on the "reporter_id" field. It's identical to ReporterIDEQ.
func ReporterID(v int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldReporterID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldContainsFold(FieldTitle, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldHasSuffix(FieldContent, v))
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIsNull(FieldContent))
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotNull(FieldContent))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldContainsFold(FieldContent, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotIn(FieldStatus, vs...))
}

// ProgressPercentageEQ applies the EQ predicate on the "progress_percentage" field.
func ProgressPercentageEQ(v int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldProgressPercentage, v))
}

// ProgressPercentageNEQ applies the NEQ predicate on the "progress_percentage" field.
func ProgressPercentageNEQ(v int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNEQ(FieldProgressPercentage, v))
}

// ProgressPercentageIn applies the In predicate on the "progress_percentage" field.
func ProgressPercentageIn(vs ...int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIn(FieldProgressPercentage, vs...))
}

// ProgressPercentageNotIn applies the NotIn predicate on the "progress_percentage" field.
func ProgressPercentageNotIn(vs ...int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotIn(FieldProgressPercentage, vs...))
}

// ProgressPercentageGT applies the GT predicate on the "progress_percentage" field.
func ProgressPercentageGT(v int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGT(FieldProgressPercentage, v))
}

// ProgressPercentageGTE applies the GTE predicate on the "progress_percentage" field.
func ProgressPercentageGTE(v int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGTE(FieldProgressPercentage, v))
}

// ProgressPercentageLT applies the LT predicate on the "progress_percentage" field.
func ProgressPercentageLT(v int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLT(FieldProgressPercentage, v))
}

// ProgressPercentageLTE applies the LTE predicate on the "progress_percentage" field.
func ProgressPercentageLTE(v int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLTE(FieldProgressPercentage, v))
}

// ReportedAtEQ applies the EQ predicate on the "reported_at" field.
func ReportedAtEQ(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldReportedAt, v))
}

// ReportedAtNEQ applies the NEQ predicate on the "reported_at" field.
func ReportedAtNEQ(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNEQ(FieldReportedAt, v))
}

// ReportedAtIn applies the In predicate on the "reported_at" field.
func ReportedAtIn(vs ...time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIn(FieldReportedAt, vs...))
}

// ReportedAtNotIn applies the NotIn predicate on the "reported_at" field.
func ReportedAtNotIn(vs ...time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotIn(FieldReportedAt, vs...))
}

// ReportedAtGT applies the GT predicate on the "reported_at" field.
func ReportedAtGT(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGT(FieldReportedAt, v))
}

// ReportedAtGTE applies the GTE predicate on the "reported_at" field.
func ReportedAtGTE(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGTE(FieldReportedAt, v))
}

// ReportedAtLT applies the LT predicate on the "reported_at" field.
func ReportedAtLT(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLT(FieldReportedAt, v))
}

// ReportedAtLTE applies the LTE predicate on the "reported_at" field.
func ReportedAtLTE(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLTE(FieldReportedAt, v))
}

// IssuesEncounteredEQ applies the EQ predicate on the "issues_encountered" field.
func IssuesEncounteredEQ(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldIssuesEncountered, v))
}

// IssuesEncounteredNEQ applies the NEQ predicate on the "issues_encountered" field.
func IssuesEncounteredNEQ(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNEQ(FieldIssuesEncountered, v))
}

// IssuesEncounteredIn applies the In predicate on the "issues_encountered" field.
func IssuesEncounteredIn(vs ...string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIn(FieldIssuesEncountered, vs...))
}

// IssuesEncounteredNotIn applies the NotIn predicate on the "issues_encountered" field.
func IssuesEncounteredNotIn(vs ...string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotIn(FieldIssuesEncountered, vs...))
}

// IssuesEncounteredGT applies the GT predicate on the "issues_encountered" field.
func IssuesEncounteredGT(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGT(FieldIssuesEncountered, v))
}

// IssuesEncounteredGTE applies the GTE predicate on the "issues_encountered" field.
func IssuesEncounteredGTE(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGTE(FieldIssuesEncountered, v))
}

// IssuesEncounteredLT applies the LT predicate on the "issues_encountered" field.
func IssuesEncounteredLT(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLT(FieldIssuesEncountered, v))
}

// IssuesEncounteredLTE applies the LTE predicate on the "issues_encountered" field.
func IssuesEncounteredLTE(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLTE(FieldIssuesEncountered, v))
}

// IssuesEncounteredContains applies the Contains predicate on the "issues_encountered" field.
func IssuesEncounteredContains(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldContains(FieldIssuesEncountered, v))
}

// IssuesEncounteredHasPrefix applies the HasPrefix predicate on the "issues_encountered" field.
func IssuesEncounteredHasPrefix(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldHasPrefix(FieldIssuesEncountered, v))
}

// IssuesEncounteredHasSuffix applies the HasSuffix predicate on the "issues_encountered" field.
func IssuesEncounteredHasSuffix(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldHasSuffix(FieldIssuesEncountered, v))
}

// IssuesEncounteredIsNil applies the IsNil predicate on the "issues_encountered" field.
func IssuesEncounteredIsNil() predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIsNull(FieldIssuesEncountered))
}

// IssuesEncounteredNotNil applies the NotNil predicate on the "issues_encountered" field.
func IssuesEncounteredNotNil() predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotNull(FieldIssuesEncountered))
}

// IssuesEncounteredEqualFold applies the EqualFold predicate on the "issues_encountered" field.
func IssuesEncounteredEqualFold(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEqualFold(FieldIssuesEncountered, v))
}

// IssuesEncounteredContainsFold applies the ContainsFold predicate on the "issues_encountered" field.
func IssuesEncounteredContainsFold(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldContainsFold(FieldIssuesEncountered, v))
}

// NextStepsEQ applies the EQ predicate on the "next_steps" field.
func NextStepsEQ(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldNextSteps, v))
}

// NextStepsNEQ applies the NEQ predicate on the "next_steps" field.
func NextStepsNEQ(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNEQ(FieldNextSteps, v))
}

// NextStepsIn applies the In predicate on the "next_steps" field.
func NextStepsIn(vs ...string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIn(FieldNextSteps, vs...))
}

// NextStepsNotIn applies the NotIn predicate on the "next_steps" field.
func NextStepsNotIn(vs ...string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotIn(FieldNextSteps, vs...))
}

// NextStepsGT applies the GT predicate on the "next_steps" field.
func NextStepsGT(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGT(FieldNextSteps, v))
}

// NextStepsGTE applies the GTE predicate on the "next_steps" field.
func NextStepsGTE(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGTE(FieldNextSteps, v))
}

// NextStepsLT applies the LT predicate on the "next_steps" field.
func NextStepsLT(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLT(FieldNextSteps, v))
}

// NextStepsLTE applies the LTE predicate on the "next_steps" field.
func NextStepsLTE(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLTE(FieldNextSteps, v))
}

// NextStepsContains applies the Contains predicate on the "next_steps" field.
func NextStepsContains(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldContains(FieldNextSteps, v))
}

// NextStepsHasPrefix applies the HasPrefix predicate on the "next_steps" field.
func NextStepsHasPrefix(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldHasPrefix(FieldNextSteps, v))
}

// NextStepsHasSuffix applies the HasSuffix predicate on the "next_steps" field.
func NextStepsHasSuffix(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldHasSuffix(FieldNextSteps, v))
}

// NextStepsIsNil applies the IsNil predicate on the "next_steps" field.
func NextStepsIsNil() predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIsNull(FieldNextSteps))
}

// NextStepsNotNil applies the NotNil predicate on the "next_steps" field.
func NextStepsNotNil() predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotNull(FieldNextSteps))
}

// NextStepsEqualFold applies the EqualFold predicate on the "next_steps" field.
func NextStepsEqualFold(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEqualFold(FieldNextSteps, v))
}

// NextStepsContainsFold applies the ContainsFold predicate on the "next_steps" field.
func NextStepsContainsFold(v string) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldContainsFold(FieldNextSteps, v))
}

// EstimatedCompletionEQ applies the EQ predicate on the "estimated_completion" field.
func EstimatedCompletionEQ(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldEstimatedCompletion, v))
}

// EstimatedCompletionNEQ applies the NEQ predicate on the "estimated_completion" field.
func EstimatedCompletionNEQ(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNEQ(FieldEstimatedCompletion, v))
}

// EstimatedCompletionIn applies the In predicate on the "estimated_completion" field.
func EstimatedCompletionIn(vs ...time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIn(FieldEstimatedCompletion, vs...))
}

// EstimatedCompletionNotIn applies the NotIn predicate on the "estimated_completion" field.
func EstimatedCompletionNotIn(vs ...time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotIn(FieldEstimatedCompletion, vs...))
}

// EstimatedCompletionGT applies the GT predicate on the "estimated_completion" field.
func EstimatedCompletionGT(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGT(FieldEstimatedCompletion, v))
}

// EstimatedCompletionGTE applies the GTE predicate on the "estimated_completion" field.
func EstimatedCompletionGTE(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGTE(FieldEstimatedCompletion, v))
}

// EstimatedCompletionLT applies the LT predicate on the "estimated_completion" field.
func EstimatedCompletionLT(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLT(FieldEstimatedCompletion, v))
}

// EstimatedCompletionLTE applies the LTE predicate on the "estimated_completion" field.
func EstimatedCompletionLTE(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLTE(FieldEstimatedCompletion, v))
}

// EstimatedCompletionIsNil applies the IsNil predicate on the "estimated_completion" field.
func EstimatedCompletionIsNil() predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIsNull(FieldEstimatedCompletion))
}

// EstimatedCompletionNotNil applies the NotNil predicate on the "estimated_completion" field.
func EstimatedCompletionNotNil() predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotNull(FieldEstimatedCompletion))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotIn(FieldTaskID, vs...))
}

// ReporterIDEQ applies the EQ predicate on the "reporter_id" field.
func ReporterIDEQ(v int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldReporterID, v))
}

// ReporterIDNEQ applies the NEQ predicate on the "reporter_id" field.
func ReporterIDNEQ(v int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNEQ(FieldReporterID, v))
}

// ReporterIDIn applies the In predicate on the "reporter_id" field.
func ReporterIDIn(vs ...int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIn(FieldReporterID, vs...))
}

// ReporterIDNotIn applies the NotIn predicate on the "reporter_id" field.
func ReporterIDNotIn(vs ...int) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotIn(FieldReporterID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TaskReport {
	return predicate.TaskReport(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.TaskReport {
	return predicate.TaskReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.TaskReport {
	return predicate.TaskReport(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReporter applies the HasEdge predicate on the "reporter" edge.
func HasReporter() predicate.TaskReport {
	return predicate.TaskReport(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReporterTable, ReporterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReporterWith applies the HasEdge predicate on the "reporter" edge with a given conditions (other predicates).
func HasReporterWith(preds ...predicate.Employee) predicate.TaskReport {
	return predicate.TaskReport(func(s *sql.Selector) {
		step := newReporterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TaskReport) predicate.TaskReport {
	return predicate.TaskReport(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TaskReport) predicate.TaskReport {
	return predicate.TaskReport(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TaskReport) predicate.TaskReport {
	return predicate.TaskReport(sql.NotPredicates(p))
}
