// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
	"github.com/longgggwwww/hrm-ms-hr/ent/zalodepartment"
)

// ZaloDepartmentDelete is the builder for deleting a ZaloDepartment entity.
type ZaloDepartmentDelete struct {
	config
	hooks    []Hook
	mutation *ZaloDepartmentMutation
}

// Where appends a list predicates to the ZaloDepartmentDelete builder.
func (zdd *ZaloDepartmentDelete) Where(ps ...predicate.ZaloDepartment) *ZaloDepartmentDelete {
	zdd.mutation.Where(ps...)
	return zdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (zdd *ZaloDepartmentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, zdd.sqlExec, zdd.mutation, zdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (zdd *ZaloDepartmentDelete) ExecX(ctx context.Context) int {
	n, err := zdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (zdd *ZaloDepartmentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(zalodepartment.Table, sqlgraph.NewFieldSpec(zalodepartment.FieldID, field.TypeInt))
	if ps := zdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, zdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	zdd.mutation.done = true
	return affected, err
}

// ZaloDepartmentDeleteOne is the builder for deleting a single ZaloDepartment entity.
type ZaloDepartmentDeleteOne struct {
	zdd *ZaloDepartmentDelete
}

// Where appends a list predicates to the ZaloDepartmentDelete builder.
func (zddo *ZaloDepartmentDeleteOne) Where(ps ...predicate.ZaloDepartment) *ZaloDepartmentDeleteOne {
	zddo.zdd.mutation.Where(ps...)
	return zddo
}

// Exec executes the deletion query.
func (zddo *ZaloDepartmentDeleteOne) Exec(ctx context.Context) error {
	n, err := zddo.zdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{zalodepartment.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (zddo *ZaloDepartmentDeleteOne) ExecX(ctx context.Context) {
	if err := zddo.Exec(ctx); err != nil {
		panic(err)
	}
}
