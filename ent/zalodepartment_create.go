// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/department"
	"github.com/longgggwwww/hrm-ms-hr/ent/zalodepartment"
)

// ZaloDepartmentCreate is the builder for creating a ZaloDepartment entity.
type ZaloDepartmentCreate struct {
	config
	mutation *ZaloDepartmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetGroupID sets the "group_id" field.
func (zdc *ZaloDepartmentCreate) SetGroupID(s string) *ZaloDepartmentCreate {
	zdc.mutation.SetGroupID(s)
	return zdc
}

// SetDepartmentID sets the "department_id" field.
func (zdc *ZaloDepartmentCreate) SetDepartmentID(i int) *ZaloDepartmentCreate {
	zdc.mutation.SetDepartmentID(i)
	return zdc
}

// SetCreatedAt sets the "created_at" field.
func (zdc *ZaloDepartmentCreate) SetCreatedAt(t time.Time) *ZaloDepartmentCreate {
	zdc.mutation.SetCreatedAt(t)
	return zdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (zdc *ZaloDepartmentCreate) SetNillableCreatedAt(t *time.Time) *ZaloDepartmentCreate {
	if t != nil {
		zdc.SetCreatedAt(*t)
	}
	return zdc
}

// SetUpdatedAt sets the "updated_at" field.
func (zdc *ZaloDepartmentCreate) SetUpdatedAt(t time.Time) *ZaloDepartmentCreate {
	zdc.mutation.SetUpdatedAt(t)
	return zdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (zdc *ZaloDepartmentCreate) SetNillableUpdatedAt(t *time.Time) *ZaloDepartmentCreate {
	if t != nil {
		zdc.SetUpdatedAt(*t)
	}
	return zdc
}

// SetDepartment sets the "department" edge to the Department entity.
func (zdc *ZaloDepartmentCreate) SetDepartment(d *Department) *ZaloDepartmentCreate {
	return zdc.SetDepartmentID(d.ID)
}

// Mutation returns the ZaloDepartmentMutation object of the builder.
func (zdc *ZaloDepartmentCreate) Mutation() *ZaloDepartmentMutation {
	return zdc.mutation
}

// Save creates the ZaloDepartment in the database.
func (zdc *ZaloDepartmentCreate) Save(ctx context.Context) (*ZaloDepartment, error) {
	zdc.defaults()
	return withHooks(ctx, zdc.sqlSave, zdc.mutation, zdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (zdc *ZaloDepartmentCreate) SaveX(ctx context.Context) *ZaloDepartment {
	v, err := zdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (zdc *ZaloDepartmentCreate) Exec(ctx context.Context) error {
	_, err := zdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (zdc *ZaloDepartmentCreate) ExecX(ctx context.Context) {
	if err := zdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (zdc *ZaloDepartmentCreate) defaults() {
	if _, ok := zdc.mutation.CreatedAt(); !ok {
		v := zalodepartment.DefaultCreatedAt()
		zdc.mutation.SetCreatedAt(v)
	}
	if _, ok := zdc.mutation.UpdatedAt(); !ok {
		v := zalodepartment.DefaultUpdatedAt()
		zdc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (zdc *ZaloDepartmentCreate) check() error {
	if _, ok := zdc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "ZaloDepartment.group_id"`)}
	}
	if v, ok := zdc.mutation.GroupID(); ok {
		if err := zalodepartment.GroupIDValidator(v); err != nil {
			return &ValidationError{Name: "group_id", err: fmt.Errorf(`ent: validator failed for field "ZaloDepartment.group_id": %w`, err)}
		}
	}
	if _, ok := zdc.mutation.DepartmentID(); !ok {
		return &ValidationError{Name: "department_id", err: errors.New(`ent: missing required field "ZaloDepartment.department_id"`)}
	}
	if _, ok := zdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ZaloDepartment.created_at"`)}
	}
	if _, ok := zdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ZaloDepartment.updated_at"`)}
	}
	if len(zdc.mutation.DepartmentIDs()) == 0 {
		return &ValidationError{Name: "department", err: errors.New(`ent: missing required edge "ZaloDepartment.department"`)}
	}
	return nil
}

func (zdc *ZaloDepartmentCreate) sqlSave(ctx context.Context) (*ZaloDepartment, error) {
	if err := zdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := zdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, zdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	zdc.mutation.id = &_node.ID
	zdc.mutation.done = true
	return _node, nil
}

func (zdc *ZaloDepartmentCreate) createSpec() (*ZaloDepartment, *sqlgraph.CreateSpec) {
	var (
		_node = &ZaloDepartment{config: zdc.config}
		_spec = sqlgraph.NewCreateSpec(zalodepartment.Table, sqlgraph.NewFieldSpec(zalodepartment.FieldID, field.TypeInt))
	)
	_spec.OnConflict = zdc.conflict
	if value, ok := zdc.mutation.GroupID(); ok {
		_spec.SetField(zalodepartment.FieldGroupID, field.TypeString, value)
		_node.GroupID = value
	}
	if value, ok := zdc.mutation.CreatedAt(); ok {
		_spec.SetField(zalodepartment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := zdc.mutation.UpdatedAt(); ok {
		_spec.SetField(zalodepartment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := zdc.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   zalodepartment.DepartmentTable,
			Columns: []string{zalodepartment.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DepartmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ZaloDepartment.Create().
//		SetGroupID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ZaloDepartmentUpsert) {
//			SetGroupID(v+v).
//		}).
//		Exec(ctx)
func (zdc *ZaloDepartmentCreate) OnConflict(opts ...sql.ConflictOption) *ZaloDepartmentUpsertOne {
	zdc.conflict = opts
	return &ZaloDepartmentUpsertOne{
		create: zdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ZaloDepartment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (zdc *ZaloDepartmentCreate) OnConflictColumns(columns ...string) *ZaloDepartmentUpsertOne {
	zdc.conflict = append(zdc.conflict, sql.ConflictColumns(columns...))
	return &ZaloDepartmentUpsertOne{
		create: zdc,
	}
}

type (
	// ZaloDepartmentUpsertOne is the builder for "upsert"-ing
	//  one ZaloDepartment node.
	ZaloDepartmentUpsertOne struct {
		create *ZaloDepartmentCreate
	}

	// ZaloDepartmentUpsert is the "OnConflict" setter.
	ZaloDepartmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetGroupID sets the "group_id" field.
func (u *ZaloDepartmentUpsert) SetGroupID(v string) *ZaloDepartmentUpsert {
	u.Set(zalodepartment.FieldGroupID, v)
	return u
}

// UpdateGroupID sets the "group_id" field to the value that was provided on create.
func (u *ZaloDepartmentUpsert) UpdateGroupID() *ZaloDepartmentUpsert {
	u.SetExcluded(zalodepartment.FieldGroupID)
	return u
}

// SetDepartmentID sets the "department_id" field.
func (u *ZaloDepartmentUpsert) SetDepartmentID(v int) *ZaloDepartmentUpsert {
	u.Set(zalodepartment.FieldDepartmentID, v)
	return u
}

// UpdateDepartmentID sets the "department_id" field to the value that was provided on create.
func (u *ZaloDepartmentUpsert) UpdateDepartmentID() *ZaloDepartmentUpsert {
	u.SetExcluded(zalodepartment.FieldDepartmentID)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ZaloDepartmentUpsert) SetUpdatedAt(v time.Time) *ZaloDepartmentUpsert {
	u.Set(zalodepartment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ZaloDepartmentUpsert) UpdateUpdatedAt() *ZaloDepartmentUpsert {
	u.SetExcluded(zalodepartment.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ZaloDepartment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ZaloDepartmentUpsertOne) UpdateNewValues() *ZaloDepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(zalodepartment.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ZaloDepartment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ZaloDepartmentUpsertOne) Ignore() *ZaloDepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ZaloDepartmentUpsertOne) DoNothing() *ZaloDepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ZaloDepartmentCreate.OnConflict
// documentation for more info.
func (u *ZaloDepartmentUpsertOne) Update(set func(*ZaloDepartmentUpsert)) *ZaloDepartmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ZaloDepartmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetGroupID sets the "group_id" field.
func (u *ZaloDepartmentUpsertOne) SetGroupID(v string) *ZaloDepartmentUpsertOne {
	return u.Update(func(s *ZaloDepartmentUpsert) {
		s.SetGroupID(v)
	})
}

// UpdateGroupID sets the "group_id" field to the value that was provided on create.
func (u *ZaloDepartmentUpsertOne) UpdateGroupID() *ZaloDepartmentUpsertOne {
	return u.Update(func(s *ZaloDepartmentUpsert) {
		s.UpdateGroupID()
	})
}

// SetDepartmentID sets the "department_id" field.
func (u *ZaloDepartmentUpsertOne) SetDepartmentID(v int) *ZaloDepartmentUpsertOne {
	return u.Update(func(s *ZaloDepartmentUpsert) {
		s.SetDepartmentID(v)
	})
}

// UpdateDepartmentID sets the "department_id" field to the value that was provided on create.
func (u *ZaloDepartmentUpsertOne) UpdateDepartmentID() *ZaloDepartmentUpsertOne {
	return u.Update(func(s *ZaloDepartmentUpsert) {
		s.UpdateDepartmentID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ZaloDepartmentUpsertOne) SetUpdatedAt(v time.Time) *ZaloDepartmentUpsertOne {
	return u.Update(func(s *ZaloDepartmentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ZaloDepartmentUpsertOne) UpdateUpdatedAt() *ZaloDepartmentUpsertOne {
	return u.Update(func(s *ZaloDepartmentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ZaloDepartmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ZaloDepartmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ZaloDepartmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ZaloDepartmentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ZaloDepartmentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ZaloDepartmentCreateBulk is the builder for creating many ZaloDepartment entities in bulk.
type ZaloDepartmentCreateBulk struct {
	config
	err      error
	builders []*ZaloDepartmentCreate
	conflict []sql.ConflictOption
}

// Save creates the ZaloDepartment entities in the database.
func (zdcb *ZaloDepartmentCreateBulk) Save(ctx context.Context) ([]*ZaloDepartment, error) {
	if zdcb.err != nil {
		return nil, zdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(zdcb.builders))
	nodes := make([]*ZaloDepartment, len(zdcb.builders))
	mutators := make([]Mutator, len(zdcb.builders))
	for i := range zdcb.builders {
		func(i int, root context.Context) {
			builder := zdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ZaloDepartmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, zdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = zdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, zdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, zdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (zdcb *ZaloDepartmentCreateBulk) SaveX(ctx context.Context) []*ZaloDepartment {
	v, err := zdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (zdcb *ZaloDepartmentCreateBulk) Exec(ctx context.Context) error {
	_, err := zdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (zdcb *ZaloDepartmentCreateBulk) ExecX(ctx context.Context) {
	if err := zdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ZaloDepartment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ZaloDepartmentUpsert) {
//			SetGroupID(v+v).
//		}).
//		Exec(ctx)
func (zdcb *ZaloDepartmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *ZaloDepartmentUpsertBulk {
	zdcb.conflict = opts
	return &ZaloDepartmentUpsertBulk{
		create: zdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ZaloDepartment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (zdcb *ZaloDepartmentCreateBulk) OnConflictColumns(columns ...string) *ZaloDepartmentUpsertBulk {
	zdcb.conflict = append(zdcb.conflict, sql.ConflictColumns(columns...))
	return &ZaloDepartmentUpsertBulk{
		create: zdcb,
	}
}

// ZaloDepartmentUpsertBulk is the builder for "upsert"-ing
// a bulk of ZaloDepartment nodes.
type ZaloDepartmentUpsertBulk struct {
	create *ZaloDepartmentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ZaloDepartment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ZaloDepartmentUpsertBulk) UpdateNewValues() *ZaloDepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(zalodepartment.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ZaloDepartment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ZaloDepartmentUpsertBulk) Ignore() *ZaloDepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ZaloDepartmentUpsertBulk) DoNothing() *ZaloDepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ZaloDepartmentCreateBulk.OnConflict
// documentation for more info.
func (u *ZaloDepartmentUpsertBulk) Update(set func(*ZaloDepartmentUpsert)) *ZaloDepartmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ZaloDepartmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetGroupID sets the "group_id" field.
func (u *ZaloDepartmentUpsertBulk) SetGroupID(v string) *ZaloDepartmentUpsertBulk {
	return u.Update(func(s *ZaloDepartmentUpsert) {
		s.SetGroupID(v)
	})
}

// UpdateGroupID sets the "group_id" field to the value that was provided on create.
func (u *ZaloDepartmentUpsertBulk) UpdateGroupID() *ZaloDepartmentUpsertBulk {
	return u.Update(func(s *ZaloDepartmentUpsert) {
		s.UpdateGroupID()
	})
}

// SetDepartmentID sets the "department_id" field.
func (u *ZaloDepartmentUpsertBulk) SetDepartmentID(v int) *ZaloDepartmentUpsertBulk {
	return u.Update(func(s *ZaloDepartmentUpsert) {
		s.SetDepartmentID(v)
	})
}

// UpdateDepartmentID sets the "department_id" field to the value that was provided on create.
func (u *ZaloDepartmentUpsertBulk) UpdateDepartmentID() *ZaloDepartmentUpsertBulk {
	return u.Update(func(s *ZaloDepartmentUpsert) {
		s.UpdateDepartmentID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ZaloDepartmentUpsertBulk) SetUpdatedAt(v time.Time) *ZaloDepartmentUpsertBulk {
	return u.Update(func(s *ZaloDepartmentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ZaloDepartmentUpsertBulk) UpdateUpdatedAt() *ZaloDepartmentUpsertBulk {
	return u.Update(func(s *ZaloDepartmentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ZaloDepartmentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ZaloDepartmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ZaloDepartmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ZaloDepartmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
