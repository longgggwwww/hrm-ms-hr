// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/longgggwwww/hrm-ms-hr/ent/branch"
	"github.com/longgggwwww/hrm-ms-hr/ent/company"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
)

// CompanyUpdate is the builder for updating Company entities.
type CompanyUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyMutation
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cu *CompanyUpdate) Where(ps ...predicate.Company) *CompanyUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CompanyUpdate) SetName(s string) *CompanyUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableName(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetCode sets the "code" field.
func (cu *CompanyUpdate) SetCode(s string) *CompanyUpdate {
	cu.mutation.SetCode(s)
	return cu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableCode(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetCode(*s)
	}
	return cu
}

// SetAddress sets the "address" field.
func (cu *CompanyUpdate) SetAddress(s string) *CompanyUpdate {
	cu.mutation.SetAddress(s)
	return cu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cu *CompanyUpdate) SetNillableAddress(s *string) *CompanyUpdate {
	if s != nil {
		cu.SetAddress(*s)
	}
	return cu
}

// ClearAddress clears the value of the "address" field.
func (cu *CompanyUpdate) ClearAddress() *CompanyUpdate {
	cu.mutation.ClearAddress()
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CompanyUpdate) SetUpdatedAt(t time.Time) *CompanyUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// AddBranchIDs adds the "branches" edge to the Branch entity by IDs.
func (cu *CompanyUpdate) AddBranchIDs(ids ...uuid.UUID) *CompanyUpdate {
	cu.mutation.AddBranchIDs(ids...)
	return cu
}

// AddBranches adds the "branches" edges to the Branch entity.
func (cu *CompanyUpdate) AddBranches(b ...*Branch) *CompanyUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.AddBranchIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cu *CompanyUpdate) Mutation() *CompanyMutation {
	return cu.mutation
}

// ClearBranches clears all "branches" edges to the Branch entity.
func (cu *CompanyUpdate) ClearBranches() *CompanyUpdate {
	cu.mutation.ClearBranches()
	return cu
}

// RemoveBranchIDs removes the "branches" edge to Branch entities by IDs.
func (cu *CompanyUpdate) RemoveBranchIDs(ids ...uuid.UUID) *CompanyUpdate {
	cu.mutation.RemoveBranchIDs(ids...)
	return cu
}

// RemoveBranches removes "branches" edges to Branch entities.
func (cu *CompanyUpdate) RemoveBranches(b ...*Branch) *CompanyUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cu.RemoveBranchIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CompanyUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CompanyUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CompanyUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CompanyUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CompanyUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := company.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CompanyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Code(); ok {
		_spec.SetField(company.FieldCode, field.TypeString, value)
	}
	if value, ok := cu.mutation.Address(); ok {
		_spec.SetField(company.FieldAddress, field.TypeString, value)
	}
	if cu.mutation.AddressCleared() {
		_spec.ClearField(company.FieldAddress, field.TypeString)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(company.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.BranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.BranchesTable,
			Columns: []string{company.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedBranchesIDs(); len(nodes) > 0 && !cu.mutation.BranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.BranchesTable,
			Columns: []string{company.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.BranchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.BranchesTable,
			Columns: []string{company.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CompanyUpdateOne is the builder for updating a single Company entity.
type CompanyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyMutation
}

// SetName sets the "name" field.
func (cuo *CompanyUpdateOne) SetName(s string) *CompanyUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableName(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetCode sets the "code" field.
func (cuo *CompanyUpdateOne) SetCode(s string) *CompanyUpdateOne {
	cuo.mutation.SetCode(s)
	return cuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableCode(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetCode(*s)
	}
	return cuo
}

// SetAddress sets the "address" field.
func (cuo *CompanyUpdateOne) SetAddress(s string) *CompanyUpdateOne {
	cuo.mutation.SetAddress(s)
	return cuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (cuo *CompanyUpdateOne) SetNillableAddress(s *string) *CompanyUpdateOne {
	if s != nil {
		cuo.SetAddress(*s)
	}
	return cuo
}

// ClearAddress clears the value of the "address" field.
func (cuo *CompanyUpdateOne) ClearAddress() *CompanyUpdateOne {
	cuo.mutation.ClearAddress()
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CompanyUpdateOne) SetUpdatedAt(t time.Time) *CompanyUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// AddBranchIDs adds the "branches" edge to the Branch entity by IDs.
func (cuo *CompanyUpdateOne) AddBranchIDs(ids ...uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.AddBranchIDs(ids...)
	return cuo
}

// AddBranches adds the "branches" edges to the Branch entity.
func (cuo *CompanyUpdateOne) AddBranches(b ...*Branch) *CompanyUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.AddBranchIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (cuo *CompanyUpdateOne) Mutation() *CompanyMutation {
	return cuo.mutation
}

// ClearBranches clears all "branches" edges to the Branch entity.
func (cuo *CompanyUpdateOne) ClearBranches() *CompanyUpdateOne {
	cuo.mutation.ClearBranches()
	return cuo
}

// RemoveBranchIDs removes the "branches" edge to Branch entities by IDs.
func (cuo *CompanyUpdateOne) RemoveBranchIDs(ids ...uuid.UUID) *CompanyUpdateOne {
	cuo.mutation.RemoveBranchIDs(ids...)
	return cuo
}

// RemoveBranches removes "branches" edges to Branch entities.
func (cuo *CompanyUpdateOne) RemoveBranches(b ...*Branch) *CompanyUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cuo.RemoveBranchIDs(ids...)
}

// Where appends a list predicates to the CompanyUpdate builder.
func (cuo *CompanyUpdateOne) Where(ps ...predicate.Company) *CompanyUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CompanyUpdateOne) Select(field string, fields ...string) *CompanyUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Company entity.
func (cuo *CompanyUpdateOne) Save(ctx context.Context) (*Company, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CompanyUpdateOne) SaveX(ctx context.Context) *Company {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CompanyUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CompanyUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CompanyUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := company.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CompanyUpdateOne) sqlSave(ctx context.Context) (_node *Company, err error) {
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Company.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, company.FieldID)
		for _, f := range fields {
			if !company.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != company.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Code(); ok {
		_spec.SetField(company.FieldCode, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Address(); ok {
		_spec.SetField(company.FieldAddress, field.TypeString, value)
	}
	if cuo.mutation.AddressCleared() {
		_spec.ClearField(company.FieldAddress, field.TypeString)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(company.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.BranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.BranchesTable,
			Columns: []string{company.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedBranchesIDs(); len(nodes) > 0 && !cuo.mutation.BranchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.BranchesTable,
			Columns: []string{company.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.BranchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   company.BranchesTable,
			Columns: []string{company.BranchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Company{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
