// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/department"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
	"github.com/longgggwwww/hrm-ms-hr/ent/zalodepartment"
)

// ZaloDepartmentQuery is the builder for querying ZaloDepartment entities.
type ZaloDepartmentQuery struct {
	config
	ctx            *QueryContext
	order          []zalodepartment.OrderOption
	inters         []Interceptor
	predicates     []predicate.ZaloDepartment
	withDepartment *DepartmentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ZaloDepartmentQuery builder.
func (zdq *ZaloDepartmentQuery) Where(ps ...predicate.ZaloDepartment) *ZaloDepartmentQuery {
	zdq.predicates = append(zdq.predicates, ps...)
	return zdq
}

// Limit the number of records to be returned by this query.
func (zdq *ZaloDepartmentQuery) Limit(limit int) *ZaloDepartmentQuery {
	zdq.ctx.Limit = &limit
	return zdq
}

// Offset to start from.
func (zdq *ZaloDepartmentQuery) Offset(offset int) *ZaloDepartmentQuery {
	zdq.ctx.Offset = &offset
	return zdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (zdq *ZaloDepartmentQuery) Unique(unique bool) *ZaloDepartmentQuery {
	zdq.ctx.Unique = &unique
	return zdq
}

// Order specifies how the records should be ordered.
func (zdq *ZaloDepartmentQuery) Order(o ...zalodepartment.OrderOption) *ZaloDepartmentQuery {
	zdq.order = append(zdq.order, o...)
	return zdq
}

// QueryDepartment chains the current query on the "department" edge.
func (zdq *ZaloDepartmentQuery) QueryDepartment() *DepartmentQuery {
	query := (&DepartmentClient{config: zdq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := zdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := zdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(zalodepartment.Table, zalodepartment.FieldID, selector),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, zalodepartment.DepartmentTable, zalodepartment.DepartmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(zdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ZaloDepartment entity from the query.
// Returns a *NotFoundError when no ZaloDepartment was found.
func (zdq *ZaloDepartmentQuery) First(ctx context.Context) (*ZaloDepartment, error) {
	nodes, err := zdq.Limit(1).All(setContextOp(ctx, zdq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{zalodepartment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (zdq *ZaloDepartmentQuery) FirstX(ctx context.Context) *ZaloDepartment {
	node, err := zdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ZaloDepartment ID from the query.
// Returns a *NotFoundError when no ZaloDepartment ID was found.
func (zdq *ZaloDepartmentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = zdq.Limit(1).IDs(setContextOp(ctx, zdq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{zalodepartment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (zdq *ZaloDepartmentQuery) FirstIDX(ctx context.Context) int {
	id, err := zdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ZaloDepartment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ZaloDepartment entity is found.
// Returns a *NotFoundError when no ZaloDepartment entities are found.
func (zdq *ZaloDepartmentQuery) Only(ctx context.Context) (*ZaloDepartment, error) {
	nodes, err := zdq.Limit(2).All(setContextOp(ctx, zdq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{zalodepartment.Label}
	default:
		return nil, &NotSingularError{zalodepartment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (zdq *ZaloDepartmentQuery) OnlyX(ctx context.Context) *ZaloDepartment {
	node, err := zdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ZaloDepartment ID in the query.
// Returns a *NotSingularError when more than one ZaloDepartment ID is found.
// Returns a *NotFoundError when no entities are found.
func (zdq *ZaloDepartmentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = zdq.Limit(2).IDs(setContextOp(ctx, zdq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{zalodepartment.Label}
	default:
		err = &NotSingularError{zalodepartment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (zdq *ZaloDepartmentQuery) OnlyIDX(ctx context.Context) int {
	id, err := zdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ZaloDepartments.
func (zdq *ZaloDepartmentQuery) All(ctx context.Context) ([]*ZaloDepartment, error) {
	ctx = setContextOp(ctx, zdq.ctx, ent.OpQueryAll)
	if err := zdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ZaloDepartment, *ZaloDepartmentQuery]()
	return withInterceptors[[]*ZaloDepartment](ctx, zdq, qr, zdq.inters)
}

// AllX is like All, but panics if an error occurs.
func (zdq *ZaloDepartmentQuery) AllX(ctx context.Context) []*ZaloDepartment {
	nodes, err := zdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ZaloDepartment IDs.
func (zdq *ZaloDepartmentQuery) IDs(ctx context.Context) (ids []int, err error) {
	if zdq.ctx.Unique == nil && zdq.path != nil {
		zdq.Unique(true)
	}
	ctx = setContextOp(ctx, zdq.ctx, ent.OpQueryIDs)
	if err = zdq.Select(zalodepartment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (zdq *ZaloDepartmentQuery) IDsX(ctx context.Context) []int {
	ids, err := zdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (zdq *ZaloDepartmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, zdq.ctx, ent.OpQueryCount)
	if err := zdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, zdq, querierCount[*ZaloDepartmentQuery](), zdq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (zdq *ZaloDepartmentQuery) CountX(ctx context.Context) int {
	count, err := zdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (zdq *ZaloDepartmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, zdq.ctx, ent.OpQueryExist)
	switch _, err := zdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (zdq *ZaloDepartmentQuery) ExistX(ctx context.Context) bool {
	exist, err := zdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ZaloDepartmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (zdq *ZaloDepartmentQuery) Clone() *ZaloDepartmentQuery {
	if zdq == nil {
		return nil
	}
	return &ZaloDepartmentQuery{
		config:         zdq.config,
		ctx:            zdq.ctx.Clone(),
		order:          append([]zalodepartment.OrderOption{}, zdq.order...),
		inters:         append([]Interceptor{}, zdq.inters...),
		predicates:     append([]predicate.ZaloDepartment{}, zdq.predicates...),
		withDepartment: zdq.withDepartment.Clone(),
		// clone intermediate query.
		sql:  zdq.sql.Clone(),
		path: zdq.path,
	}
}

// WithDepartment tells the query-builder to eager-load the nodes that are connected to
// the "department" edge. The optional arguments are used to configure the query builder of the edge.
func (zdq *ZaloDepartmentQuery) WithDepartment(opts ...func(*DepartmentQuery)) *ZaloDepartmentQuery {
	query := (&DepartmentClient{config: zdq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	zdq.withDepartment = query
	return zdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		GroupID string `json:"group_id"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ZaloDepartment.Query().
//		GroupBy(zalodepartment.FieldGroupID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (zdq *ZaloDepartmentQuery) GroupBy(field string, fields ...string) *ZaloDepartmentGroupBy {
	zdq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ZaloDepartmentGroupBy{build: zdq}
	grbuild.flds = &zdq.ctx.Fields
	grbuild.label = zalodepartment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		GroupID string `json:"group_id"`
//	}
//
//	client.ZaloDepartment.Query().
//		Select(zalodepartment.FieldGroupID).
//		Scan(ctx, &v)
func (zdq *ZaloDepartmentQuery) Select(fields ...string) *ZaloDepartmentSelect {
	zdq.ctx.Fields = append(zdq.ctx.Fields, fields...)
	sbuild := &ZaloDepartmentSelect{ZaloDepartmentQuery: zdq}
	sbuild.label = zalodepartment.Label
	sbuild.flds, sbuild.scan = &zdq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ZaloDepartmentSelect configured with the given aggregations.
func (zdq *ZaloDepartmentQuery) Aggregate(fns ...AggregateFunc) *ZaloDepartmentSelect {
	return zdq.Select().Aggregate(fns...)
}

func (zdq *ZaloDepartmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range zdq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, zdq); err != nil {
				return err
			}
		}
	}
	for _, f := range zdq.ctx.Fields {
		if !zalodepartment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if zdq.path != nil {
		prev, err := zdq.path(ctx)
		if err != nil {
			return err
		}
		zdq.sql = prev
	}
	return nil
}

func (zdq *ZaloDepartmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ZaloDepartment, error) {
	var (
		nodes       = []*ZaloDepartment{}
		_spec       = zdq.querySpec()
		loadedTypes = [1]bool{
			zdq.withDepartment != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ZaloDepartment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ZaloDepartment{config: zdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, zdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := zdq.withDepartment; query != nil {
		if err := zdq.loadDepartment(ctx, query, nodes, nil,
			func(n *ZaloDepartment, e *Department) { n.Edges.Department = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (zdq *ZaloDepartmentQuery) loadDepartment(ctx context.Context, query *DepartmentQuery, nodes []*ZaloDepartment, init func(*ZaloDepartment), assign func(*ZaloDepartment, *Department)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ZaloDepartment)
	for i := range nodes {
		fk := nodes[i].DepartmentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(department.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "department_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (zdq *ZaloDepartmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := zdq.querySpec()
	_spec.Node.Columns = zdq.ctx.Fields
	if len(zdq.ctx.Fields) > 0 {
		_spec.Unique = zdq.ctx.Unique != nil && *zdq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, zdq.driver, _spec)
}

func (zdq *ZaloDepartmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(zalodepartment.Table, zalodepartment.Columns, sqlgraph.NewFieldSpec(zalodepartment.FieldID, field.TypeInt))
	_spec.From = zdq.sql
	if unique := zdq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if zdq.path != nil {
		_spec.Unique = true
	}
	if fields := zdq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, zalodepartment.FieldID)
		for i := range fields {
			if fields[i] != zalodepartment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if zdq.withDepartment != nil {
			_spec.Node.AddColumnOnce(zalodepartment.FieldDepartmentID)
		}
	}
	if ps := zdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := zdq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := zdq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := zdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (zdq *ZaloDepartmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(zdq.driver.Dialect())
	t1 := builder.Table(zalodepartment.Table)
	columns := zdq.ctx.Fields
	if len(columns) == 0 {
		columns = zalodepartment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if zdq.sql != nil {
		selector = zdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if zdq.ctx.Unique != nil && *zdq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range zdq.predicates {
		p(selector)
	}
	for _, p := range zdq.order {
		p(selector)
	}
	if offset := zdq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := zdq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ZaloDepartmentGroupBy is the group-by builder for ZaloDepartment entities.
type ZaloDepartmentGroupBy struct {
	selector
	build *ZaloDepartmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (zdgb *ZaloDepartmentGroupBy) Aggregate(fns ...AggregateFunc) *ZaloDepartmentGroupBy {
	zdgb.fns = append(zdgb.fns, fns...)
	return zdgb
}

// Scan applies the selector query and scans the result into the given value.
func (zdgb *ZaloDepartmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, zdgb.build.ctx, ent.OpQueryGroupBy)
	if err := zdgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ZaloDepartmentQuery, *ZaloDepartmentGroupBy](ctx, zdgb.build, zdgb, zdgb.build.inters, v)
}

func (zdgb *ZaloDepartmentGroupBy) sqlScan(ctx context.Context, root *ZaloDepartmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(zdgb.fns))
	for _, fn := range zdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*zdgb.flds)+len(zdgb.fns))
		for _, f := range *zdgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*zdgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := zdgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ZaloDepartmentSelect is the builder for selecting fields of ZaloDepartment entities.
type ZaloDepartmentSelect struct {
	*ZaloDepartmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (zds *ZaloDepartmentSelect) Aggregate(fns ...AggregateFunc) *ZaloDepartmentSelect {
	zds.fns = append(zds.fns, fns...)
	return zds
}

// Scan applies the selector query and scans the result into the given value.
func (zds *ZaloDepartmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, zds.ctx, ent.OpQuerySelect)
	if err := zds.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ZaloDepartmentQuery, *ZaloDepartmentSelect](ctx, zds.ZaloDepartmentQuery, zds, zds.inters, v)
}

func (zds *ZaloDepartmentSelect) sqlScan(ctx context.Context, root *ZaloDepartmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(zds.fns))
	for _, fn := range zds.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*zds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := zds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
