// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/appointmenthistory"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
	"github.com/longgggwwww/hrm-ms-hr/ent/leaveapproval"
	"github.com/longgggwwww/hrm-ms-hr/ent/leaverequest"
	"github.com/longgggwwww/hrm-ms-hr/ent/position"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
	"github.com/longgggwwww/hrm-ms-hr/ent/project"
	"github.com/longgggwwww/hrm-ms-hr/ent/task"
	"github.com/longgggwwww/hrm-ms-hr/ent/taskreport"
)

// EmployeeUpdate is the builder for updating Employee entities.
type EmployeeUpdate struct {
	config
	hooks    []Hook
	mutation *EmployeeMutation
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (eu *EmployeeUpdate) Where(ps ...predicate.Employee) *EmployeeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUserID sets the "user_id" field.
func (eu *EmployeeUpdate) SetUserID(s string) *EmployeeUpdate {
	eu.mutation.SetUserID(s)
	return eu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableUserID(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetUserID(*s)
	}
	return eu
}

// ClearUserID clears the value of the "user_id" field.
func (eu *EmployeeUpdate) ClearUserID() *EmployeeUpdate {
	eu.mutation.ClearUserID()
	return eu
}

// SetCode sets the "code" field.
func (eu *EmployeeUpdate) SetCode(s string) *EmployeeUpdate {
	eu.mutation.SetCode(s)
	return eu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableCode(s *string) *EmployeeUpdate {
	if s != nil {
		eu.SetCode(*s)
	}
	return eu
}

// SetStatus sets the "status" field.
func (eu *EmployeeUpdate) SetStatus(e employee.Status) *EmployeeUpdate {
	eu.mutation.SetStatus(e)
	return eu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableStatus(e *employee.Status) *EmployeeUpdate {
	if e != nil {
		eu.SetStatus(*e)
	}
	return eu
}

// SetPositionID sets the "position_id" field.
func (eu *EmployeeUpdate) SetPositionID(i int) *EmployeeUpdate {
	eu.mutation.SetPositionID(i)
	return eu
}

// SetNillablePositionID sets the "position_id" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillablePositionID(i *int) *EmployeeUpdate {
	if i != nil {
		eu.SetPositionID(*i)
	}
	return eu
}

// SetJoiningAt sets the "joining_at" field.
func (eu *EmployeeUpdate) SetJoiningAt(t time.Time) *EmployeeUpdate {
	eu.mutation.SetJoiningAt(t)
	return eu
}

// SetNillableJoiningAt sets the "joining_at" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableJoiningAt(t *time.Time) *EmployeeUpdate {
	if t != nil {
		eu.SetJoiningAt(*t)
	}
	return eu
}

// SetOrgID sets the "org_id" field.
func (eu *EmployeeUpdate) SetOrgID(i int) *EmployeeUpdate {
	eu.mutation.ResetOrgID()
	eu.mutation.SetOrgID(i)
	return eu
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (eu *EmployeeUpdate) SetNillableOrgID(i *int) *EmployeeUpdate {
	if i != nil {
		eu.SetOrgID(*i)
	}
	return eu
}

// AddOrgID adds i to the "org_id" field.
func (eu *EmployeeUpdate) AddOrgID(i int) *EmployeeUpdate {
	eu.mutation.AddOrgID(i)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EmployeeUpdate) SetUpdatedAt(t time.Time) *EmployeeUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetPosition sets the "position" edge to the Position entity.
func (eu *EmployeeUpdate) SetPosition(p *Position) *EmployeeUpdate {
	return eu.SetPositionID(p.ID)
}

// AddCreatedProjectIDs adds the "created_projects" edge to the Project entity by IDs.
func (eu *EmployeeUpdate) AddCreatedProjectIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddCreatedProjectIDs(ids...)
	return eu
}

// AddCreatedProjects adds the "created_projects" edges to the Project entity.
func (eu *EmployeeUpdate) AddCreatedProjects(p ...*Project) *EmployeeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddCreatedProjectIDs(ids...)
}

// AddUpdatedProjectIDs adds the "updated_projects" edge to the Project entity by IDs.
func (eu *EmployeeUpdate) AddUpdatedProjectIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddUpdatedProjectIDs(ids...)
	return eu
}

// AddUpdatedProjects adds the "updated_projects" edges to the Project entity.
func (eu *EmployeeUpdate) AddUpdatedProjects(p ...*Project) *EmployeeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddUpdatedProjectIDs(ids...)
}

// AddAssignedTaskIDs adds the "assigned_tasks" edge to the Task entity by IDs.
func (eu *EmployeeUpdate) AddAssignedTaskIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddAssignedTaskIDs(ids...)
	return eu
}

// AddAssignedTasks adds the "assigned_tasks" edges to the Task entity.
func (eu *EmployeeUpdate) AddAssignedTasks(t ...*Task) *EmployeeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddAssignedTaskIDs(ids...)
}

// AddLeaveApprofeIDs adds the "leave_approves" edge to the LeaveApproval entity by IDs.
func (eu *EmployeeUpdate) AddLeaveApprofeIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddLeaveApprofeIDs(ids...)
	return eu
}

// AddLeaveApproves adds the "leave_approves" edges to the LeaveApproval entity.
func (eu *EmployeeUpdate) AddLeaveApproves(l ...*LeaveApproval) *EmployeeUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eu.AddLeaveApprofeIDs(ids...)
}

// AddLeaveRequestIDs adds the "leave_requests" edge to the LeaveRequest entity by IDs.
func (eu *EmployeeUpdate) AddLeaveRequestIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddLeaveRequestIDs(ids...)
	return eu
}

// AddLeaveRequests adds the "leave_requests" edges to the LeaveRequest entity.
func (eu *EmployeeUpdate) AddLeaveRequests(l ...*LeaveRequest) *EmployeeUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eu.AddLeaveRequestIDs(ids...)
}

// AddTaskReportIDs adds the "task_reports" edge to the TaskReport entity by IDs.
func (eu *EmployeeUpdate) AddTaskReportIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddTaskReportIDs(ids...)
	return eu
}

// AddTaskReports adds the "task_reports" edges to the TaskReport entity.
func (eu *EmployeeUpdate) AddTaskReports(t ...*TaskReport) *EmployeeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddTaskReportIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (eu *EmployeeUpdate) AddProjectIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddProjectIDs(ids...)
	return eu
}

// AddProjects adds the "projects" edges to the Project entity.
func (eu *EmployeeUpdate) AddProjects(p ...*Project) *EmployeeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddProjectIDs(ids...)
}

// AddAppointmentHistoryIDs adds the "appointment_histories" edge to the AppointmentHistory entity by IDs.
func (eu *EmployeeUpdate) AddAppointmentHistoryIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.AddAppointmentHistoryIDs(ids...)
	return eu
}

// AddAppointmentHistories adds the "appointment_histories" edges to the AppointmentHistory entity.
func (eu *EmployeeUpdate) AddAppointmentHistories(a ...*AppointmentHistory) *EmployeeUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.AddAppointmentHistoryIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (eu *EmployeeUpdate) Mutation() *EmployeeMutation {
	return eu.mutation
}

// ClearPosition clears the "position" edge to the Position entity.
func (eu *EmployeeUpdate) ClearPosition() *EmployeeUpdate {
	eu.mutation.ClearPosition()
	return eu
}

// ClearCreatedProjects clears all "created_projects" edges to the Project entity.
func (eu *EmployeeUpdate) ClearCreatedProjects() *EmployeeUpdate {
	eu.mutation.ClearCreatedProjects()
	return eu
}

// RemoveCreatedProjectIDs removes the "created_projects" edge to Project entities by IDs.
func (eu *EmployeeUpdate) RemoveCreatedProjectIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveCreatedProjectIDs(ids...)
	return eu
}

// RemoveCreatedProjects removes "created_projects" edges to Project entities.
func (eu *EmployeeUpdate) RemoveCreatedProjects(p ...*Project) *EmployeeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveCreatedProjectIDs(ids...)
}

// ClearUpdatedProjects clears all "updated_projects" edges to the Project entity.
func (eu *EmployeeUpdate) ClearUpdatedProjects() *EmployeeUpdate {
	eu.mutation.ClearUpdatedProjects()
	return eu
}

// RemoveUpdatedProjectIDs removes the "updated_projects" edge to Project entities by IDs.
func (eu *EmployeeUpdate) RemoveUpdatedProjectIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveUpdatedProjectIDs(ids...)
	return eu
}

// RemoveUpdatedProjects removes "updated_projects" edges to Project entities.
func (eu *EmployeeUpdate) RemoveUpdatedProjects(p ...*Project) *EmployeeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveUpdatedProjectIDs(ids...)
}

// ClearAssignedTasks clears all "assigned_tasks" edges to the Task entity.
func (eu *EmployeeUpdate) ClearAssignedTasks() *EmployeeUpdate {
	eu.mutation.ClearAssignedTasks()
	return eu
}

// RemoveAssignedTaskIDs removes the "assigned_tasks" edge to Task entities by IDs.
func (eu *EmployeeUpdate) RemoveAssignedTaskIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveAssignedTaskIDs(ids...)
	return eu
}

// RemoveAssignedTasks removes "assigned_tasks" edges to Task entities.
func (eu *EmployeeUpdate) RemoveAssignedTasks(t ...*Task) *EmployeeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveAssignedTaskIDs(ids...)
}

// ClearLeaveApproves clears all "leave_approves" edges to the LeaveApproval entity.
func (eu *EmployeeUpdate) ClearLeaveApproves() *EmployeeUpdate {
	eu.mutation.ClearLeaveApproves()
	return eu
}

// RemoveLeaveApprofeIDs removes the "leave_approves" edge to LeaveApproval entities by IDs.
func (eu *EmployeeUpdate) RemoveLeaveApprofeIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveLeaveApprofeIDs(ids...)
	return eu
}

// RemoveLeaveApproves removes "leave_approves" edges to LeaveApproval entities.
func (eu *EmployeeUpdate) RemoveLeaveApproves(l ...*LeaveApproval) *EmployeeUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eu.RemoveLeaveApprofeIDs(ids...)
}

// ClearLeaveRequests clears all "leave_requests" edges to the LeaveRequest entity.
func (eu *EmployeeUpdate) ClearLeaveRequests() *EmployeeUpdate {
	eu.mutation.ClearLeaveRequests()
	return eu
}

// RemoveLeaveRequestIDs removes the "leave_requests" edge to LeaveRequest entities by IDs.
func (eu *EmployeeUpdate) RemoveLeaveRequestIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveLeaveRequestIDs(ids...)
	return eu
}

// RemoveLeaveRequests removes "leave_requests" edges to LeaveRequest entities.
func (eu *EmployeeUpdate) RemoveLeaveRequests(l ...*LeaveRequest) *EmployeeUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return eu.RemoveLeaveRequestIDs(ids...)
}

// ClearTaskReports clears all "task_reports" edges to the TaskReport entity.
func (eu *EmployeeUpdate) ClearTaskReports() *EmployeeUpdate {
	eu.mutation.ClearTaskReports()
	return eu
}

// RemoveTaskReportIDs removes the "task_reports" edge to TaskReport entities by IDs.
func (eu *EmployeeUpdate) RemoveTaskReportIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveTaskReportIDs(ids...)
	return eu
}

// RemoveTaskReports removes "task_reports" edges to TaskReport entities.
func (eu *EmployeeUpdate) RemoveTaskReports(t ...*TaskReport) *EmployeeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveTaskReportIDs(ids...)
}

// ClearProjects clears all "projects" edges to the Project entity.
func (eu *EmployeeUpdate) ClearProjects() *EmployeeUpdate {
	eu.mutation.ClearProjects()
	return eu
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (eu *EmployeeUpdate) RemoveProjectIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveProjectIDs(ids...)
	return eu
}

// RemoveProjects removes "projects" edges to Project entities.
func (eu *EmployeeUpdate) RemoveProjects(p ...*Project) *EmployeeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemoveProjectIDs(ids...)
}

// ClearAppointmentHistories clears all "appointment_histories" edges to the AppointmentHistory entity.
func (eu *EmployeeUpdate) ClearAppointmentHistories() *EmployeeUpdate {
	eu.mutation.ClearAppointmentHistories()
	return eu
}

// RemoveAppointmentHistoryIDs removes the "appointment_histories" edge to AppointmentHistory entities by IDs.
func (eu *EmployeeUpdate) RemoveAppointmentHistoryIDs(ids ...int) *EmployeeUpdate {
	eu.mutation.RemoveAppointmentHistoryIDs(ids...)
	return eu
}

// RemoveAppointmentHistories removes "appointment_histories" edges to AppointmentHistory entities.
func (eu *EmployeeUpdate) RemoveAppointmentHistories(a ...*AppointmentHistory) *EmployeeUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return eu.RemoveAppointmentHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EmployeeUpdate) Save(ctx context.Context) (int, error) {
	eu.defaults()
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmployeeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmployeeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EmployeeUpdate) defaults() {
	if _, ok := eu.mutation.UpdatedAt(); !ok {
		v := employee.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EmployeeUpdate) check() error {
	if v, ok := eu.mutation.Code(); ok {
		if err := employee.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Employee.code": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Status(); ok {
		if err := employee.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Employee.status": %w`, err)}
		}
	}
	if eu.mutation.PositionCleared() && len(eu.mutation.PositionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Employee.position"`)
	}
	return nil
}

func (eu *EmployeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UserID(); ok {
		_spec.SetField(employee.FieldUserID, field.TypeString, value)
	}
	if eu.mutation.UserIDCleared() {
		_spec.ClearField(employee.FieldUserID, field.TypeString)
	}
	if value, ok := eu.mutation.Code(); ok {
		_spec.SetField(employee.FieldCode, field.TypeString, value)
	}
	if value, ok := eu.mutation.Status(); ok {
		_spec.SetField(employee.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.JoiningAt(); ok {
		_spec.SetField(employee.FieldJoiningAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.OrgID(); ok {
		_spec.SetField(employee.FieldOrgID, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedOrgID(); ok {
		_spec.AddField(employee.FieldOrgID, field.TypeInt, value)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(employee.FieldUpdatedAt, field.TypeTime, value)
	}
	if eu.mutation.PositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.PositionTable,
			Columns: []string{employee.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.PositionTable,
			Columns: []string{employee.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.CreatedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.CreatedProjectsTable,
			Columns: []string{employee.CreatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCreatedProjectsIDs(); len(nodes) > 0 && !eu.mutation.CreatedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.CreatedProjectsTable,
			Columns: []string{employee.CreatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CreatedProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.CreatedProjectsTable,
			Columns: []string{employee.CreatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.UpdatedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.UpdatedProjectsTable,
			Columns: []string{employee.UpdatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedUpdatedProjectsIDs(); len(nodes) > 0 && !eu.mutation.UpdatedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.UpdatedProjectsTable,
			Columns: []string{employee.UpdatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UpdatedProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.UpdatedProjectsTable,
			Columns: []string{employee.UpdatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.AssignedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.AssignedTasksTable,
			Columns: employee.AssignedTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedAssignedTasksIDs(); len(nodes) > 0 && !eu.mutation.AssignedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.AssignedTasksTable,
			Columns: employee.AssignedTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AssignedTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.AssignedTasksTable,
			Columns: employee.AssignedTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.LeaveApprovesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeaveApprovesTable,
			Columns: []string{employee.LeaveApprovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaveapproval.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedLeaveApprovesIDs(); len(nodes) > 0 && !eu.mutation.LeaveApprovesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeaveApprovesTable,
			Columns: []string{employee.LeaveApprovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaveapproval.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.LeaveApprovesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeaveApprovesTable,
			Columns: []string{employee.LeaveApprovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaveapproval.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.LeaveRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeaveRequestsTable,
			Columns: []string{employee.LeaveRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaverequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedLeaveRequestsIDs(); len(nodes) > 0 && !eu.mutation.LeaveRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeaveRequestsTable,
			Columns: []string{employee.LeaveRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaverequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.LeaveRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeaveRequestsTable,
			Columns: []string{employee.LeaveRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaverequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TaskReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.TaskReportsTable,
			Columns: []string{employee.TaskReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTaskReportsIDs(); len(nodes) > 0 && !eu.mutation.TaskReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.TaskReportsTable,
			Columns: []string{employee.TaskReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TaskReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.TaskReportsTable,
			Columns: []string{employee.TaskReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.ProjectsTable,
			Columns: employee.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !eu.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.ProjectsTable,
			Columns: employee.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.ProjectsTable,
			Columns: employee.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.AppointmentHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AppointmentHistoriesTable,
			Columns: []string{employee.AppointmentHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointmenthistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedAppointmentHistoriesIDs(); len(nodes) > 0 && !eu.mutation.AppointmentHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AppointmentHistoriesTable,
			Columns: []string{employee.AppointmentHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointmenthistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.AppointmentHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AppointmentHistoriesTable,
			Columns: []string{employee.AppointmentHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointmenthistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EmployeeUpdateOne is the builder for updating a single Employee entity.
type EmployeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmployeeMutation
}

// SetUserID sets the "user_id" field.
func (euo *EmployeeUpdateOne) SetUserID(s string) *EmployeeUpdateOne {
	euo.mutation.SetUserID(s)
	return euo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableUserID(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetUserID(*s)
	}
	return euo
}

// ClearUserID clears the value of the "user_id" field.
func (euo *EmployeeUpdateOne) ClearUserID() *EmployeeUpdateOne {
	euo.mutation.ClearUserID()
	return euo
}

// SetCode sets the "code" field.
func (euo *EmployeeUpdateOne) SetCode(s string) *EmployeeUpdateOne {
	euo.mutation.SetCode(s)
	return euo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableCode(s *string) *EmployeeUpdateOne {
	if s != nil {
		euo.SetCode(*s)
	}
	return euo
}

// SetStatus sets the "status" field.
func (euo *EmployeeUpdateOne) SetStatus(e employee.Status) *EmployeeUpdateOne {
	euo.mutation.SetStatus(e)
	return euo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableStatus(e *employee.Status) *EmployeeUpdateOne {
	if e != nil {
		euo.SetStatus(*e)
	}
	return euo
}

// SetPositionID sets the "position_id" field.
func (euo *EmployeeUpdateOne) SetPositionID(i int) *EmployeeUpdateOne {
	euo.mutation.SetPositionID(i)
	return euo
}

// SetNillablePositionID sets the "position_id" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillablePositionID(i *int) *EmployeeUpdateOne {
	if i != nil {
		euo.SetPositionID(*i)
	}
	return euo
}

// SetJoiningAt sets the "joining_at" field.
func (euo *EmployeeUpdateOne) SetJoiningAt(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetJoiningAt(t)
	return euo
}

// SetNillableJoiningAt sets the "joining_at" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableJoiningAt(t *time.Time) *EmployeeUpdateOne {
	if t != nil {
		euo.SetJoiningAt(*t)
	}
	return euo
}

// SetOrgID sets the "org_id" field.
func (euo *EmployeeUpdateOne) SetOrgID(i int) *EmployeeUpdateOne {
	euo.mutation.ResetOrgID()
	euo.mutation.SetOrgID(i)
	return euo
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (euo *EmployeeUpdateOne) SetNillableOrgID(i *int) *EmployeeUpdateOne {
	if i != nil {
		euo.SetOrgID(*i)
	}
	return euo
}

// AddOrgID adds i to the "org_id" field.
func (euo *EmployeeUpdateOne) AddOrgID(i int) *EmployeeUpdateOne {
	euo.mutation.AddOrgID(i)
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EmployeeUpdateOne) SetUpdatedAt(t time.Time) *EmployeeUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetPosition sets the "position" edge to the Position entity.
func (euo *EmployeeUpdateOne) SetPosition(p *Position) *EmployeeUpdateOne {
	return euo.SetPositionID(p.ID)
}

// AddCreatedProjectIDs adds the "created_projects" edge to the Project entity by IDs.
func (euo *EmployeeUpdateOne) AddCreatedProjectIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddCreatedProjectIDs(ids...)
	return euo
}

// AddCreatedProjects adds the "created_projects" edges to the Project entity.
func (euo *EmployeeUpdateOne) AddCreatedProjects(p ...*Project) *EmployeeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddCreatedProjectIDs(ids...)
}

// AddUpdatedProjectIDs adds the "updated_projects" edge to the Project entity by IDs.
func (euo *EmployeeUpdateOne) AddUpdatedProjectIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddUpdatedProjectIDs(ids...)
	return euo
}

// AddUpdatedProjects adds the "updated_projects" edges to the Project entity.
func (euo *EmployeeUpdateOne) AddUpdatedProjects(p ...*Project) *EmployeeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddUpdatedProjectIDs(ids...)
}

// AddAssignedTaskIDs adds the "assigned_tasks" edge to the Task entity by IDs.
func (euo *EmployeeUpdateOne) AddAssignedTaskIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddAssignedTaskIDs(ids...)
	return euo
}

// AddAssignedTasks adds the "assigned_tasks" edges to the Task entity.
func (euo *EmployeeUpdateOne) AddAssignedTasks(t ...*Task) *EmployeeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddAssignedTaskIDs(ids...)
}

// AddLeaveApprofeIDs adds the "leave_approves" edge to the LeaveApproval entity by IDs.
func (euo *EmployeeUpdateOne) AddLeaveApprofeIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddLeaveApprofeIDs(ids...)
	return euo
}

// AddLeaveApproves adds the "leave_approves" edges to the LeaveApproval entity.
func (euo *EmployeeUpdateOne) AddLeaveApproves(l ...*LeaveApproval) *EmployeeUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return euo.AddLeaveApprofeIDs(ids...)
}

// AddLeaveRequestIDs adds the "leave_requests" edge to the LeaveRequest entity by IDs.
func (euo *EmployeeUpdateOne) AddLeaveRequestIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddLeaveRequestIDs(ids...)
	return euo
}

// AddLeaveRequests adds the "leave_requests" edges to the LeaveRequest entity.
func (euo *EmployeeUpdateOne) AddLeaveRequests(l ...*LeaveRequest) *EmployeeUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return euo.AddLeaveRequestIDs(ids...)
}

// AddTaskReportIDs adds the "task_reports" edge to the TaskReport entity by IDs.
func (euo *EmployeeUpdateOne) AddTaskReportIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddTaskReportIDs(ids...)
	return euo
}

// AddTaskReports adds the "task_reports" edges to the TaskReport entity.
func (euo *EmployeeUpdateOne) AddTaskReports(t ...*TaskReport) *EmployeeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddTaskReportIDs(ids...)
}

// AddProjectIDs adds the "projects" edge to the Project entity by IDs.
func (euo *EmployeeUpdateOne) AddProjectIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddProjectIDs(ids...)
	return euo
}

// AddProjects adds the "projects" edges to the Project entity.
func (euo *EmployeeUpdateOne) AddProjects(p ...*Project) *EmployeeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddProjectIDs(ids...)
}

// AddAppointmentHistoryIDs adds the "appointment_histories" edge to the AppointmentHistory entity by IDs.
func (euo *EmployeeUpdateOne) AddAppointmentHistoryIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.AddAppointmentHistoryIDs(ids...)
	return euo
}

// AddAppointmentHistories adds the "appointment_histories" edges to the AppointmentHistory entity.
func (euo *EmployeeUpdateOne) AddAppointmentHistories(a ...*AppointmentHistory) *EmployeeUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.AddAppointmentHistoryIDs(ids...)
}

// Mutation returns the EmployeeMutation object of the builder.
func (euo *EmployeeUpdateOne) Mutation() *EmployeeMutation {
	return euo.mutation
}

// ClearPosition clears the "position" edge to the Position entity.
func (euo *EmployeeUpdateOne) ClearPosition() *EmployeeUpdateOne {
	euo.mutation.ClearPosition()
	return euo
}

// ClearCreatedProjects clears all "created_projects" edges to the Project entity.
func (euo *EmployeeUpdateOne) ClearCreatedProjects() *EmployeeUpdateOne {
	euo.mutation.ClearCreatedProjects()
	return euo
}

// RemoveCreatedProjectIDs removes the "created_projects" edge to Project entities by IDs.
func (euo *EmployeeUpdateOne) RemoveCreatedProjectIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveCreatedProjectIDs(ids...)
	return euo
}

// RemoveCreatedProjects removes "created_projects" edges to Project entities.
func (euo *EmployeeUpdateOne) RemoveCreatedProjects(p ...*Project) *EmployeeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveCreatedProjectIDs(ids...)
}

// ClearUpdatedProjects clears all "updated_projects" edges to the Project entity.
func (euo *EmployeeUpdateOne) ClearUpdatedProjects() *EmployeeUpdateOne {
	euo.mutation.ClearUpdatedProjects()
	return euo
}

// RemoveUpdatedProjectIDs removes the "updated_projects" edge to Project entities by IDs.
func (euo *EmployeeUpdateOne) RemoveUpdatedProjectIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveUpdatedProjectIDs(ids...)
	return euo
}

// RemoveUpdatedProjects removes "updated_projects" edges to Project entities.
func (euo *EmployeeUpdateOne) RemoveUpdatedProjects(p ...*Project) *EmployeeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveUpdatedProjectIDs(ids...)
}

// ClearAssignedTasks clears all "assigned_tasks" edges to the Task entity.
func (euo *EmployeeUpdateOne) ClearAssignedTasks() *EmployeeUpdateOne {
	euo.mutation.ClearAssignedTasks()
	return euo
}

// RemoveAssignedTaskIDs removes the "assigned_tasks" edge to Task entities by IDs.
func (euo *EmployeeUpdateOne) RemoveAssignedTaskIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveAssignedTaskIDs(ids...)
	return euo
}

// RemoveAssignedTasks removes "assigned_tasks" edges to Task entities.
func (euo *EmployeeUpdateOne) RemoveAssignedTasks(t ...*Task) *EmployeeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveAssignedTaskIDs(ids...)
}

// ClearLeaveApproves clears all "leave_approves" edges to the LeaveApproval entity.
func (euo *EmployeeUpdateOne) ClearLeaveApproves() *EmployeeUpdateOne {
	euo.mutation.ClearLeaveApproves()
	return euo
}

// RemoveLeaveApprofeIDs removes the "leave_approves" edge to LeaveApproval entities by IDs.
func (euo *EmployeeUpdateOne) RemoveLeaveApprofeIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveLeaveApprofeIDs(ids...)
	return euo
}

// RemoveLeaveApproves removes "leave_approves" edges to LeaveApproval entities.
func (euo *EmployeeUpdateOne) RemoveLeaveApproves(l ...*LeaveApproval) *EmployeeUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return euo.RemoveLeaveApprofeIDs(ids...)
}

// ClearLeaveRequests clears all "leave_requests" edges to the LeaveRequest entity.
func (euo *EmployeeUpdateOne) ClearLeaveRequests() *EmployeeUpdateOne {
	euo.mutation.ClearLeaveRequests()
	return euo
}

// RemoveLeaveRequestIDs removes the "leave_requests" edge to LeaveRequest entities by IDs.
func (euo *EmployeeUpdateOne) RemoveLeaveRequestIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveLeaveRequestIDs(ids...)
	return euo
}

// RemoveLeaveRequests removes "leave_requests" edges to LeaveRequest entities.
func (euo *EmployeeUpdateOne) RemoveLeaveRequests(l ...*LeaveRequest) *EmployeeUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return euo.RemoveLeaveRequestIDs(ids...)
}

// ClearTaskReports clears all "task_reports" edges to the TaskReport entity.
func (euo *EmployeeUpdateOne) ClearTaskReports() *EmployeeUpdateOne {
	euo.mutation.ClearTaskReports()
	return euo
}

// RemoveTaskReportIDs removes the "task_reports" edge to TaskReport entities by IDs.
func (euo *EmployeeUpdateOne) RemoveTaskReportIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveTaskReportIDs(ids...)
	return euo
}

// RemoveTaskReports removes "task_reports" edges to TaskReport entities.
func (euo *EmployeeUpdateOne) RemoveTaskReports(t ...*TaskReport) *EmployeeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveTaskReportIDs(ids...)
}

// ClearProjects clears all "projects" edges to the Project entity.
func (euo *EmployeeUpdateOne) ClearProjects() *EmployeeUpdateOne {
	euo.mutation.ClearProjects()
	return euo
}

// RemoveProjectIDs removes the "projects" edge to Project entities by IDs.
func (euo *EmployeeUpdateOne) RemoveProjectIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveProjectIDs(ids...)
	return euo
}

// RemoveProjects removes "projects" edges to Project entities.
func (euo *EmployeeUpdateOne) RemoveProjects(p ...*Project) *EmployeeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemoveProjectIDs(ids...)
}

// ClearAppointmentHistories clears all "appointment_histories" edges to the AppointmentHistory entity.
func (euo *EmployeeUpdateOne) ClearAppointmentHistories() *EmployeeUpdateOne {
	euo.mutation.ClearAppointmentHistories()
	return euo
}

// RemoveAppointmentHistoryIDs removes the "appointment_histories" edge to AppointmentHistory entities by IDs.
func (euo *EmployeeUpdateOne) RemoveAppointmentHistoryIDs(ids ...int) *EmployeeUpdateOne {
	euo.mutation.RemoveAppointmentHistoryIDs(ids...)
	return euo
}

// RemoveAppointmentHistories removes "appointment_histories" edges to AppointmentHistory entities.
func (euo *EmployeeUpdateOne) RemoveAppointmentHistories(a ...*AppointmentHistory) *EmployeeUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return euo.RemoveAppointmentHistoryIDs(ids...)
}

// Where appends a list predicates to the EmployeeUpdate builder.
func (euo *EmployeeUpdateOne) Where(ps ...predicate.Employee) *EmployeeUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EmployeeUpdateOne) Select(field string, fields ...string) *EmployeeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Employee entity.
func (euo *EmployeeUpdateOne) Save(ctx context.Context) (*Employee, error) {
	euo.defaults()
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmployeeUpdateOne) SaveX(ctx context.Context) *Employee {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EmployeeUpdateOne) defaults() {
	if _, ok := euo.mutation.UpdatedAt(); !ok {
		v := employee.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EmployeeUpdateOne) check() error {
	if v, ok := euo.mutation.Code(); ok {
		if err := employee.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Employee.code": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Status(); ok {
		if err := employee.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Employee.status": %w`, err)}
		}
	}
	if euo.mutation.PositionCleared() && len(euo.mutation.PositionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Employee.position"`)
	}
	return nil
}

func (euo *EmployeeUpdateOne) sqlSave(ctx context.Context) (_node *Employee, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Employee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employee.FieldID)
		for _, f := range fields {
			if !employee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != employee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UserID(); ok {
		_spec.SetField(employee.FieldUserID, field.TypeString, value)
	}
	if euo.mutation.UserIDCleared() {
		_spec.ClearField(employee.FieldUserID, field.TypeString)
	}
	if value, ok := euo.mutation.Code(); ok {
		_spec.SetField(employee.FieldCode, field.TypeString, value)
	}
	if value, ok := euo.mutation.Status(); ok {
		_spec.SetField(employee.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.JoiningAt(); ok {
		_spec.SetField(employee.FieldJoiningAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.OrgID(); ok {
		_spec.SetField(employee.FieldOrgID, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedOrgID(); ok {
		_spec.AddField(employee.FieldOrgID, field.TypeInt, value)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(employee.FieldUpdatedAt, field.TypeTime, value)
	}
	if euo.mutation.PositionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.PositionTable,
			Columns: []string{employee.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PositionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.PositionTable,
			Columns: []string{employee.PositionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.CreatedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.CreatedProjectsTable,
			Columns: []string{employee.CreatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCreatedProjectsIDs(); len(nodes) > 0 && !euo.mutation.CreatedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.CreatedProjectsTable,
			Columns: []string{employee.CreatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CreatedProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.CreatedProjectsTable,
			Columns: []string{employee.CreatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.UpdatedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.UpdatedProjectsTable,
			Columns: []string{employee.UpdatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedUpdatedProjectsIDs(); len(nodes) > 0 && !euo.mutation.UpdatedProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.UpdatedProjectsTable,
			Columns: []string{employee.UpdatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UpdatedProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.UpdatedProjectsTable,
			Columns: []string{employee.UpdatedProjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.AssignedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.AssignedTasksTable,
			Columns: employee.AssignedTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedAssignedTasksIDs(); len(nodes) > 0 && !euo.mutation.AssignedTasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.AssignedTasksTable,
			Columns: employee.AssignedTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AssignedTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.AssignedTasksTable,
			Columns: employee.AssignedTasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.LeaveApprovesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeaveApprovesTable,
			Columns: []string{employee.LeaveApprovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaveapproval.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedLeaveApprovesIDs(); len(nodes) > 0 && !euo.mutation.LeaveApprovesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeaveApprovesTable,
			Columns: []string{employee.LeaveApprovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaveapproval.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.LeaveApprovesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeaveApprovesTable,
			Columns: []string{employee.LeaveApprovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaveapproval.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.LeaveRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeaveRequestsTable,
			Columns: []string{employee.LeaveRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaverequest.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedLeaveRequestsIDs(); len(nodes) > 0 && !euo.mutation.LeaveRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeaveRequestsTable,
			Columns: []string{employee.LeaveRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaverequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.LeaveRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.LeaveRequestsTable,
			Columns: []string{employee.LeaveRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaverequest.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TaskReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.TaskReportsTable,
			Columns: []string{employee.TaskReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskreport.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTaskReportsIDs(); len(nodes) > 0 && !euo.mutation.TaskReportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.TaskReportsTable,
			Columns: []string{employee.TaskReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TaskReportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.TaskReportsTable,
			Columns: []string{employee.TaskReportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(taskreport.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.ProjectsTable,
			Columns: employee.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedProjectsIDs(); len(nodes) > 0 && !euo.mutation.ProjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.ProjectsTable,
			Columns: employee.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ProjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   employee.ProjectsTable,
			Columns: employee.ProjectsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.AppointmentHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AppointmentHistoriesTable,
			Columns: []string{employee.AppointmentHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointmenthistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedAppointmentHistoriesIDs(); len(nodes) > 0 && !euo.mutation.AppointmentHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AppointmentHistoriesTable,
			Columns: []string{employee.AppointmentHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointmenthistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.AppointmentHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   employee.AppointmentHistoriesTable,
			Columns: []string{employee.AppointmentHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appointmenthistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Employee{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{employee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
