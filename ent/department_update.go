// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/department"
	"github.com/longgggwwww/hrm-ms-hr/ent/organization"
	"github.com/longgggwwww/hrm-ms-hr/ent/position"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
)

// DepartmentUpdate is the builder for updating Department entities.
type DepartmentUpdate struct {
	config
	hooks    []Hook
	mutation *DepartmentMutation
}

// Where appends a list predicates to the DepartmentUpdate builder.
func (du *DepartmentUpdate) Where(ps ...predicate.Department) *DepartmentUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DepartmentUpdate) SetName(s string) *DepartmentUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableName(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetCode sets the "code" field.
func (du *DepartmentUpdate) SetCode(s string) *DepartmentUpdate {
	du.mutation.SetCode(s)
	return du
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableCode(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetCode(*s)
	}
	return du
}

// SetOrgID sets the "org_id" field.
func (du *DepartmentUpdate) SetOrgID(i int) *DepartmentUpdate {
	du.mutation.SetOrgID(i)
	return du
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableOrgID(i *int) *DepartmentUpdate {
	if i != nil {
		du.SetOrgID(*i)
	}
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DepartmentUpdate) SetUpdatedAt(t time.Time) *DepartmentUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableUpdatedAt(t *time.Time) *DepartmentUpdate {
	if t != nil {
		du.SetUpdatedAt(*t)
	}
	return du
}

// SetZaloGid sets the "zalo_gid" field.
func (du *DepartmentUpdate) SetZaloGid(s string) *DepartmentUpdate {
	du.mutation.SetZaloGid(s)
	return du
}

// SetNillableZaloGid sets the "zalo_gid" field if the given value is not nil.
func (du *DepartmentUpdate) SetNillableZaloGid(s *string) *DepartmentUpdate {
	if s != nil {
		du.SetZaloGid(*s)
	}
	return du
}

// ClearZaloGid clears the value of the "zalo_gid" field.
func (du *DepartmentUpdate) ClearZaloGid() *DepartmentUpdate {
	du.mutation.ClearZaloGid()
	return du
}

// AddPositionIDs adds the "positions" edge to the Position entity by IDs.
func (du *DepartmentUpdate) AddPositionIDs(ids ...int) *DepartmentUpdate {
	du.mutation.AddPositionIDs(ids...)
	return du
}

// AddPositions adds the "positions" edges to the Position entity.
func (du *DepartmentUpdate) AddPositions(p ...*Position) *DepartmentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.AddPositionIDs(ids...)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (du *DepartmentUpdate) SetOrganizationID(id int) *DepartmentUpdate {
	du.mutation.SetOrganizationID(id)
	return du
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (du *DepartmentUpdate) SetOrganization(o *Organization) *DepartmentUpdate {
	return du.SetOrganizationID(o.ID)
}

// Mutation returns the DepartmentMutation object of the builder.
func (du *DepartmentUpdate) Mutation() *DepartmentMutation {
	return du.mutation
}

// ClearPositions clears all "positions" edges to the Position entity.
func (du *DepartmentUpdate) ClearPositions() *DepartmentUpdate {
	du.mutation.ClearPositions()
	return du
}

// RemovePositionIDs removes the "positions" edge to Position entities by IDs.
func (du *DepartmentUpdate) RemovePositionIDs(ids ...int) *DepartmentUpdate {
	du.mutation.RemovePositionIDs(ids...)
	return du
}

// RemovePositions removes "positions" edges to Position entities.
func (du *DepartmentUpdate) RemovePositions(p ...*Position) *DepartmentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.RemovePositionIDs(ids...)
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (du *DepartmentUpdate) ClearOrganization() *DepartmentUpdate {
	du.mutation.ClearOrganization()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DepartmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DepartmentUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DepartmentUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DepartmentUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DepartmentUpdate) check() error {
	if v, ok := du.mutation.Name(); ok {
		if err := department.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Department.name": %w`, err)}
		}
	}
	if v, ok := du.mutation.Code(); ok {
		if err := department.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Department.code": %w`, err)}
		}
	}
	if du.mutation.OrganizationCleared() && len(du.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Department.organization"`)
	}
	return nil
}

func (du *DepartmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(department.Table, department.Columns, sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(department.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.Code(); ok {
		_spec.SetField(department.FieldCode, field.TypeString, value)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(department.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.ZaloGid(); ok {
		_spec.SetField(department.FieldZaloGid, field.TypeString, value)
	}
	if du.mutation.ZaloGidCleared() {
		_spec.ClearField(department.FieldZaloGid, field.TypeString)
	}
	if du.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.PositionsTable,
			Columns: []string{department.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !du.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.PositionsTable,
			Columns: []string{department.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.PositionsTable,
			Columns: []string{department.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.OrganizationTable,
			Columns: []string{department.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.OrganizationTable,
			Columns: []string{department.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DepartmentUpdateOne is the builder for updating a single Department entity.
type DepartmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DepartmentMutation
}

// SetName sets the "name" field.
func (duo *DepartmentUpdateOne) SetName(s string) *DepartmentUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableName(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetCode sets the "code" field.
func (duo *DepartmentUpdateOne) SetCode(s string) *DepartmentUpdateOne {
	duo.mutation.SetCode(s)
	return duo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableCode(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetCode(*s)
	}
	return duo
}

// SetOrgID sets the "org_id" field.
func (duo *DepartmentUpdateOne) SetOrgID(i int) *DepartmentUpdateOne {
	duo.mutation.SetOrgID(i)
	return duo
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableOrgID(i *int) *DepartmentUpdateOne {
	if i != nil {
		duo.SetOrgID(*i)
	}
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DepartmentUpdateOne) SetUpdatedAt(t time.Time) *DepartmentUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableUpdatedAt(t *time.Time) *DepartmentUpdateOne {
	if t != nil {
		duo.SetUpdatedAt(*t)
	}
	return duo
}

// SetZaloGid sets the "zalo_gid" field.
func (duo *DepartmentUpdateOne) SetZaloGid(s string) *DepartmentUpdateOne {
	duo.mutation.SetZaloGid(s)
	return duo
}

// SetNillableZaloGid sets the "zalo_gid" field if the given value is not nil.
func (duo *DepartmentUpdateOne) SetNillableZaloGid(s *string) *DepartmentUpdateOne {
	if s != nil {
		duo.SetZaloGid(*s)
	}
	return duo
}

// ClearZaloGid clears the value of the "zalo_gid" field.
func (duo *DepartmentUpdateOne) ClearZaloGid() *DepartmentUpdateOne {
	duo.mutation.ClearZaloGid()
	return duo
}

// AddPositionIDs adds the "positions" edge to the Position entity by IDs.
func (duo *DepartmentUpdateOne) AddPositionIDs(ids ...int) *DepartmentUpdateOne {
	duo.mutation.AddPositionIDs(ids...)
	return duo
}

// AddPositions adds the "positions" edges to the Position entity.
func (duo *DepartmentUpdateOne) AddPositions(p ...*Position) *DepartmentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.AddPositionIDs(ids...)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (duo *DepartmentUpdateOne) SetOrganizationID(id int) *DepartmentUpdateOne {
	duo.mutation.SetOrganizationID(id)
	return duo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (duo *DepartmentUpdateOne) SetOrganization(o *Organization) *DepartmentUpdateOne {
	return duo.SetOrganizationID(o.ID)
}

// Mutation returns the DepartmentMutation object of the builder.
func (duo *DepartmentUpdateOne) Mutation() *DepartmentMutation {
	return duo.mutation
}

// ClearPositions clears all "positions" edges to the Position entity.
func (duo *DepartmentUpdateOne) ClearPositions() *DepartmentUpdateOne {
	duo.mutation.ClearPositions()
	return duo
}

// RemovePositionIDs removes the "positions" edge to Position entities by IDs.
func (duo *DepartmentUpdateOne) RemovePositionIDs(ids ...int) *DepartmentUpdateOne {
	duo.mutation.RemovePositionIDs(ids...)
	return duo
}

// RemovePositions removes "positions" edges to Position entities.
func (duo *DepartmentUpdateOne) RemovePositions(p ...*Position) *DepartmentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.RemovePositionIDs(ids...)
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (duo *DepartmentUpdateOne) ClearOrganization() *DepartmentUpdateOne {
	duo.mutation.ClearOrganization()
	return duo
}

// Where appends a list predicates to the DepartmentUpdate builder.
func (duo *DepartmentUpdateOne) Where(ps ...predicate.Department) *DepartmentUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DepartmentUpdateOne) Select(field string, fields ...string) *DepartmentUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Department entity.
func (duo *DepartmentUpdateOne) Save(ctx context.Context) (*Department, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DepartmentUpdateOne) SaveX(ctx context.Context) *Department {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DepartmentUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DepartmentUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DepartmentUpdateOne) check() error {
	if v, ok := duo.mutation.Name(); ok {
		if err := department.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Department.name": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Code(); ok {
		if err := department.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Department.code": %w`, err)}
		}
	}
	if duo.mutation.OrganizationCleared() && len(duo.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Department.organization"`)
	}
	return nil
}

func (duo *DepartmentUpdateOne) sqlSave(ctx context.Context) (_node *Department, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(department.Table, department.Columns, sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Department.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, department.FieldID)
		for _, f := range fields {
			if !department.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != department.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(department.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.Code(); ok {
		_spec.SetField(department.FieldCode, field.TypeString, value)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(department.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.ZaloGid(); ok {
		_spec.SetField(department.FieldZaloGid, field.TypeString, value)
	}
	if duo.mutation.ZaloGidCleared() {
		_spec.ClearField(department.FieldZaloGid, field.TypeString)
	}
	if duo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.PositionsTable,
			Columns: []string{department.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !duo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.PositionsTable,
			Columns: []string{department.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   department.PositionsTable,
			Columns: []string{department.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.OrganizationTable,
			Columns: []string{department.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   department.OrganizationTable,
			Columns: []string{department.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Department{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{department.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
