// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
	"github.com/longgggwwww/hrm-ms-hr/ent/zaloemployee"
)

// ZaloEmployeeCreate is the builder for creating a ZaloEmployee entity.
type ZaloEmployeeCreate struct {
	config
	mutation *ZaloEmployeeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetZaloUID sets the "zalo_uid" field.
func (zec *ZaloEmployeeCreate) SetZaloUID(s string) *ZaloEmployeeCreate {
	zec.mutation.SetZaloUID(s)
	return zec
}

// SetEmployeeID sets the "employee_id" field.
func (zec *ZaloEmployeeCreate) SetEmployeeID(i int) *ZaloEmployeeCreate {
	zec.mutation.SetEmployeeID(i)
	return zec
}

// SetCreatedAt sets the "created_at" field.
func (zec *ZaloEmployeeCreate) SetCreatedAt(t time.Time) *ZaloEmployeeCreate {
	zec.mutation.SetCreatedAt(t)
	return zec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (zec *ZaloEmployeeCreate) SetNillableCreatedAt(t *time.Time) *ZaloEmployeeCreate {
	if t != nil {
		zec.SetCreatedAt(*t)
	}
	return zec
}

// SetUpdatedAt sets the "updated_at" field.
func (zec *ZaloEmployeeCreate) SetUpdatedAt(t time.Time) *ZaloEmployeeCreate {
	zec.mutation.SetUpdatedAt(t)
	return zec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (zec *ZaloEmployeeCreate) SetNillableUpdatedAt(t *time.Time) *ZaloEmployeeCreate {
	if t != nil {
		zec.SetUpdatedAt(*t)
	}
	return zec
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (zec *ZaloEmployeeCreate) SetEmployee(e *Employee) *ZaloEmployeeCreate {
	return zec.SetEmployeeID(e.ID)
}

// Mutation returns the ZaloEmployeeMutation object of the builder.
func (zec *ZaloEmployeeCreate) Mutation() *ZaloEmployeeMutation {
	return zec.mutation
}

// Save creates the ZaloEmployee in the database.
func (zec *ZaloEmployeeCreate) Save(ctx context.Context) (*ZaloEmployee, error) {
	zec.defaults()
	return withHooks(ctx, zec.sqlSave, zec.mutation, zec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (zec *ZaloEmployeeCreate) SaveX(ctx context.Context) *ZaloEmployee {
	v, err := zec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (zec *ZaloEmployeeCreate) Exec(ctx context.Context) error {
	_, err := zec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (zec *ZaloEmployeeCreate) ExecX(ctx context.Context) {
	if err := zec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (zec *ZaloEmployeeCreate) defaults() {
	if _, ok := zec.mutation.CreatedAt(); !ok {
		v := zaloemployee.DefaultCreatedAt()
		zec.mutation.SetCreatedAt(v)
	}
	if _, ok := zec.mutation.UpdatedAt(); !ok {
		v := zaloemployee.DefaultUpdatedAt()
		zec.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (zec *ZaloEmployeeCreate) check() error {
	if _, ok := zec.mutation.ZaloUID(); !ok {
		return &ValidationError{Name: "zalo_uid", err: errors.New(`ent: missing required field "ZaloEmployee.zalo_uid"`)}
	}
	if v, ok := zec.mutation.ZaloUID(); ok {
		if err := zaloemployee.ZaloUIDValidator(v); err != nil {
			return &ValidationError{Name: "zalo_uid", err: fmt.Errorf(`ent: validator failed for field "ZaloEmployee.zalo_uid": %w`, err)}
		}
	}
	if _, ok := zec.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "employee_id", err: errors.New(`ent: missing required field "ZaloEmployee.employee_id"`)}
	}
	if _, ok := zec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ZaloEmployee.created_at"`)}
	}
	if _, ok := zec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ZaloEmployee.updated_at"`)}
	}
	if len(zec.mutation.EmployeeIDs()) == 0 {
		return &ValidationError{Name: "employee", err: errors.New(`ent: missing required edge "ZaloEmployee.employee"`)}
	}
	return nil
}

func (zec *ZaloEmployeeCreate) sqlSave(ctx context.Context) (*ZaloEmployee, error) {
	if err := zec.check(); err != nil {
		return nil, err
	}
	_node, _spec := zec.createSpec()
	if err := sqlgraph.CreateNode(ctx, zec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	zec.mutation.id = &_node.ID
	zec.mutation.done = true
	return _node, nil
}

func (zec *ZaloEmployeeCreate) createSpec() (*ZaloEmployee, *sqlgraph.CreateSpec) {
	var (
		_node = &ZaloEmployee{config: zec.config}
		_spec = sqlgraph.NewCreateSpec(zaloemployee.Table, sqlgraph.NewFieldSpec(zaloemployee.FieldID, field.TypeInt))
	)
	_spec.OnConflict = zec.conflict
	if value, ok := zec.mutation.ZaloUID(); ok {
		_spec.SetField(zaloemployee.FieldZaloUID, field.TypeString, value)
		_node.ZaloUID = value
	}
	if value, ok := zec.mutation.CreatedAt(); ok {
		_spec.SetField(zaloemployee.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := zec.mutation.UpdatedAt(); ok {
		_spec.SetField(zaloemployee.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := zec.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   zaloemployee.EmployeeTable,
			Columns: []string{zaloemployee.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ZaloEmployee.Create().
//		SetZaloUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ZaloEmployeeUpsert) {
//			SetZaloUID(v+v).
//		}).
//		Exec(ctx)
func (zec *ZaloEmployeeCreate) OnConflict(opts ...sql.ConflictOption) *ZaloEmployeeUpsertOne {
	zec.conflict = opts
	return &ZaloEmployeeUpsertOne{
		create: zec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ZaloEmployee.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (zec *ZaloEmployeeCreate) OnConflictColumns(columns ...string) *ZaloEmployeeUpsertOne {
	zec.conflict = append(zec.conflict, sql.ConflictColumns(columns...))
	return &ZaloEmployeeUpsertOne{
		create: zec,
	}
}

type (
	// ZaloEmployeeUpsertOne is the builder for "upsert"-ing
	//  one ZaloEmployee node.
	ZaloEmployeeUpsertOne struct {
		create *ZaloEmployeeCreate
	}

	// ZaloEmployeeUpsert is the "OnConflict" setter.
	ZaloEmployeeUpsert struct {
		*sql.UpdateSet
	}
)

// SetZaloUID sets the "zalo_uid" field.
func (u *ZaloEmployeeUpsert) SetZaloUID(v string) *ZaloEmployeeUpsert {
	u.Set(zaloemployee.FieldZaloUID, v)
	return u
}

// UpdateZaloUID sets the "zalo_uid" field to the value that was provided on create.
func (u *ZaloEmployeeUpsert) UpdateZaloUID() *ZaloEmployeeUpsert {
	u.SetExcluded(zaloemployee.FieldZaloUID)
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *ZaloEmployeeUpsert) SetEmployeeID(v int) *ZaloEmployeeUpsert {
	u.Set(zaloemployee.FieldEmployeeID, v)
	return u
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *ZaloEmployeeUpsert) UpdateEmployeeID() *ZaloEmployeeUpsert {
	u.SetExcluded(zaloemployee.FieldEmployeeID)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ZaloEmployeeUpsert) SetUpdatedAt(v time.Time) *ZaloEmployeeUpsert {
	u.Set(zaloemployee.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ZaloEmployeeUpsert) UpdateUpdatedAt() *ZaloEmployeeUpsert {
	u.SetExcluded(zaloemployee.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ZaloEmployee.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ZaloEmployeeUpsertOne) UpdateNewValues() *ZaloEmployeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(zaloemployee.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ZaloEmployee.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ZaloEmployeeUpsertOne) Ignore() *ZaloEmployeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ZaloEmployeeUpsertOne) DoNothing() *ZaloEmployeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ZaloEmployeeCreate.OnConflict
// documentation for more info.
func (u *ZaloEmployeeUpsertOne) Update(set func(*ZaloEmployeeUpsert)) *ZaloEmployeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ZaloEmployeeUpsert{UpdateSet: update})
	}))
	return u
}

// SetZaloUID sets the "zalo_uid" field.
func (u *ZaloEmployeeUpsertOne) SetZaloUID(v string) *ZaloEmployeeUpsertOne {
	return u.Update(func(s *ZaloEmployeeUpsert) {
		s.SetZaloUID(v)
	})
}

// UpdateZaloUID sets the "zalo_uid" field to the value that was provided on create.
func (u *ZaloEmployeeUpsertOne) UpdateZaloUID() *ZaloEmployeeUpsertOne {
	return u.Update(func(s *ZaloEmployeeUpsert) {
		s.UpdateZaloUID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *ZaloEmployeeUpsertOne) SetEmployeeID(v int) *ZaloEmployeeUpsertOne {
	return u.Update(func(s *ZaloEmployeeUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *ZaloEmployeeUpsertOne) UpdateEmployeeID() *ZaloEmployeeUpsertOne {
	return u.Update(func(s *ZaloEmployeeUpsert) {
		s.UpdateEmployeeID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ZaloEmployeeUpsertOne) SetUpdatedAt(v time.Time) *ZaloEmployeeUpsertOne {
	return u.Update(func(s *ZaloEmployeeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ZaloEmployeeUpsertOne) UpdateUpdatedAt() *ZaloEmployeeUpsertOne {
	return u.Update(func(s *ZaloEmployeeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ZaloEmployeeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ZaloEmployeeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ZaloEmployeeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ZaloEmployeeUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ZaloEmployeeUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ZaloEmployeeCreateBulk is the builder for creating many ZaloEmployee entities in bulk.
type ZaloEmployeeCreateBulk struct {
	config
	err      error
	builders []*ZaloEmployeeCreate
	conflict []sql.ConflictOption
}

// Save creates the ZaloEmployee entities in the database.
func (zecb *ZaloEmployeeCreateBulk) Save(ctx context.Context) ([]*ZaloEmployee, error) {
	if zecb.err != nil {
		return nil, zecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(zecb.builders))
	nodes := make([]*ZaloEmployee, len(zecb.builders))
	mutators := make([]Mutator, len(zecb.builders))
	for i := range zecb.builders {
		func(i int, root context.Context) {
			builder := zecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ZaloEmployeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, zecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = zecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, zecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, zecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (zecb *ZaloEmployeeCreateBulk) SaveX(ctx context.Context) []*ZaloEmployee {
	v, err := zecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (zecb *ZaloEmployeeCreateBulk) Exec(ctx context.Context) error {
	_, err := zecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (zecb *ZaloEmployeeCreateBulk) ExecX(ctx context.Context) {
	if err := zecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ZaloEmployee.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ZaloEmployeeUpsert) {
//			SetZaloUID(v+v).
//		}).
//		Exec(ctx)
func (zecb *ZaloEmployeeCreateBulk) OnConflict(opts ...sql.ConflictOption) *ZaloEmployeeUpsertBulk {
	zecb.conflict = opts
	return &ZaloEmployeeUpsertBulk{
		create: zecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ZaloEmployee.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (zecb *ZaloEmployeeCreateBulk) OnConflictColumns(columns ...string) *ZaloEmployeeUpsertBulk {
	zecb.conflict = append(zecb.conflict, sql.ConflictColumns(columns...))
	return &ZaloEmployeeUpsertBulk{
		create: zecb,
	}
}

// ZaloEmployeeUpsertBulk is the builder for "upsert"-ing
// a bulk of ZaloEmployee nodes.
type ZaloEmployeeUpsertBulk struct {
	create *ZaloEmployeeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ZaloEmployee.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ZaloEmployeeUpsertBulk) UpdateNewValues() *ZaloEmployeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(zaloemployee.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ZaloEmployee.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ZaloEmployeeUpsertBulk) Ignore() *ZaloEmployeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ZaloEmployeeUpsertBulk) DoNothing() *ZaloEmployeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ZaloEmployeeCreateBulk.OnConflict
// documentation for more info.
func (u *ZaloEmployeeUpsertBulk) Update(set func(*ZaloEmployeeUpsert)) *ZaloEmployeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ZaloEmployeeUpsert{UpdateSet: update})
	}))
	return u
}

// SetZaloUID sets the "zalo_uid" field.
func (u *ZaloEmployeeUpsertBulk) SetZaloUID(v string) *ZaloEmployeeUpsertBulk {
	return u.Update(func(s *ZaloEmployeeUpsert) {
		s.SetZaloUID(v)
	})
}

// UpdateZaloUID sets the "zalo_uid" field to the value that was provided on create.
func (u *ZaloEmployeeUpsertBulk) UpdateZaloUID() *ZaloEmployeeUpsertBulk {
	return u.Update(func(s *ZaloEmployeeUpsert) {
		s.UpdateZaloUID()
	})
}

// SetEmployeeID sets the "employee_id" field.
func (u *ZaloEmployeeUpsertBulk) SetEmployeeID(v int) *ZaloEmployeeUpsertBulk {
	return u.Update(func(s *ZaloEmployeeUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *ZaloEmployeeUpsertBulk) UpdateEmployeeID() *ZaloEmployeeUpsertBulk {
	return u.Update(func(s *ZaloEmployeeUpsert) {
		s.UpdateEmployeeID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ZaloEmployeeUpsertBulk) SetUpdatedAt(v time.Time) *ZaloEmployeeUpsertBulk {
	return u.Update(func(s *ZaloEmployeeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ZaloEmployeeUpsertBulk) UpdateUpdatedAt() *ZaloEmployeeUpsertBulk {
	return u.Update(func(s *ZaloEmployeeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ZaloEmployeeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ZaloEmployeeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ZaloEmployeeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ZaloEmployeeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
