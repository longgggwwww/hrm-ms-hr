// Code generated by ent, DO NOT EDIT.

package appointmenthistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldLTE(FieldID, id))
}

// EmployeeID applies equality check predicate on the "employee_id" field. It's identical to EmployeeIDEQ.
func EmployeeID(v int) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEQ(FieldEmployeeID, v))
}

// PositionName applies equality check predicate on the "position_name" field. It's identical to PositionNameEQ.
func PositionName(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEQ(FieldPositionName, v))
}

// JoiningAt applies equality check predicate on the "joining_at" field. It's identical to JoiningAtEQ.
func JoiningAt(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEQ(FieldJoiningAt, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// EmployeeIDEQ applies the EQ predicate on the "employee_id" field.
func EmployeeIDEQ(v int) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "employee_id" field.
func EmployeeIDNEQ(v int) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "employee_id" field.
func EmployeeIDIn(vs ...int) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "employee_id" field.
func EmployeeIDNotIn(vs ...int) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// PositionNameEQ applies the EQ predicate on the "position_name" field.
func PositionNameEQ(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEQ(FieldPositionName, v))
}

// PositionNameNEQ applies the NEQ predicate on the "position_name" field.
func PositionNameNEQ(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNEQ(FieldPositionName, v))
}

// PositionNameIn applies the In predicate on the "position_name" field.
func PositionNameIn(vs ...string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldIn(FieldPositionName, vs...))
}

// PositionNameNotIn applies the NotIn predicate on the "position_name" field.
func PositionNameNotIn(vs ...string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNotIn(FieldPositionName, vs...))
}

// PositionNameGT applies the GT predicate on the "position_name" field.
func PositionNameGT(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldGT(FieldPositionName, v))
}

// PositionNameGTE applies the GTE predicate on the "position_name" field.
func PositionNameGTE(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldGTE(FieldPositionName, v))
}

// PositionNameLT applies the LT predicate on the "position_name" field.
func PositionNameLT(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldLT(FieldPositionName, v))
}

// PositionNameLTE applies the LTE predicate on the "position_name" field.
func PositionNameLTE(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldLTE(FieldPositionName, v))
}

// PositionNameContains applies the Contains predicate on the "position_name" field.
func PositionNameContains(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldContains(FieldPositionName, v))
}

// PositionNameHasPrefix applies the HasPrefix predicate on the "position_name" field.
func PositionNameHasPrefix(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldHasPrefix(FieldPositionName, v))
}

// PositionNameHasSuffix applies the HasSuffix predicate on the "position_name" field.
func PositionNameHasSuffix(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldHasSuffix(FieldPositionName, v))
}

// PositionNameEqualFold applies the EqualFold predicate on the "position_name" field.
func PositionNameEqualFold(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEqualFold(FieldPositionName, v))
}

// PositionNameContainsFold applies the ContainsFold predicate on the "position_name" field.
func PositionNameContainsFold(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldContainsFold(FieldPositionName, v))
}

// JoiningAtEQ applies the EQ predicate on the "joining_at" field.
func JoiningAtEQ(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEQ(FieldJoiningAt, v))
}

// JoiningAtNEQ applies the NEQ predicate on the "joining_at" field.
func JoiningAtNEQ(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNEQ(FieldJoiningAt, v))
}

// JoiningAtIn applies the In predicate on the "joining_at" field.
func JoiningAtIn(vs ...time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldIn(FieldJoiningAt, vs...))
}

// JoiningAtNotIn applies the NotIn predicate on the "joining_at" field.
func JoiningAtNotIn(vs ...time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNotIn(FieldJoiningAt, vs...))
}

// JoiningAtGT applies the GT predicate on the "joining_at" field.
func JoiningAtGT(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldGT(FieldJoiningAt, v))
}

// JoiningAtGTE applies the GTE predicate on the "joining_at" field.
func JoiningAtGTE(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldGTE(FieldJoiningAt, v))
}

// JoiningAtLT applies the LT predicate on the "joining_at" field.
func JoiningAtLT(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldLT(FieldJoiningAt, v))
}

// JoiningAtLTE applies the LTE predicate on the "joining_at" field.
func JoiningAtLTE(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldLTE(FieldJoiningAt, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldContainsFold(FieldDescription, v))
}

// AttachmentUrlsIsNil applies the IsNil predicate on the "attachment_urls" field.
func AttachmentUrlsIsNil() predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldIsNull(FieldAttachmentUrls))
}

// AttachmentUrlsNotNil applies the NotNil predicate on the "attachment_urls" field.
func AttachmentUrlsNotNil() predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNotNull(FieldAttachmentUrls))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.AppointmentHistory {
	return predicate.AppointmentHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(func(s *sql.Selector) {
		step := newEmployeeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppointmentHistory) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppointmentHistory) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppointmentHistory) predicate.AppointmentHistory {
	return predicate.AppointmentHistory(sql.NotPredicates(p))
}
