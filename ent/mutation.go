// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/longgggwwww/hrm-ms-hr/ent/department"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
	"github.com/longgggwwww/hrm-ms-hr/ent/label"
	"github.com/longgggwwww/hrm-ms-hr/ent/leaveapproval"
	"github.com/longgggwwww/hrm-ms-hr/ent/leaverequest"
	"github.com/longgggwwww/hrm-ms-hr/ent/organization"
	"github.com/longgggwwww/hrm-ms-hr/ent/position"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
	"github.com/longgggwwww/hrm-ms-hr/ent/project"
	"github.com/longgggwwww/hrm-ms-hr/ent/task"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDepartment    = "Department"
	TypeEmployee      = "Employee"
	TypeLabel         = "Label"
	TypeLeaveApproval = "LeaveApproval"
	TypeLeaveRequest  = "LeaveRequest"
	TypeOrganization  = "Organization"
	TypePosition      = "Position"
	TypeProject       = "Project"
	TypeTask          = "Task"
)

// DepartmentMutation represents an operation that mutates the Department nodes in the graph.
type DepartmentMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	code                *string
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	positions           map[int]struct{}
	removedpositions    map[int]struct{}
	clearedpositions    bool
	organization        *int
	clearedorganization bool
	done                bool
	oldValue            func(context.Context) (*Department, error)
	predicates          []predicate.Department
}

var _ ent.Mutation = (*DepartmentMutation)(nil)

// departmentOption allows management of the mutation configuration using functional options.
type departmentOption func(*DepartmentMutation)

// newDepartmentMutation creates new mutation for the Department entity.
func newDepartmentMutation(c config, op Op, opts ...departmentOption) *DepartmentMutation {
	m := &DepartmentMutation{
		config:        c,
		op:            op,
		typ:           TypeDepartment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDepartmentID sets the ID field of the mutation.
func withDepartmentID(id int) departmentOption {
	return func(m *DepartmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Department
		)
		m.oldValue = func(ctx context.Context) (*Department, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Department.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDepartment sets the old Department of the mutation.
func withDepartment(node *Department) departmentOption {
	return func(m *DepartmentMutation) {
		m.oldValue = func(context.Context) (*Department, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DepartmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DepartmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DepartmentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DepartmentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Department.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DepartmentMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DepartmentMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DepartmentMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *DepartmentMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *DepartmentMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *DepartmentMutation) ResetCode() {
	m.code = nil
}

// SetOrgID sets the "org_id" field.
func (m *DepartmentMutation) SetOrgID(i int) {
	m.organization = &i
}

// OrgID returns the value of the "org_id" field in the mutation.
func (m *DepartmentMutation) OrgID() (r int, exists bool) {
	v := m.organization
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgID returns the old "org_id" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldOrgID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgID: %w", err)
	}
	return oldValue.OrgID, nil
}

// ResetOrgID resets all changes to the "org_id" field.
func (m *DepartmentMutation) ResetOrgID() {
	m.organization = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DepartmentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DepartmentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DepartmentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DepartmentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DepartmentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Department entity.
// If the Department object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepartmentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DepartmentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddPositionIDs adds the "positions" edge to the Position entity by ids.
func (m *DepartmentMutation) AddPositionIDs(ids ...int) {
	if m.positions == nil {
		m.positions = make(map[int]struct{})
	}
	for i := range ids {
		m.positions[ids[i]] = struct{}{}
	}
}

// ClearPositions clears the "positions" edge to the Position entity.
func (m *DepartmentMutation) ClearPositions() {
	m.clearedpositions = true
}

// PositionsCleared reports if the "positions" edge to the Position entity was cleared.
func (m *DepartmentMutation) PositionsCleared() bool {
	return m.clearedpositions
}

// RemovePositionIDs removes the "positions" edge to the Position entity by IDs.
func (m *DepartmentMutation) RemovePositionIDs(ids ...int) {
	if m.removedpositions == nil {
		m.removedpositions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.positions, ids[i])
		m.removedpositions[ids[i]] = struct{}{}
	}
}

// RemovedPositions returns the removed IDs of the "positions" edge to the Position entity.
func (m *DepartmentMutation) RemovedPositionsIDs() (ids []int) {
	for id := range m.removedpositions {
		ids = append(ids, id)
	}
	return
}

// PositionsIDs returns the "positions" edge IDs in the mutation.
func (m *DepartmentMutation) PositionsIDs() (ids []int) {
	for id := range m.positions {
		ids = append(ids, id)
	}
	return
}

// ResetPositions resets all changes to the "positions" edge.
func (m *DepartmentMutation) ResetPositions() {
	m.positions = nil
	m.clearedpositions = false
	m.removedpositions = nil
}

// SetOrganizationID sets the "organization" edge to the Organization entity by id.
func (m *DepartmentMutation) SetOrganizationID(id int) {
	m.organization = &id
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (m *DepartmentMutation) ClearOrganization() {
	m.clearedorganization = true
	m.clearedFields[department.FieldOrgID] = struct{}{}
}

// OrganizationCleared reports if the "organization" edge to the Organization entity was cleared.
func (m *DepartmentMutation) OrganizationCleared() bool {
	return m.clearedorganization
}

// OrganizationID returns the "organization" edge ID in the mutation.
func (m *DepartmentMutation) OrganizationID() (id int, exists bool) {
	if m.organization != nil {
		return *m.organization, true
	}
	return
}

// OrganizationIDs returns the "organization" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganizationID instead. It exists only for internal usage by the builders.
func (m *DepartmentMutation) OrganizationIDs() (ids []int) {
	if id := m.organization; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrganization resets all changes to the "organization" edge.
func (m *DepartmentMutation) ResetOrganization() {
	m.organization = nil
	m.clearedorganization = false
}

// Where appends a list predicates to the DepartmentMutation builder.
func (m *DepartmentMutation) Where(ps ...predicate.Department) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DepartmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DepartmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Department, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DepartmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DepartmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Department).
func (m *DepartmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DepartmentMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, department.FieldName)
	}
	if m.code != nil {
		fields = append(fields, department.FieldCode)
	}
	if m.organization != nil {
		fields = append(fields, department.FieldOrgID)
	}
	if m.created_at != nil {
		fields = append(fields, department.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, department.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DepartmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case department.FieldName:
		return m.Name()
	case department.FieldCode:
		return m.Code()
	case department.FieldOrgID:
		return m.OrgID()
	case department.FieldCreatedAt:
		return m.CreatedAt()
	case department.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DepartmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case department.FieldName:
		return m.OldName(ctx)
	case department.FieldCode:
		return m.OldCode(ctx)
	case department.FieldOrgID:
		return m.OldOrgID(ctx)
	case department.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case department.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Department field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DepartmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case department.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case department.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case department.FieldOrgID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgID(v)
		return nil
	case department.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case department.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DepartmentMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DepartmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DepartmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Department numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DepartmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DepartmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DepartmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Department nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DepartmentMutation) ResetField(name string) error {
	switch name {
	case department.FieldName:
		m.ResetName()
		return nil
	case department.FieldCode:
		m.ResetCode()
		return nil
	case department.FieldOrgID:
		m.ResetOrgID()
		return nil
	case department.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case department.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Department field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DepartmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.positions != nil {
		edges = append(edges, department.EdgePositions)
	}
	if m.organization != nil {
		edges = append(edges, department.EdgeOrganization)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DepartmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case department.EdgePositions:
		ids := make([]ent.Value, 0, len(m.positions))
		for id := range m.positions {
			ids = append(ids, id)
		}
		return ids
	case department.EdgeOrganization:
		if id := m.organization; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DepartmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedpositions != nil {
		edges = append(edges, department.EdgePositions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DepartmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case department.EdgePositions:
		ids := make([]ent.Value, 0, len(m.removedpositions))
		for id := range m.removedpositions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DepartmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpositions {
		edges = append(edges, department.EdgePositions)
	}
	if m.clearedorganization {
		edges = append(edges, department.EdgeOrganization)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DepartmentMutation) EdgeCleared(name string) bool {
	switch name {
	case department.EdgePositions:
		return m.clearedpositions
	case department.EdgeOrganization:
		return m.clearedorganization
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DepartmentMutation) ClearEdge(name string) error {
	switch name {
	case department.EdgeOrganization:
		m.ClearOrganization()
		return nil
	}
	return fmt.Errorf("unknown Department unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DepartmentMutation) ResetEdge(name string) error {
	switch name {
	case department.EdgePositions:
		m.ResetPositions()
		return nil
	case department.EdgeOrganization:
		m.ResetOrganization()
		return nil
	}
	return fmt.Errorf("unknown Department edge %s", name)
}

// EmployeeMutation represents an operation that mutates the Employee nodes in the graph.
type EmployeeMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	user_id                 *string
	code                    *string
	status                  *employee.Status
	joining_at              *time.Time
	org_id                  *int
	addorg_id               *int
	created_at              *time.Time
	updated_at              *time.Time
	clearedFields           map[string]struct{}
	position                *int
	clearedposition         bool
	created_projects        map[int]struct{}
	removedcreated_projects map[int]struct{}
	clearedcreated_projects bool
	updated_projects        map[int]struct{}
	removedupdated_projects map[int]struct{}
	clearedupdated_projects bool
	assigned_tasks          map[int]struct{}
	removedassigned_tasks   map[int]struct{}
	clearedassigned_tasks   bool
	leave_approves          map[int]struct{}
	removedleave_approves   map[int]struct{}
	clearedleave_approves   bool
	leave_requests          map[int]struct{}
	removedleave_requests   map[int]struct{}
	clearedleave_requests   bool
	done                    bool
	oldValue                func(context.Context) (*Employee, error)
	predicates              []predicate.Employee
}

var _ ent.Mutation = (*EmployeeMutation)(nil)

// employeeOption allows management of the mutation configuration using functional options.
type employeeOption func(*EmployeeMutation)

// newEmployeeMutation creates new mutation for the Employee entity.
func newEmployeeMutation(c config, op Op, opts ...employeeOption) *EmployeeMutation {
	m := &EmployeeMutation{
		config:        c,
		op:            op,
		typ:           TypeEmployee,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmployeeID sets the ID field of the mutation.
func withEmployeeID(id int) employeeOption {
	return func(m *EmployeeMutation) {
		var (
			err   error
			once  sync.Once
			value *Employee
		)
		m.oldValue = func(ctx context.Context) (*Employee, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Employee.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmployee sets the old Employee of the mutation.
func withEmployee(node *Employee) employeeOption {
	return func(m *EmployeeMutation) {
		m.oldValue = func(context.Context) (*Employee, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmployeeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmployeeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmployeeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmployeeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Employee.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *EmployeeMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *EmployeeMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ClearUserID clears the value of the "user_id" field.
func (m *EmployeeMutation) ClearUserID() {
	m.user_id = nil
	m.clearedFields[employee.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "user_id" field was cleared in this mutation.
func (m *EmployeeMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[employee.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "user_id" field.
func (m *EmployeeMutation) ResetUserID() {
	m.user_id = nil
	delete(m.clearedFields, employee.FieldUserID)
}

// SetCode sets the "code" field.
func (m *EmployeeMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *EmployeeMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *EmployeeMutation) ResetCode() {
	m.code = nil
}

// SetStatus sets the "status" field.
func (m *EmployeeMutation) SetStatus(e employee.Status) {
	m.status = &e
}

// Status returns the value of the "status" field in the mutation.
func (m *EmployeeMutation) Status() (r employee.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldStatus(ctx context.Context) (v employee.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *EmployeeMutation) ResetStatus() {
	m.status = nil
}

// SetPositionID sets the "position_id" field.
func (m *EmployeeMutation) SetPositionID(i int) {
	m.position = &i
}

// PositionID returns the value of the "position_id" field in the mutation.
func (m *EmployeeMutation) PositionID() (r int, exists bool) {
	v := m.position
	if v == nil {
		return
	}
	return *v, true
}

// OldPositionID returns the old "position_id" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldPositionID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPositionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPositionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPositionID: %w", err)
	}
	return oldValue.PositionID, nil
}

// ResetPositionID resets all changes to the "position_id" field.
func (m *EmployeeMutation) ResetPositionID() {
	m.position = nil
}

// SetJoiningAt sets the "joining_at" field.
func (m *EmployeeMutation) SetJoiningAt(t time.Time) {
	m.joining_at = &t
}

// JoiningAt returns the value of the "joining_at" field in the mutation.
func (m *EmployeeMutation) JoiningAt() (r time.Time, exists bool) {
	v := m.joining_at
	if v == nil {
		return
	}
	return *v, true
}

// OldJoiningAt returns the old "joining_at" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldJoiningAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJoiningAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJoiningAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJoiningAt: %w", err)
	}
	return oldValue.JoiningAt, nil
}

// ResetJoiningAt resets all changes to the "joining_at" field.
func (m *EmployeeMutation) ResetJoiningAt() {
	m.joining_at = nil
}

// SetOrgID sets the "org_id" field.
func (m *EmployeeMutation) SetOrgID(i int) {
	m.org_id = &i
	m.addorg_id = nil
}

// OrgID returns the value of the "org_id" field in the mutation.
func (m *EmployeeMutation) OrgID() (r int, exists bool) {
	v := m.org_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgID returns the old "org_id" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldOrgID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgID: %w", err)
	}
	return oldValue.OrgID, nil
}

// AddOrgID adds i to the "org_id" field.
func (m *EmployeeMutation) AddOrgID(i int) {
	if m.addorg_id != nil {
		*m.addorg_id += i
	} else {
		m.addorg_id = &i
	}
}

// AddedOrgID returns the value that was added to the "org_id" field in this mutation.
func (m *EmployeeMutation) AddedOrgID() (r int, exists bool) {
	v := m.addorg_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrgID resets all changes to the "org_id" field.
func (m *EmployeeMutation) ResetOrgID() {
	m.org_id = nil
	m.addorg_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *EmployeeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EmployeeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EmployeeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EmployeeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EmployeeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EmployeeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearPosition clears the "position" edge to the Position entity.
func (m *EmployeeMutation) ClearPosition() {
	m.clearedposition = true
	m.clearedFields[employee.FieldPositionID] = struct{}{}
}

// PositionCleared reports if the "position" edge to the Position entity was cleared.
func (m *EmployeeMutation) PositionCleared() bool {
	return m.clearedposition
}

// PositionIDs returns the "position" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PositionID instead. It exists only for internal usage by the builders.
func (m *EmployeeMutation) PositionIDs() (ids []int) {
	if id := m.position; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPosition resets all changes to the "position" edge.
func (m *EmployeeMutation) ResetPosition() {
	m.position = nil
	m.clearedposition = false
}

// AddCreatedProjectIDs adds the "created_projects" edge to the Project entity by ids.
func (m *EmployeeMutation) AddCreatedProjectIDs(ids ...int) {
	if m.created_projects == nil {
		m.created_projects = make(map[int]struct{})
	}
	for i := range ids {
		m.created_projects[ids[i]] = struct{}{}
	}
}

// ClearCreatedProjects clears the "created_projects" edge to the Project entity.
func (m *EmployeeMutation) ClearCreatedProjects() {
	m.clearedcreated_projects = true
}

// CreatedProjectsCleared reports if the "created_projects" edge to the Project entity was cleared.
func (m *EmployeeMutation) CreatedProjectsCleared() bool {
	return m.clearedcreated_projects
}

// RemoveCreatedProjectIDs removes the "created_projects" edge to the Project entity by IDs.
func (m *EmployeeMutation) RemoveCreatedProjectIDs(ids ...int) {
	if m.removedcreated_projects == nil {
		m.removedcreated_projects = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.created_projects, ids[i])
		m.removedcreated_projects[ids[i]] = struct{}{}
	}
}

// RemovedCreatedProjects returns the removed IDs of the "created_projects" edge to the Project entity.
func (m *EmployeeMutation) RemovedCreatedProjectsIDs() (ids []int) {
	for id := range m.removedcreated_projects {
		ids = append(ids, id)
	}
	return
}

// CreatedProjectsIDs returns the "created_projects" edge IDs in the mutation.
func (m *EmployeeMutation) CreatedProjectsIDs() (ids []int) {
	for id := range m.created_projects {
		ids = append(ids, id)
	}
	return
}

// ResetCreatedProjects resets all changes to the "created_projects" edge.
func (m *EmployeeMutation) ResetCreatedProjects() {
	m.created_projects = nil
	m.clearedcreated_projects = false
	m.removedcreated_projects = nil
}

// AddUpdatedProjectIDs adds the "updated_projects" edge to the Project entity by ids.
func (m *EmployeeMutation) AddUpdatedProjectIDs(ids ...int) {
	if m.updated_projects == nil {
		m.updated_projects = make(map[int]struct{})
	}
	for i := range ids {
		m.updated_projects[ids[i]] = struct{}{}
	}
}

// ClearUpdatedProjects clears the "updated_projects" edge to the Project entity.
func (m *EmployeeMutation) ClearUpdatedProjects() {
	m.clearedupdated_projects = true
}

// UpdatedProjectsCleared reports if the "updated_projects" edge to the Project entity was cleared.
func (m *EmployeeMutation) UpdatedProjectsCleared() bool {
	return m.clearedupdated_projects
}

// RemoveUpdatedProjectIDs removes the "updated_projects" edge to the Project entity by IDs.
func (m *EmployeeMutation) RemoveUpdatedProjectIDs(ids ...int) {
	if m.removedupdated_projects == nil {
		m.removedupdated_projects = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.updated_projects, ids[i])
		m.removedupdated_projects[ids[i]] = struct{}{}
	}
}

// RemovedUpdatedProjects returns the removed IDs of the "updated_projects" edge to the Project entity.
func (m *EmployeeMutation) RemovedUpdatedProjectsIDs() (ids []int) {
	for id := range m.removedupdated_projects {
		ids = append(ids, id)
	}
	return
}

// UpdatedProjectsIDs returns the "updated_projects" edge IDs in the mutation.
func (m *EmployeeMutation) UpdatedProjectsIDs() (ids []int) {
	for id := range m.updated_projects {
		ids = append(ids, id)
	}
	return
}

// ResetUpdatedProjects resets all changes to the "updated_projects" edge.
func (m *EmployeeMutation) ResetUpdatedProjects() {
	m.updated_projects = nil
	m.clearedupdated_projects = false
	m.removedupdated_projects = nil
}

// AddAssignedTaskIDs adds the "assigned_tasks" edge to the Task entity by ids.
func (m *EmployeeMutation) AddAssignedTaskIDs(ids ...int) {
	if m.assigned_tasks == nil {
		m.assigned_tasks = make(map[int]struct{})
	}
	for i := range ids {
		m.assigned_tasks[ids[i]] = struct{}{}
	}
}

// ClearAssignedTasks clears the "assigned_tasks" edge to the Task entity.
func (m *EmployeeMutation) ClearAssignedTasks() {
	m.clearedassigned_tasks = true
}

// AssignedTasksCleared reports if the "assigned_tasks" edge to the Task entity was cleared.
func (m *EmployeeMutation) AssignedTasksCleared() bool {
	return m.clearedassigned_tasks
}

// RemoveAssignedTaskIDs removes the "assigned_tasks" edge to the Task entity by IDs.
func (m *EmployeeMutation) RemoveAssignedTaskIDs(ids ...int) {
	if m.removedassigned_tasks == nil {
		m.removedassigned_tasks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.assigned_tasks, ids[i])
		m.removedassigned_tasks[ids[i]] = struct{}{}
	}
}

// RemovedAssignedTasks returns the removed IDs of the "assigned_tasks" edge to the Task entity.
func (m *EmployeeMutation) RemovedAssignedTasksIDs() (ids []int) {
	for id := range m.removedassigned_tasks {
		ids = append(ids, id)
	}
	return
}

// AssignedTasksIDs returns the "assigned_tasks" edge IDs in the mutation.
func (m *EmployeeMutation) AssignedTasksIDs() (ids []int) {
	for id := range m.assigned_tasks {
		ids = append(ids, id)
	}
	return
}

// ResetAssignedTasks resets all changes to the "assigned_tasks" edge.
func (m *EmployeeMutation) ResetAssignedTasks() {
	m.assigned_tasks = nil
	m.clearedassigned_tasks = false
	m.removedassigned_tasks = nil
}

// AddLeaveApprofeIDs adds the "leave_approves" edge to the LeaveApproval entity by ids.
func (m *EmployeeMutation) AddLeaveApprofeIDs(ids ...int) {
	if m.leave_approves == nil {
		m.leave_approves = make(map[int]struct{})
	}
	for i := range ids {
		m.leave_approves[ids[i]] = struct{}{}
	}
}

// ClearLeaveApproves clears the "leave_approves" edge to the LeaveApproval entity.
func (m *EmployeeMutation) ClearLeaveApproves() {
	m.clearedleave_approves = true
}

// LeaveApprovesCleared reports if the "leave_approves" edge to the LeaveApproval entity was cleared.
func (m *EmployeeMutation) LeaveApprovesCleared() bool {
	return m.clearedleave_approves
}

// RemoveLeaveApprofeIDs removes the "leave_approves" edge to the LeaveApproval entity by IDs.
func (m *EmployeeMutation) RemoveLeaveApprofeIDs(ids ...int) {
	if m.removedleave_approves == nil {
		m.removedleave_approves = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.leave_approves, ids[i])
		m.removedleave_approves[ids[i]] = struct{}{}
	}
}

// RemovedLeaveApproves returns the removed IDs of the "leave_approves" edge to the LeaveApproval entity.
func (m *EmployeeMutation) RemovedLeaveApprovesIDs() (ids []int) {
	for id := range m.removedleave_approves {
		ids = append(ids, id)
	}
	return
}

// LeaveApprovesIDs returns the "leave_approves" edge IDs in the mutation.
func (m *EmployeeMutation) LeaveApprovesIDs() (ids []int) {
	for id := range m.leave_approves {
		ids = append(ids, id)
	}
	return
}

// ResetLeaveApproves resets all changes to the "leave_approves" edge.
func (m *EmployeeMutation) ResetLeaveApproves() {
	m.leave_approves = nil
	m.clearedleave_approves = false
	m.removedleave_approves = nil
}

// AddLeaveRequestIDs adds the "leave_requests" edge to the LeaveRequest entity by ids.
func (m *EmployeeMutation) AddLeaveRequestIDs(ids ...int) {
	if m.leave_requests == nil {
		m.leave_requests = make(map[int]struct{})
	}
	for i := range ids {
		m.leave_requests[ids[i]] = struct{}{}
	}
}

// ClearLeaveRequests clears the "leave_requests" edge to the LeaveRequest entity.
func (m *EmployeeMutation) ClearLeaveRequests() {
	m.clearedleave_requests = true
}

// LeaveRequestsCleared reports if the "leave_requests" edge to the LeaveRequest entity was cleared.
func (m *EmployeeMutation) LeaveRequestsCleared() bool {
	return m.clearedleave_requests
}

// RemoveLeaveRequestIDs removes the "leave_requests" edge to the LeaveRequest entity by IDs.
func (m *EmployeeMutation) RemoveLeaveRequestIDs(ids ...int) {
	if m.removedleave_requests == nil {
		m.removedleave_requests = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.leave_requests, ids[i])
		m.removedleave_requests[ids[i]] = struct{}{}
	}
}

// RemovedLeaveRequests returns the removed IDs of the "leave_requests" edge to the LeaveRequest entity.
func (m *EmployeeMutation) RemovedLeaveRequestsIDs() (ids []int) {
	for id := range m.removedleave_requests {
		ids = append(ids, id)
	}
	return
}

// LeaveRequestsIDs returns the "leave_requests" edge IDs in the mutation.
func (m *EmployeeMutation) LeaveRequestsIDs() (ids []int) {
	for id := range m.leave_requests {
		ids = append(ids, id)
	}
	return
}

// ResetLeaveRequests resets all changes to the "leave_requests" edge.
func (m *EmployeeMutation) ResetLeaveRequests() {
	m.leave_requests = nil
	m.clearedleave_requests = false
	m.removedleave_requests = nil
}

// Where appends a list predicates to the EmployeeMutation builder.
func (m *EmployeeMutation) Where(ps ...predicate.Employee) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmployeeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmployeeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Employee, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmployeeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmployeeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Employee).
func (m *EmployeeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmployeeMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.user_id != nil {
		fields = append(fields, employee.FieldUserID)
	}
	if m.code != nil {
		fields = append(fields, employee.FieldCode)
	}
	if m.status != nil {
		fields = append(fields, employee.FieldStatus)
	}
	if m.position != nil {
		fields = append(fields, employee.FieldPositionID)
	}
	if m.joining_at != nil {
		fields = append(fields, employee.FieldJoiningAt)
	}
	if m.org_id != nil {
		fields = append(fields, employee.FieldOrgID)
	}
	if m.created_at != nil {
		fields = append(fields, employee.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, employee.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmployeeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case employee.FieldUserID:
		return m.UserID()
	case employee.FieldCode:
		return m.Code()
	case employee.FieldStatus:
		return m.Status()
	case employee.FieldPositionID:
		return m.PositionID()
	case employee.FieldJoiningAt:
		return m.JoiningAt()
	case employee.FieldOrgID:
		return m.OrgID()
	case employee.FieldCreatedAt:
		return m.CreatedAt()
	case employee.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmployeeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case employee.FieldUserID:
		return m.OldUserID(ctx)
	case employee.FieldCode:
		return m.OldCode(ctx)
	case employee.FieldStatus:
		return m.OldStatus(ctx)
	case employee.FieldPositionID:
		return m.OldPositionID(ctx)
	case employee.FieldJoiningAt:
		return m.OldJoiningAt(ctx)
	case employee.FieldOrgID:
		return m.OldOrgID(ctx)
	case employee.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case employee.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Employee field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmployeeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case employee.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case employee.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case employee.FieldStatus:
		v, ok := value.(employee.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case employee.FieldPositionID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPositionID(v)
		return nil
	case employee.FieldJoiningAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJoiningAt(v)
		return nil
	case employee.FieldOrgID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgID(v)
		return nil
	case employee.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case employee.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmployeeMutation) AddedFields() []string {
	var fields []string
	if m.addorg_id != nil {
		fields = append(fields, employee.FieldOrgID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmployeeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case employee.FieldOrgID:
		return m.AddedOrgID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmployeeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case employee.FieldOrgID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrgID(v)
		return nil
	}
	return fmt.Errorf("unknown Employee numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmployeeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(employee.FieldUserID) {
		fields = append(fields, employee.FieldUserID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmployeeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmployeeMutation) ClearField(name string) error {
	switch name {
	case employee.FieldUserID:
		m.ClearUserID()
		return nil
	}
	return fmt.Errorf("unknown Employee nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmployeeMutation) ResetField(name string) error {
	switch name {
	case employee.FieldUserID:
		m.ResetUserID()
		return nil
	case employee.FieldCode:
		m.ResetCode()
		return nil
	case employee.FieldStatus:
		m.ResetStatus()
		return nil
	case employee.FieldPositionID:
		m.ResetPositionID()
		return nil
	case employee.FieldJoiningAt:
		m.ResetJoiningAt()
		return nil
	case employee.FieldOrgID:
		m.ResetOrgID()
		return nil
	case employee.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case employee.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmployeeMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.position != nil {
		edges = append(edges, employee.EdgePosition)
	}
	if m.created_projects != nil {
		edges = append(edges, employee.EdgeCreatedProjects)
	}
	if m.updated_projects != nil {
		edges = append(edges, employee.EdgeUpdatedProjects)
	}
	if m.assigned_tasks != nil {
		edges = append(edges, employee.EdgeAssignedTasks)
	}
	if m.leave_approves != nil {
		edges = append(edges, employee.EdgeLeaveApproves)
	}
	if m.leave_requests != nil {
		edges = append(edges, employee.EdgeLeaveRequests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmployeeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgePosition:
		if id := m.position; id != nil {
			return []ent.Value{*id}
		}
	case employee.EdgeCreatedProjects:
		ids := make([]ent.Value, 0, len(m.created_projects))
		for id := range m.created_projects {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeUpdatedProjects:
		ids := make([]ent.Value, 0, len(m.updated_projects))
		for id := range m.updated_projects {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeAssignedTasks:
		ids := make([]ent.Value, 0, len(m.assigned_tasks))
		for id := range m.assigned_tasks {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeLeaveApproves:
		ids := make([]ent.Value, 0, len(m.leave_approves))
		for id := range m.leave_approves {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeLeaveRequests:
		ids := make([]ent.Value, 0, len(m.leave_requests))
		for id := range m.leave_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmployeeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedcreated_projects != nil {
		edges = append(edges, employee.EdgeCreatedProjects)
	}
	if m.removedupdated_projects != nil {
		edges = append(edges, employee.EdgeUpdatedProjects)
	}
	if m.removedassigned_tasks != nil {
		edges = append(edges, employee.EdgeAssignedTasks)
	}
	if m.removedleave_approves != nil {
		edges = append(edges, employee.EdgeLeaveApproves)
	}
	if m.removedleave_requests != nil {
		edges = append(edges, employee.EdgeLeaveRequests)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmployeeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgeCreatedProjects:
		ids := make([]ent.Value, 0, len(m.removedcreated_projects))
		for id := range m.removedcreated_projects {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeUpdatedProjects:
		ids := make([]ent.Value, 0, len(m.removedupdated_projects))
		for id := range m.removedupdated_projects {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeAssignedTasks:
		ids := make([]ent.Value, 0, len(m.removedassigned_tasks))
		for id := range m.removedassigned_tasks {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeLeaveApproves:
		ids := make([]ent.Value, 0, len(m.removedleave_approves))
		for id := range m.removedleave_approves {
			ids = append(ids, id)
		}
		return ids
	case employee.EdgeLeaveRequests:
		ids := make([]ent.Value, 0, len(m.removedleave_requests))
		for id := range m.removedleave_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmployeeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedposition {
		edges = append(edges, employee.EdgePosition)
	}
	if m.clearedcreated_projects {
		edges = append(edges, employee.EdgeCreatedProjects)
	}
	if m.clearedupdated_projects {
		edges = append(edges, employee.EdgeUpdatedProjects)
	}
	if m.clearedassigned_tasks {
		edges = append(edges, employee.EdgeAssignedTasks)
	}
	if m.clearedleave_approves {
		edges = append(edges, employee.EdgeLeaveApproves)
	}
	if m.clearedleave_requests {
		edges = append(edges, employee.EdgeLeaveRequests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmployeeMutation) EdgeCleared(name string) bool {
	switch name {
	case employee.EdgePosition:
		return m.clearedposition
	case employee.EdgeCreatedProjects:
		return m.clearedcreated_projects
	case employee.EdgeUpdatedProjects:
		return m.clearedupdated_projects
	case employee.EdgeAssignedTasks:
		return m.clearedassigned_tasks
	case employee.EdgeLeaveApproves:
		return m.clearedleave_approves
	case employee.EdgeLeaveRequests:
		return m.clearedleave_requests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmployeeMutation) ClearEdge(name string) error {
	switch name {
	case employee.EdgePosition:
		m.ClearPosition()
		return nil
	}
	return fmt.Errorf("unknown Employee unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmployeeMutation) ResetEdge(name string) error {
	switch name {
	case employee.EdgePosition:
		m.ResetPosition()
		return nil
	case employee.EdgeCreatedProjects:
		m.ResetCreatedProjects()
		return nil
	case employee.EdgeUpdatedProjects:
		m.ResetUpdatedProjects()
		return nil
	case employee.EdgeAssignedTasks:
		m.ResetAssignedTasks()
		return nil
	case employee.EdgeLeaveApproves:
		m.ResetLeaveApproves()
		return nil
	case employee.EdgeLeaveRequests:
		m.ResetLeaveRequests()
		return nil
	}
	return fmt.Errorf("unknown Employee edge %s", name)
}

// LabelMutation represents an operation that mutates the Label nodes in the graph.
type LabelMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	description         *string
	color               *string
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	tasks               map[int]struct{}
	removedtasks        map[int]struct{}
	clearedtasks        bool
	organization        *int
	clearedorganization bool
	done                bool
	oldValue            func(context.Context) (*Label, error)
	predicates          []predicate.Label
}

var _ ent.Mutation = (*LabelMutation)(nil)

// labelOption allows management of the mutation configuration using functional options.
type labelOption func(*LabelMutation)

// newLabelMutation creates new mutation for the Label entity.
func newLabelMutation(c config, op Op, opts ...labelOption) *LabelMutation {
	m := &LabelMutation{
		config:        c,
		op:            op,
		typ:           TypeLabel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLabelID sets the ID field of the mutation.
func withLabelID(id int) labelOption {
	return func(m *LabelMutation) {
		var (
			err   error
			once  sync.Once
			value *Label
		)
		m.oldValue = func(ctx context.Context) (*Label, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Label.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLabel sets the old Label of the mutation.
func withLabel(node *Label) labelOption {
	return func(m *LabelMutation) {
		m.oldValue = func(context.Context) (*Label, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LabelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LabelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LabelMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LabelMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Label.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *LabelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LabelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Label entity.
// If the Label object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LabelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LabelMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *LabelMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *LabelMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Label entity.
// If the Label object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LabelMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *LabelMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[label.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *LabelMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[label.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *LabelMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, label.FieldDescription)
}

// SetColor sets the "color" field.
func (m *LabelMutation) SetColor(s string) {
	m.color = &s
}

// Color returns the value of the "color" field in the mutation.
func (m *LabelMutation) Color() (r string, exists bool) {
	v := m.color
	if v == nil {
		return
	}
	return *v, true
}

// OldColor returns the old "color" field's value of the Label entity.
// If the Label object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LabelMutation) OldColor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldColor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldColor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldColor: %w", err)
	}
	return oldValue.Color, nil
}

// ResetColor resets all changes to the "color" field.
func (m *LabelMutation) ResetColor() {
	m.color = nil
}

// SetOrgID sets the "org_id" field.
func (m *LabelMutation) SetOrgID(i int) {
	m.organization = &i
}

// OrgID returns the value of the "org_id" field in the mutation.
func (m *LabelMutation) OrgID() (r int, exists bool) {
	v := m.organization
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgID returns the old "org_id" field's value of the Label entity.
// If the Label object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LabelMutation) OldOrgID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgID: %w", err)
	}
	return oldValue.OrgID, nil
}

// ClearOrgID clears the value of the "org_id" field.
func (m *LabelMutation) ClearOrgID() {
	m.organization = nil
	m.clearedFields[label.FieldOrgID] = struct{}{}
}

// OrgIDCleared returns if the "org_id" field was cleared in this mutation.
func (m *LabelMutation) OrgIDCleared() bool {
	_, ok := m.clearedFields[label.FieldOrgID]
	return ok
}

// ResetOrgID resets all changes to the "org_id" field.
func (m *LabelMutation) ResetOrgID() {
	m.organization = nil
	delete(m.clearedFields, label.FieldOrgID)
}

// SetCreatedAt sets the "created_at" field.
func (m *LabelMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LabelMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Label entity.
// If the Label object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LabelMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LabelMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LabelMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LabelMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Label entity.
// If the Label object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LabelMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LabelMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *LabelMutation) AddTaskIDs(ids ...int) {
	if m.tasks == nil {
		m.tasks = make(map[int]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *LabelMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *LabelMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *LabelMutation) RemoveTaskIDs(ids ...int) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *LabelMutation) RemovedTasksIDs() (ids []int) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *LabelMutation) TasksIDs() (ids []int) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *LabelMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// SetOrganizationID sets the "organization" edge to the Organization entity by id.
func (m *LabelMutation) SetOrganizationID(id int) {
	m.organization = &id
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (m *LabelMutation) ClearOrganization() {
	m.clearedorganization = true
	m.clearedFields[label.FieldOrgID] = struct{}{}
}

// OrganizationCleared reports if the "organization" edge to the Organization entity was cleared.
func (m *LabelMutation) OrganizationCleared() bool {
	return m.OrgIDCleared() || m.clearedorganization
}

// OrganizationID returns the "organization" edge ID in the mutation.
func (m *LabelMutation) OrganizationID() (id int, exists bool) {
	if m.organization != nil {
		return *m.organization, true
	}
	return
}

// OrganizationIDs returns the "organization" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganizationID instead. It exists only for internal usage by the builders.
func (m *LabelMutation) OrganizationIDs() (ids []int) {
	if id := m.organization; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrganization resets all changes to the "organization" edge.
func (m *LabelMutation) ResetOrganization() {
	m.organization = nil
	m.clearedorganization = false
}

// Where appends a list predicates to the LabelMutation builder.
func (m *LabelMutation) Where(ps ...predicate.Label) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LabelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LabelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Label, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LabelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LabelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Label).
func (m *LabelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LabelMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, label.FieldName)
	}
	if m.description != nil {
		fields = append(fields, label.FieldDescription)
	}
	if m.color != nil {
		fields = append(fields, label.FieldColor)
	}
	if m.organization != nil {
		fields = append(fields, label.FieldOrgID)
	}
	if m.created_at != nil {
		fields = append(fields, label.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, label.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LabelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case label.FieldName:
		return m.Name()
	case label.FieldDescription:
		return m.Description()
	case label.FieldColor:
		return m.Color()
	case label.FieldOrgID:
		return m.OrgID()
	case label.FieldCreatedAt:
		return m.CreatedAt()
	case label.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LabelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case label.FieldName:
		return m.OldName(ctx)
	case label.FieldDescription:
		return m.OldDescription(ctx)
	case label.FieldColor:
		return m.OldColor(ctx)
	case label.FieldOrgID:
		return m.OldOrgID(ctx)
	case label.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case label.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Label field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LabelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case label.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case label.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case label.FieldColor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetColor(v)
		return nil
	case label.FieldOrgID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgID(v)
		return nil
	case label.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case label.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Label field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LabelMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LabelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LabelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Label numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LabelMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(label.FieldDescription) {
		fields = append(fields, label.FieldDescription)
	}
	if m.FieldCleared(label.FieldOrgID) {
		fields = append(fields, label.FieldOrgID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LabelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LabelMutation) ClearField(name string) error {
	switch name {
	case label.FieldDescription:
		m.ClearDescription()
		return nil
	case label.FieldOrgID:
		m.ClearOrgID()
		return nil
	}
	return fmt.Errorf("unknown Label nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LabelMutation) ResetField(name string) error {
	switch name {
	case label.FieldName:
		m.ResetName()
		return nil
	case label.FieldDescription:
		m.ResetDescription()
		return nil
	case label.FieldColor:
		m.ResetColor()
		return nil
	case label.FieldOrgID:
		m.ResetOrgID()
		return nil
	case label.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case label.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Label field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LabelMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.tasks != nil {
		edges = append(edges, label.EdgeTasks)
	}
	if m.organization != nil {
		edges = append(edges, label.EdgeOrganization)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LabelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case label.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	case label.EdgeOrganization:
		if id := m.organization; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LabelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtasks != nil {
		edges = append(edges, label.EdgeTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LabelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case label.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LabelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtasks {
		edges = append(edges, label.EdgeTasks)
	}
	if m.clearedorganization {
		edges = append(edges, label.EdgeOrganization)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LabelMutation) EdgeCleared(name string) bool {
	switch name {
	case label.EdgeTasks:
		return m.clearedtasks
	case label.EdgeOrganization:
		return m.clearedorganization
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LabelMutation) ClearEdge(name string) error {
	switch name {
	case label.EdgeOrganization:
		m.ClearOrganization()
		return nil
	}
	return fmt.Errorf("unknown Label unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LabelMutation) ResetEdge(name string) error {
	switch name {
	case label.EdgeTasks:
		m.ResetTasks()
		return nil
	case label.EdgeOrganization:
		m.ResetOrganization()
		return nil
	}
	return fmt.Errorf("unknown Label edge %s", name)
}

// LeaveApprovalMutation represents an operation that mutates the LeaveApproval nodes in the graph.
type LeaveApprovalMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	comment              *string
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	leave_request        *int
	clearedleave_request bool
	reviewer             *int
	clearedreviewer      bool
	done                 bool
	oldValue             func(context.Context) (*LeaveApproval, error)
	predicates           []predicate.LeaveApproval
}

var _ ent.Mutation = (*LeaveApprovalMutation)(nil)

// leaveapprovalOption allows management of the mutation configuration using functional options.
type leaveapprovalOption func(*LeaveApprovalMutation)

// newLeaveApprovalMutation creates new mutation for the LeaveApproval entity.
func newLeaveApprovalMutation(c config, op Op, opts ...leaveapprovalOption) *LeaveApprovalMutation {
	m := &LeaveApprovalMutation{
		config:        c,
		op:            op,
		typ:           TypeLeaveApproval,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLeaveApprovalID sets the ID field of the mutation.
func withLeaveApprovalID(id int) leaveapprovalOption {
	return func(m *LeaveApprovalMutation) {
		var (
			err   error
			once  sync.Once
			value *LeaveApproval
		)
		m.oldValue = func(ctx context.Context) (*LeaveApproval, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LeaveApproval.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLeaveApproval sets the old LeaveApproval of the mutation.
func withLeaveApproval(node *LeaveApproval) leaveapprovalOption {
	return func(m *LeaveApprovalMutation) {
		m.oldValue = func(context.Context) (*LeaveApproval, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LeaveApprovalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LeaveApprovalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LeaveApprovalMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LeaveApprovalMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LeaveApproval.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetComment sets the "comment" field.
func (m *LeaveApprovalMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *LeaveApprovalMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the LeaveApproval entity.
// If the LeaveApproval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaveApprovalMutation) OldComment(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *LeaveApprovalMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[leaveapproval.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *LeaveApprovalMutation) CommentCleared() bool {
	_, ok := m.clearedFields[leaveapproval.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *LeaveApprovalMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, leaveapproval.FieldComment)
}

// SetLeaveRequestID sets the "leave_request_id" field.
func (m *LeaveApprovalMutation) SetLeaveRequestID(i int) {
	m.leave_request = &i
}

// LeaveRequestID returns the value of the "leave_request_id" field in the mutation.
func (m *LeaveApprovalMutation) LeaveRequestID() (r int, exists bool) {
	v := m.leave_request
	if v == nil {
		return
	}
	return *v, true
}

// OldLeaveRequestID returns the old "leave_request_id" field's value of the LeaveApproval entity.
// If the LeaveApproval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaveApprovalMutation) OldLeaveRequestID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLeaveRequestID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLeaveRequestID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLeaveRequestID: %w", err)
	}
	return oldValue.LeaveRequestID, nil
}

// ResetLeaveRequestID resets all changes to the "leave_request_id" field.
func (m *LeaveApprovalMutation) ResetLeaveRequestID() {
	m.leave_request = nil
}

// SetReviewerID sets the "reviewer_id" field.
func (m *LeaveApprovalMutation) SetReviewerID(i int) {
	m.reviewer = &i
}

// ReviewerID returns the value of the "reviewer_id" field in the mutation.
func (m *LeaveApprovalMutation) ReviewerID() (r int, exists bool) {
	v := m.reviewer
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewerID returns the old "reviewer_id" field's value of the LeaveApproval entity.
// If the LeaveApproval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaveApprovalMutation) OldReviewerID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReviewerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReviewerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewerID: %w", err)
	}
	return oldValue.ReviewerID, nil
}

// ResetReviewerID resets all changes to the "reviewer_id" field.
func (m *LeaveApprovalMutation) ResetReviewerID() {
	m.reviewer = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *LeaveApprovalMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LeaveApprovalMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the LeaveApproval entity.
// If the LeaveApproval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaveApprovalMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LeaveApprovalMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LeaveApprovalMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LeaveApprovalMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the LeaveApproval entity.
// If the LeaveApproval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaveApprovalMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LeaveApprovalMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearLeaveRequest clears the "leave_request" edge to the LeaveRequest entity.
func (m *LeaveApprovalMutation) ClearLeaveRequest() {
	m.clearedleave_request = true
	m.clearedFields[leaveapproval.FieldLeaveRequestID] = struct{}{}
}

// LeaveRequestCleared reports if the "leave_request" edge to the LeaveRequest entity was cleared.
func (m *LeaveApprovalMutation) LeaveRequestCleared() bool {
	return m.clearedleave_request
}

// LeaveRequestIDs returns the "leave_request" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LeaveRequestID instead. It exists only for internal usage by the builders.
func (m *LeaveApprovalMutation) LeaveRequestIDs() (ids []int) {
	if id := m.leave_request; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLeaveRequest resets all changes to the "leave_request" edge.
func (m *LeaveApprovalMutation) ResetLeaveRequest() {
	m.leave_request = nil
	m.clearedleave_request = false
}

// ClearReviewer clears the "reviewer" edge to the Employee entity.
func (m *LeaveApprovalMutation) ClearReviewer() {
	m.clearedreviewer = true
	m.clearedFields[leaveapproval.FieldReviewerID] = struct{}{}
}

// ReviewerCleared reports if the "reviewer" edge to the Employee entity was cleared.
func (m *LeaveApprovalMutation) ReviewerCleared() bool {
	return m.clearedreviewer
}

// ReviewerIDs returns the "reviewer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReviewerID instead. It exists only for internal usage by the builders.
func (m *LeaveApprovalMutation) ReviewerIDs() (ids []int) {
	if id := m.reviewer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReviewer resets all changes to the "reviewer" edge.
func (m *LeaveApprovalMutation) ResetReviewer() {
	m.reviewer = nil
	m.clearedreviewer = false
}

// Where appends a list predicates to the LeaveApprovalMutation builder.
func (m *LeaveApprovalMutation) Where(ps ...predicate.LeaveApproval) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LeaveApprovalMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LeaveApprovalMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LeaveApproval, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LeaveApprovalMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LeaveApprovalMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LeaveApproval).
func (m *LeaveApprovalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LeaveApprovalMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.comment != nil {
		fields = append(fields, leaveapproval.FieldComment)
	}
	if m.leave_request != nil {
		fields = append(fields, leaveapproval.FieldLeaveRequestID)
	}
	if m.reviewer != nil {
		fields = append(fields, leaveapproval.FieldReviewerID)
	}
	if m.created_at != nil {
		fields = append(fields, leaveapproval.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, leaveapproval.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LeaveApprovalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case leaveapproval.FieldComment:
		return m.Comment()
	case leaveapproval.FieldLeaveRequestID:
		return m.LeaveRequestID()
	case leaveapproval.FieldReviewerID:
		return m.ReviewerID()
	case leaveapproval.FieldCreatedAt:
		return m.CreatedAt()
	case leaveapproval.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LeaveApprovalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case leaveapproval.FieldComment:
		return m.OldComment(ctx)
	case leaveapproval.FieldLeaveRequestID:
		return m.OldLeaveRequestID(ctx)
	case leaveapproval.FieldReviewerID:
		return m.OldReviewerID(ctx)
	case leaveapproval.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case leaveapproval.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown LeaveApproval field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LeaveApprovalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case leaveapproval.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case leaveapproval.FieldLeaveRequestID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLeaveRequestID(v)
		return nil
	case leaveapproval.FieldReviewerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewerID(v)
		return nil
	case leaveapproval.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case leaveapproval.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown LeaveApproval field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LeaveApprovalMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LeaveApprovalMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LeaveApprovalMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown LeaveApproval numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LeaveApprovalMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(leaveapproval.FieldComment) {
		fields = append(fields, leaveapproval.FieldComment)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LeaveApprovalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LeaveApprovalMutation) ClearField(name string) error {
	switch name {
	case leaveapproval.FieldComment:
		m.ClearComment()
		return nil
	}
	return fmt.Errorf("unknown LeaveApproval nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LeaveApprovalMutation) ResetField(name string) error {
	switch name {
	case leaveapproval.FieldComment:
		m.ResetComment()
		return nil
	case leaveapproval.FieldLeaveRequestID:
		m.ResetLeaveRequestID()
		return nil
	case leaveapproval.FieldReviewerID:
		m.ResetReviewerID()
		return nil
	case leaveapproval.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case leaveapproval.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown LeaveApproval field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LeaveApprovalMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.leave_request != nil {
		edges = append(edges, leaveapproval.EdgeLeaveRequest)
	}
	if m.reviewer != nil {
		edges = append(edges, leaveapproval.EdgeReviewer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LeaveApprovalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case leaveapproval.EdgeLeaveRequest:
		if id := m.leave_request; id != nil {
			return []ent.Value{*id}
		}
	case leaveapproval.EdgeReviewer:
		if id := m.reviewer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LeaveApprovalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LeaveApprovalMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LeaveApprovalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedleave_request {
		edges = append(edges, leaveapproval.EdgeLeaveRequest)
	}
	if m.clearedreviewer {
		edges = append(edges, leaveapproval.EdgeReviewer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LeaveApprovalMutation) EdgeCleared(name string) bool {
	switch name {
	case leaveapproval.EdgeLeaveRequest:
		return m.clearedleave_request
	case leaveapproval.EdgeReviewer:
		return m.clearedreviewer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LeaveApprovalMutation) ClearEdge(name string) error {
	switch name {
	case leaveapproval.EdgeLeaveRequest:
		m.ClearLeaveRequest()
		return nil
	case leaveapproval.EdgeReviewer:
		m.ClearReviewer()
		return nil
	}
	return fmt.Errorf("unknown LeaveApproval unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LeaveApprovalMutation) ResetEdge(name string) error {
	switch name {
	case leaveapproval.EdgeLeaveRequest:
		m.ResetLeaveRequest()
		return nil
	case leaveapproval.EdgeReviewer:
		m.ResetReviewer()
		return nil
	}
	return fmt.Errorf("unknown LeaveApproval edge %s", name)
}

// LeaveRequestMutation represents an operation that mutates the LeaveRequest nodes in the graph.
type LeaveRequestMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	total_days            *float64
	addtotal_days         *float64
	start_at              *time.Time
	end_at                *time.Time
	reason                *string
	_type                 *leaverequest.Type
	status                *leaverequest.Status
	created_at            *time.Time
	updated_at            *time.Time
	clearedFields         map[string]struct{}
	leave_approves        map[int]struct{}
	removedleave_approves map[int]struct{}
	clearedleave_approves bool
	applicant             *int
	clearedapplicant      bool
	organization          *int
	clearedorganization   bool
	done                  bool
	oldValue              func(context.Context) (*LeaveRequest, error)
	predicates            []predicate.LeaveRequest
}

var _ ent.Mutation = (*LeaveRequestMutation)(nil)

// leaverequestOption allows management of the mutation configuration using functional options.
type leaverequestOption func(*LeaveRequestMutation)

// newLeaveRequestMutation creates new mutation for the LeaveRequest entity.
func newLeaveRequestMutation(c config, op Op, opts ...leaverequestOption) *LeaveRequestMutation {
	m := &LeaveRequestMutation{
		config:        c,
		op:            op,
		typ:           TypeLeaveRequest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLeaveRequestID sets the ID field of the mutation.
func withLeaveRequestID(id int) leaverequestOption {
	return func(m *LeaveRequestMutation) {
		var (
			err   error
			once  sync.Once
			value *LeaveRequest
		)
		m.oldValue = func(ctx context.Context) (*LeaveRequest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LeaveRequest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLeaveRequest sets the old LeaveRequest of the mutation.
func withLeaveRequest(node *LeaveRequest) leaverequestOption {
	return func(m *LeaveRequestMutation) {
		m.oldValue = func(context.Context) (*LeaveRequest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LeaveRequestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LeaveRequestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LeaveRequestMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LeaveRequestMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LeaveRequest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTotalDays sets the "total_days" field.
func (m *LeaveRequestMutation) SetTotalDays(f float64) {
	m.total_days = &f
	m.addtotal_days = nil
}

// TotalDays returns the value of the "total_days" field in the mutation.
func (m *LeaveRequestMutation) TotalDays() (r float64, exists bool) {
	v := m.total_days
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalDays returns the old "total_days" field's value of the LeaveRequest entity.
// If the LeaveRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaveRequestMutation) OldTotalDays(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalDays is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalDays requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalDays: %w", err)
	}
	return oldValue.TotalDays, nil
}

// AddTotalDays adds f to the "total_days" field.
func (m *LeaveRequestMutation) AddTotalDays(f float64) {
	if m.addtotal_days != nil {
		*m.addtotal_days += f
	} else {
		m.addtotal_days = &f
	}
}

// AddedTotalDays returns the value that was added to the "total_days" field in this mutation.
func (m *LeaveRequestMutation) AddedTotalDays() (r float64, exists bool) {
	v := m.addtotal_days
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalDays resets all changes to the "total_days" field.
func (m *LeaveRequestMutation) ResetTotalDays() {
	m.total_days = nil
	m.addtotal_days = nil
}

// SetStartAt sets the "start_at" field.
func (m *LeaveRequestMutation) SetStartAt(t time.Time) {
	m.start_at = &t
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *LeaveRequestMutation) StartAt() (r time.Time, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the LeaveRequest entity.
// If the LeaveRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaveRequestMutation) OldStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *LeaveRequestMutation) ResetStartAt() {
	m.start_at = nil
}

// SetEndAt sets the "end_at" field.
func (m *LeaveRequestMutation) SetEndAt(t time.Time) {
	m.end_at = &t
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *LeaveRequestMutation) EndAt() (r time.Time, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the LeaveRequest entity.
// If the LeaveRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaveRequestMutation) OldEndAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *LeaveRequestMutation) ResetEndAt() {
	m.end_at = nil
}

// SetReason sets the "reason" field.
func (m *LeaveRequestMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the value of the "reason" field in the mutation.
func (m *LeaveRequestMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// OldReason returns the old "reason" field's value of the LeaveRequest entity.
// If the LeaveRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaveRequestMutation) OldReason(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReason: %w", err)
	}
	return oldValue.Reason, nil
}

// ClearReason clears the value of the "reason" field.
func (m *LeaveRequestMutation) ClearReason() {
	m.reason = nil
	m.clearedFields[leaverequest.FieldReason] = struct{}{}
}

// ReasonCleared returns if the "reason" field was cleared in this mutation.
func (m *LeaveRequestMutation) ReasonCleared() bool {
	_, ok := m.clearedFields[leaverequest.FieldReason]
	return ok
}

// ResetReason resets all changes to the "reason" field.
func (m *LeaveRequestMutation) ResetReason() {
	m.reason = nil
	delete(m.clearedFields, leaverequest.FieldReason)
}

// SetType sets the "type" field.
func (m *LeaveRequestMutation) SetType(l leaverequest.Type) {
	m._type = &l
}

// GetType returns the value of the "type" field in the mutation.
func (m *LeaveRequestMutation) GetType() (r leaverequest.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the LeaveRequest entity.
// If the LeaveRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaveRequestMutation) OldType(ctx context.Context) (v leaverequest.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *LeaveRequestMutation) ResetType() {
	m._type = nil
}

// SetStatus sets the "status" field.
func (m *LeaveRequestMutation) SetStatus(l leaverequest.Status) {
	m.status = &l
}

// Status returns the value of the "status" field in the mutation.
func (m *LeaveRequestMutation) Status() (r leaverequest.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the LeaveRequest entity.
// If the LeaveRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaveRequestMutation) OldStatus(ctx context.Context) (v leaverequest.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *LeaveRequestMutation) ResetStatus() {
	m.status = nil
}

// SetOrgID sets the "org_id" field.
func (m *LeaveRequestMutation) SetOrgID(i int) {
	m.organization = &i
}

// OrgID returns the value of the "org_id" field in the mutation.
func (m *LeaveRequestMutation) OrgID() (r int, exists bool) {
	v := m.organization
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgID returns the old "org_id" field's value of the LeaveRequest entity.
// If the LeaveRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaveRequestMutation) OldOrgID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgID: %w", err)
	}
	return oldValue.OrgID, nil
}

// ResetOrgID resets all changes to the "org_id" field.
func (m *LeaveRequestMutation) ResetOrgID() {
	m.organization = nil
}

// SetEmployeeID sets the "employee_id" field.
func (m *LeaveRequestMutation) SetEmployeeID(i int) {
	m.applicant = &i
}

// EmployeeID returns the value of the "employee_id" field in the mutation.
func (m *LeaveRequestMutation) EmployeeID() (r int, exists bool) {
	v := m.applicant
	if v == nil {
		return
	}
	return *v, true
}

// OldEmployeeID returns the old "employee_id" field's value of the LeaveRequest entity.
// If the LeaveRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaveRequestMutation) OldEmployeeID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmployeeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmployeeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmployeeID: %w", err)
	}
	return oldValue.EmployeeID, nil
}

// ResetEmployeeID resets all changes to the "employee_id" field.
func (m *LeaveRequestMutation) ResetEmployeeID() {
	m.applicant = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *LeaveRequestMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LeaveRequestMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the LeaveRequest entity.
// If the LeaveRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaveRequestMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LeaveRequestMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *LeaveRequestMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *LeaveRequestMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the LeaveRequest entity.
// If the LeaveRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaveRequestMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *LeaveRequestMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddLeaveApprofeIDs adds the "leave_approves" edge to the LeaveApproval entity by ids.
func (m *LeaveRequestMutation) AddLeaveApprofeIDs(ids ...int) {
	if m.leave_approves == nil {
		m.leave_approves = make(map[int]struct{})
	}
	for i := range ids {
		m.leave_approves[ids[i]] = struct{}{}
	}
}

// ClearLeaveApproves clears the "leave_approves" edge to the LeaveApproval entity.
func (m *LeaveRequestMutation) ClearLeaveApproves() {
	m.clearedleave_approves = true
}

// LeaveApprovesCleared reports if the "leave_approves" edge to the LeaveApproval entity was cleared.
func (m *LeaveRequestMutation) LeaveApprovesCleared() bool {
	return m.clearedleave_approves
}

// RemoveLeaveApprofeIDs removes the "leave_approves" edge to the LeaveApproval entity by IDs.
func (m *LeaveRequestMutation) RemoveLeaveApprofeIDs(ids ...int) {
	if m.removedleave_approves == nil {
		m.removedleave_approves = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.leave_approves, ids[i])
		m.removedleave_approves[ids[i]] = struct{}{}
	}
}

// RemovedLeaveApproves returns the removed IDs of the "leave_approves" edge to the LeaveApproval entity.
func (m *LeaveRequestMutation) RemovedLeaveApprovesIDs() (ids []int) {
	for id := range m.removedleave_approves {
		ids = append(ids, id)
	}
	return
}

// LeaveApprovesIDs returns the "leave_approves" edge IDs in the mutation.
func (m *LeaveRequestMutation) LeaveApprovesIDs() (ids []int) {
	for id := range m.leave_approves {
		ids = append(ids, id)
	}
	return
}

// ResetLeaveApproves resets all changes to the "leave_approves" edge.
func (m *LeaveRequestMutation) ResetLeaveApproves() {
	m.leave_approves = nil
	m.clearedleave_approves = false
	m.removedleave_approves = nil
}

// SetApplicantID sets the "applicant" edge to the Employee entity by id.
func (m *LeaveRequestMutation) SetApplicantID(id int) {
	m.applicant = &id
}

// ClearApplicant clears the "applicant" edge to the Employee entity.
func (m *LeaveRequestMutation) ClearApplicant() {
	m.clearedapplicant = true
	m.clearedFields[leaverequest.FieldEmployeeID] = struct{}{}
}

// ApplicantCleared reports if the "applicant" edge to the Employee entity was cleared.
func (m *LeaveRequestMutation) ApplicantCleared() bool {
	return m.clearedapplicant
}

// ApplicantID returns the "applicant" edge ID in the mutation.
func (m *LeaveRequestMutation) ApplicantID() (id int, exists bool) {
	if m.applicant != nil {
		return *m.applicant, true
	}
	return
}

// ApplicantIDs returns the "applicant" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApplicantID instead. It exists only for internal usage by the builders.
func (m *LeaveRequestMutation) ApplicantIDs() (ids []int) {
	if id := m.applicant; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApplicant resets all changes to the "applicant" edge.
func (m *LeaveRequestMutation) ResetApplicant() {
	m.applicant = nil
	m.clearedapplicant = false
}

// SetOrganizationID sets the "organization" edge to the Organization entity by id.
func (m *LeaveRequestMutation) SetOrganizationID(id int) {
	m.organization = &id
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (m *LeaveRequestMutation) ClearOrganization() {
	m.clearedorganization = true
	m.clearedFields[leaverequest.FieldOrgID] = struct{}{}
}

// OrganizationCleared reports if the "organization" edge to the Organization entity was cleared.
func (m *LeaveRequestMutation) OrganizationCleared() bool {
	return m.clearedorganization
}

// OrganizationID returns the "organization" edge ID in the mutation.
func (m *LeaveRequestMutation) OrganizationID() (id int, exists bool) {
	if m.organization != nil {
		return *m.organization, true
	}
	return
}

// OrganizationIDs returns the "organization" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganizationID instead. It exists only for internal usage by the builders.
func (m *LeaveRequestMutation) OrganizationIDs() (ids []int) {
	if id := m.organization; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrganization resets all changes to the "organization" edge.
func (m *LeaveRequestMutation) ResetOrganization() {
	m.organization = nil
	m.clearedorganization = false
}

// Where appends a list predicates to the LeaveRequestMutation builder.
func (m *LeaveRequestMutation) Where(ps ...predicate.LeaveRequest) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LeaveRequestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LeaveRequestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LeaveRequest, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LeaveRequestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LeaveRequestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LeaveRequest).
func (m *LeaveRequestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LeaveRequestMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.total_days != nil {
		fields = append(fields, leaverequest.FieldTotalDays)
	}
	if m.start_at != nil {
		fields = append(fields, leaverequest.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, leaverequest.FieldEndAt)
	}
	if m.reason != nil {
		fields = append(fields, leaverequest.FieldReason)
	}
	if m._type != nil {
		fields = append(fields, leaverequest.FieldType)
	}
	if m.status != nil {
		fields = append(fields, leaverequest.FieldStatus)
	}
	if m.organization != nil {
		fields = append(fields, leaverequest.FieldOrgID)
	}
	if m.applicant != nil {
		fields = append(fields, leaverequest.FieldEmployeeID)
	}
	if m.created_at != nil {
		fields = append(fields, leaverequest.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, leaverequest.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LeaveRequestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case leaverequest.FieldTotalDays:
		return m.TotalDays()
	case leaverequest.FieldStartAt:
		return m.StartAt()
	case leaverequest.FieldEndAt:
		return m.EndAt()
	case leaverequest.FieldReason:
		return m.Reason()
	case leaverequest.FieldType:
		return m.GetType()
	case leaverequest.FieldStatus:
		return m.Status()
	case leaverequest.FieldOrgID:
		return m.OrgID()
	case leaverequest.FieldEmployeeID:
		return m.EmployeeID()
	case leaverequest.FieldCreatedAt:
		return m.CreatedAt()
	case leaverequest.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LeaveRequestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case leaverequest.FieldTotalDays:
		return m.OldTotalDays(ctx)
	case leaverequest.FieldStartAt:
		return m.OldStartAt(ctx)
	case leaverequest.FieldEndAt:
		return m.OldEndAt(ctx)
	case leaverequest.FieldReason:
		return m.OldReason(ctx)
	case leaverequest.FieldType:
		return m.OldType(ctx)
	case leaverequest.FieldStatus:
		return m.OldStatus(ctx)
	case leaverequest.FieldOrgID:
		return m.OldOrgID(ctx)
	case leaverequest.FieldEmployeeID:
		return m.OldEmployeeID(ctx)
	case leaverequest.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case leaverequest.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown LeaveRequest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LeaveRequestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case leaverequest.FieldTotalDays:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalDays(v)
		return nil
	case leaverequest.FieldStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case leaverequest.FieldEndAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	case leaverequest.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	case leaverequest.FieldType:
		v, ok := value.(leaverequest.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case leaverequest.FieldStatus:
		v, ok := value.(leaverequest.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case leaverequest.FieldOrgID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgID(v)
		return nil
	case leaverequest.FieldEmployeeID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmployeeID(v)
		return nil
	case leaverequest.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case leaverequest.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown LeaveRequest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LeaveRequestMutation) AddedFields() []string {
	var fields []string
	if m.addtotal_days != nil {
		fields = append(fields, leaverequest.FieldTotalDays)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LeaveRequestMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case leaverequest.FieldTotalDays:
		return m.AddedTotalDays()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LeaveRequestMutation) AddField(name string, value ent.Value) error {
	switch name {
	case leaverequest.FieldTotalDays:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalDays(v)
		return nil
	}
	return fmt.Errorf("unknown LeaveRequest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LeaveRequestMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(leaverequest.FieldReason) {
		fields = append(fields, leaverequest.FieldReason)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LeaveRequestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LeaveRequestMutation) ClearField(name string) error {
	switch name {
	case leaverequest.FieldReason:
		m.ClearReason()
		return nil
	}
	return fmt.Errorf("unknown LeaveRequest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LeaveRequestMutation) ResetField(name string) error {
	switch name {
	case leaverequest.FieldTotalDays:
		m.ResetTotalDays()
		return nil
	case leaverequest.FieldStartAt:
		m.ResetStartAt()
		return nil
	case leaverequest.FieldEndAt:
		m.ResetEndAt()
		return nil
	case leaverequest.FieldReason:
		m.ResetReason()
		return nil
	case leaverequest.FieldType:
		m.ResetType()
		return nil
	case leaverequest.FieldStatus:
		m.ResetStatus()
		return nil
	case leaverequest.FieldOrgID:
		m.ResetOrgID()
		return nil
	case leaverequest.FieldEmployeeID:
		m.ResetEmployeeID()
		return nil
	case leaverequest.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case leaverequest.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown LeaveRequest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LeaveRequestMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.leave_approves != nil {
		edges = append(edges, leaverequest.EdgeLeaveApproves)
	}
	if m.applicant != nil {
		edges = append(edges, leaverequest.EdgeApplicant)
	}
	if m.organization != nil {
		edges = append(edges, leaverequest.EdgeOrganization)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LeaveRequestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case leaverequest.EdgeLeaveApproves:
		ids := make([]ent.Value, 0, len(m.leave_approves))
		for id := range m.leave_approves {
			ids = append(ids, id)
		}
		return ids
	case leaverequest.EdgeApplicant:
		if id := m.applicant; id != nil {
			return []ent.Value{*id}
		}
	case leaverequest.EdgeOrganization:
		if id := m.organization; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LeaveRequestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedleave_approves != nil {
		edges = append(edges, leaverequest.EdgeLeaveApproves)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LeaveRequestMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case leaverequest.EdgeLeaveApproves:
		ids := make([]ent.Value, 0, len(m.removedleave_approves))
		for id := range m.removedleave_approves {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LeaveRequestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedleave_approves {
		edges = append(edges, leaverequest.EdgeLeaveApproves)
	}
	if m.clearedapplicant {
		edges = append(edges, leaverequest.EdgeApplicant)
	}
	if m.clearedorganization {
		edges = append(edges, leaverequest.EdgeOrganization)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LeaveRequestMutation) EdgeCleared(name string) bool {
	switch name {
	case leaverequest.EdgeLeaveApproves:
		return m.clearedleave_approves
	case leaverequest.EdgeApplicant:
		return m.clearedapplicant
	case leaverequest.EdgeOrganization:
		return m.clearedorganization
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LeaveRequestMutation) ClearEdge(name string) error {
	switch name {
	case leaverequest.EdgeApplicant:
		m.ClearApplicant()
		return nil
	case leaverequest.EdgeOrganization:
		m.ClearOrganization()
		return nil
	}
	return fmt.Errorf("unknown LeaveRequest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LeaveRequestMutation) ResetEdge(name string) error {
	switch name {
	case leaverequest.EdgeLeaveApproves:
		m.ResetLeaveApproves()
		return nil
	case leaverequest.EdgeApplicant:
		m.ResetApplicant()
		return nil
	case leaverequest.EdgeOrganization:
		m.ResetOrganization()
		return nil
	}
	return fmt.Errorf("unknown LeaveRequest edge %s", name)
}

// OrganizationMutation represents an operation that mutates the Organization nodes in the graph.
type OrganizationMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	code                  *string
	logo_url              *string
	address               *string
	phone                 *string
	email                 *string
	website               *string
	created_at            *time.Time
	updated_at            *time.Time
	clearedFields         map[string]struct{}
	parent                *int
	clearedparent         bool
	children              map[int]struct{}
	removedchildren       map[int]struct{}
	clearedchildren       bool
	departments           map[int]struct{}
	removeddepartments    map[int]struct{}
	cleareddepartments    bool
	projects              map[int]struct{}
	removedprojects       map[int]struct{}
	clearedprojects       bool
	labels                map[int]struct{}
	removedlabels         map[int]struct{}
	clearedlabels         bool
	leave_requests        map[int]struct{}
	removedleave_requests map[int]struct{}
	clearedleave_requests bool
	done                  bool
	oldValue              func(context.Context) (*Organization, error)
	predicates            []predicate.Organization
}

var _ ent.Mutation = (*OrganizationMutation)(nil)

// organizationOption allows management of the mutation configuration using functional options.
type organizationOption func(*OrganizationMutation)

// newOrganizationMutation creates new mutation for the Organization entity.
func newOrganizationMutation(c config, op Op, opts ...organizationOption) *OrganizationMutation {
	m := &OrganizationMutation{
		config:        c,
		op:            op,
		typ:           TypeOrganization,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrganizationID sets the ID field of the mutation.
func withOrganizationID(id int) organizationOption {
	return func(m *OrganizationMutation) {
		var (
			err   error
			once  sync.Once
			value *Organization
		)
		m.oldValue = func(ctx context.Context) (*Organization, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Organization.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrganization sets the old Organization of the mutation.
func withOrganization(node *Organization) organizationOption {
	return func(m *OrganizationMutation) {
		m.oldValue = func(context.Context) (*Organization, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrganizationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrganizationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrganizationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrganizationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Organization.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *OrganizationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OrganizationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OrganizationMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *OrganizationMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *OrganizationMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *OrganizationMutation) ResetCode() {
	m.code = nil
}

// SetLogoURL sets the "logo_url" field.
func (m *OrganizationMutation) SetLogoURL(s string) {
	m.logo_url = &s
}

// LogoURL returns the value of the "logo_url" field in the mutation.
func (m *OrganizationMutation) LogoURL() (r string, exists bool) {
	v := m.logo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoURL returns the old "logo_url" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldLogoURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoURL: %w", err)
	}
	return oldValue.LogoURL, nil
}

// ClearLogoURL clears the value of the "logo_url" field.
func (m *OrganizationMutation) ClearLogoURL() {
	m.logo_url = nil
	m.clearedFields[organization.FieldLogoURL] = struct{}{}
}

// LogoURLCleared returns if the "logo_url" field was cleared in this mutation.
func (m *OrganizationMutation) LogoURLCleared() bool {
	_, ok := m.clearedFields[organization.FieldLogoURL]
	return ok
}

// ResetLogoURL resets all changes to the "logo_url" field.
func (m *OrganizationMutation) ResetLogoURL() {
	m.logo_url = nil
	delete(m.clearedFields, organization.FieldLogoURL)
}

// SetAddress sets the "address" field.
func (m *OrganizationMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *OrganizationMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldAddress(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *OrganizationMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[organization.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *OrganizationMutation) AddressCleared() bool {
	_, ok := m.clearedFields[organization.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *OrganizationMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, organization.FieldAddress)
}

// SetPhone sets the "phone" field.
func (m *OrganizationMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *OrganizationMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldPhone(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ClearPhone clears the value of the "phone" field.
func (m *OrganizationMutation) ClearPhone() {
	m.phone = nil
	m.clearedFields[organization.FieldPhone] = struct{}{}
}

// PhoneCleared returns if the "phone" field was cleared in this mutation.
func (m *OrganizationMutation) PhoneCleared() bool {
	_, ok := m.clearedFields[organization.FieldPhone]
	return ok
}

// ResetPhone resets all changes to the "phone" field.
func (m *OrganizationMutation) ResetPhone() {
	m.phone = nil
	delete(m.clearedFields, organization.FieldPhone)
}

// SetEmail sets the "email" field.
func (m *OrganizationMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *OrganizationMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldEmail(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *OrganizationMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[organization.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *OrganizationMutation) EmailCleared() bool {
	_, ok := m.clearedFields[organization.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *OrganizationMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, organization.FieldEmail)
}

// SetWebsite sets the "website" field.
func (m *OrganizationMutation) SetWebsite(s string) {
	m.website = &s
}

// Website returns the value of the "website" field in the mutation.
func (m *OrganizationMutation) Website() (r string, exists bool) {
	v := m.website
	if v == nil {
		return
	}
	return *v, true
}

// OldWebsite returns the old "website" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldWebsite(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebsite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebsite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebsite: %w", err)
	}
	return oldValue.Website, nil
}

// ClearWebsite clears the value of the "website" field.
func (m *OrganizationMutation) ClearWebsite() {
	m.website = nil
	m.clearedFields[organization.FieldWebsite] = struct{}{}
}

// WebsiteCleared returns if the "website" field was cleared in this mutation.
func (m *OrganizationMutation) WebsiteCleared() bool {
	_, ok := m.clearedFields[organization.FieldWebsite]
	return ok
}

// ResetWebsite resets all changes to the "website" field.
func (m *OrganizationMutation) ResetWebsite() {
	m.website = nil
	delete(m.clearedFields, organization.FieldWebsite)
}

// SetCreatedAt sets the "created_at" field.
func (m *OrganizationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrganizationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrganizationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrganizationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrganizationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrganizationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetParentID sets the "parent_id" field.
func (m *OrganizationMutation) SetParentID(i int) {
	m.parent = &i
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *OrganizationMutation) ParentID() (r int, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldParentID(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *OrganizationMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[organization.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *OrganizationMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[organization.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *OrganizationMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, organization.FieldParentID)
}

// ClearParent clears the "parent" edge to the Organization entity.
func (m *OrganizationMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[organization.FieldParentID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the Organization entity was cleared.
func (m *OrganizationMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *OrganizationMutation) ParentIDs() (ids []int) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *OrganizationMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Organization entity by ids.
func (m *OrganizationMutation) AddChildIDs(ids ...int) {
	if m.children == nil {
		m.children = make(map[int]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Organization entity.
func (m *OrganizationMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Organization entity was cleared.
func (m *OrganizationMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Organization entity by IDs.
func (m *OrganizationMutation) RemoveChildIDs(ids ...int) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Organization entity.
func (m *OrganizationMutation) RemovedChildrenIDs() (ids []int) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *OrganizationMutation) ChildrenIDs() (ids []int) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *OrganizationMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// AddDepartmentIDs adds the "departments" edge to the Department entity by ids.
func (m *OrganizationMutation) AddDepartmentIDs(ids ...int) {
	if m.departments == nil {
		m.departments = make(map[int]struct{})
	}
	for i := range ids {
		m.departments[ids[i]] = struct{}{}
	}
}

// ClearDepartments clears the "departments" edge to the Department entity.
func (m *OrganizationMutation) ClearDepartments() {
	m.cleareddepartments = true
}

// DepartmentsCleared reports if the "departments" edge to the Department entity was cleared.
func (m *OrganizationMutation) DepartmentsCleared() bool {
	return m.cleareddepartments
}

// RemoveDepartmentIDs removes the "departments" edge to the Department entity by IDs.
func (m *OrganizationMutation) RemoveDepartmentIDs(ids ...int) {
	if m.removeddepartments == nil {
		m.removeddepartments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.departments, ids[i])
		m.removeddepartments[ids[i]] = struct{}{}
	}
}

// RemovedDepartments returns the removed IDs of the "departments" edge to the Department entity.
func (m *OrganizationMutation) RemovedDepartmentsIDs() (ids []int) {
	for id := range m.removeddepartments {
		ids = append(ids, id)
	}
	return
}

// DepartmentsIDs returns the "departments" edge IDs in the mutation.
func (m *OrganizationMutation) DepartmentsIDs() (ids []int) {
	for id := range m.departments {
		ids = append(ids, id)
	}
	return
}

// ResetDepartments resets all changes to the "departments" edge.
func (m *OrganizationMutation) ResetDepartments() {
	m.departments = nil
	m.cleareddepartments = false
	m.removeddepartments = nil
}

// AddProjectIDs adds the "projects" edge to the Project entity by ids.
func (m *OrganizationMutation) AddProjectIDs(ids ...int) {
	if m.projects == nil {
		m.projects = make(map[int]struct{})
	}
	for i := range ids {
		m.projects[ids[i]] = struct{}{}
	}
}

// ClearProjects clears the "projects" edge to the Project entity.
func (m *OrganizationMutation) ClearProjects() {
	m.clearedprojects = true
}

// ProjectsCleared reports if the "projects" edge to the Project entity was cleared.
func (m *OrganizationMutation) ProjectsCleared() bool {
	return m.clearedprojects
}

// RemoveProjectIDs removes the "projects" edge to the Project entity by IDs.
func (m *OrganizationMutation) RemoveProjectIDs(ids ...int) {
	if m.removedprojects == nil {
		m.removedprojects = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.projects, ids[i])
		m.removedprojects[ids[i]] = struct{}{}
	}
}

// RemovedProjects returns the removed IDs of the "projects" edge to the Project entity.
func (m *OrganizationMutation) RemovedProjectsIDs() (ids []int) {
	for id := range m.removedprojects {
		ids = append(ids, id)
	}
	return
}

// ProjectsIDs returns the "projects" edge IDs in the mutation.
func (m *OrganizationMutation) ProjectsIDs() (ids []int) {
	for id := range m.projects {
		ids = append(ids, id)
	}
	return
}

// ResetProjects resets all changes to the "projects" edge.
func (m *OrganizationMutation) ResetProjects() {
	m.projects = nil
	m.clearedprojects = false
	m.removedprojects = nil
}

// AddLabelIDs adds the "labels" edge to the Label entity by ids.
func (m *OrganizationMutation) AddLabelIDs(ids ...int) {
	if m.labels == nil {
		m.labels = make(map[int]struct{})
	}
	for i := range ids {
		m.labels[ids[i]] = struct{}{}
	}
}

// ClearLabels clears the "labels" edge to the Label entity.
func (m *OrganizationMutation) ClearLabels() {
	m.clearedlabels = true
}

// LabelsCleared reports if the "labels" edge to the Label entity was cleared.
func (m *OrganizationMutation) LabelsCleared() bool {
	return m.clearedlabels
}

// RemoveLabelIDs removes the "labels" edge to the Label entity by IDs.
func (m *OrganizationMutation) RemoveLabelIDs(ids ...int) {
	if m.removedlabels == nil {
		m.removedlabels = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.labels, ids[i])
		m.removedlabels[ids[i]] = struct{}{}
	}
}

// RemovedLabels returns the removed IDs of the "labels" edge to the Label entity.
func (m *OrganizationMutation) RemovedLabelsIDs() (ids []int) {
	for id := range m.removedlabels {
		ids = append(ids, id)
	}
	return
}

// LabelsIDs returns the "labels" edge IDs in the mutation.
func (m *OrganizationMutation) LabelsIDs() (ids []int) {
	for id := range m.labels {
		ids = append(ids, id)
	}
	return
}

// ResetLabels resets all changes to the "labels" edge.
func (m *OrganizationMutation) ResetLabels() {
	m.labels = nil
	m.clearedlabels = false
	m.removedlabels = nil
}

// AddLeaveRequestIDs adds the "leave_requests" edge to the LeaveRequest entity by ids.
func (m *OrganizationMutation) AddLeaveRequestIDs(ids ...int) {
	if m.leave_requests == nil {
		m.leave_requests = make(map[int]struct{})
	}
	for i := range ids {
		m.leave_requests[ids[i]] = struct{}{}
	}
}

// ClearLeaveRequests clears the "leave_requests" edge to the LeaveRequest entity.
func (m *OrganizationMutation) ClearLeaveRequests() {
	m.clearedleave_requests = true
}

// LeaveRequestsCleared reports if the "leave_requests" edge to the LeaveRequest entity was cleared.
func (m *OrganizationMutation) LeaveRequestsCleared() bool {
	return m.clearedleave_requests
}

// RemoveLeaveRequestIDs removes the "leave_requests" edge to the LeaveRequest entity by IDs.
func (m *OrganizationMutation) RemoveLeaveRequestIDs(ids ...int) {
	if m.removedleave_requests == nil {
		m.removedleave_requests = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.leave_requests, ids[i])
		m.removedleave_requests[ids[i]] = struct{}{}
	}
}

// RemovedLeaveRequests returns the removed IDs of the "leave_requests" edge to the LeaveRequest entity.
func (m *OrganizationMutation) RemovedLeaveRequestsIDs() (ids []int) {
	for id := range m.removedleave_requests {
		ids = append(ids, id)
	}
	return
}

// LeaveRequestsIDs returns the "leave_requests" edge IDs in the mutation.
func (m *OrganizationMutation) LeaveRequestsIDs() (ids []int) {
	for id := range m.leave_requests {
		ids = append(ids, id)
	}
	return
}

// ResetLeaveRequests resets all changes to the "leave_requests" edge.
func (m *OrganizationMutation) ResetLeaveRequests() {
	m.leave_requests = nil
	m.clearedleave_requests = false
	m.removedleave_requests = nil
}

// Where appends a list predicates to the OrganizationMutation builder.
func (m *OrganizationMutation) Where(ps ...predicate.Organization) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrganizationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrganizationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Organization, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrganizationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrganizationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Organization).
func (m *OrganizationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrganizationMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.name != nil {
		fields = append(fields, organization.FieldName)
	}
	if m.code != nil {
		fields = append(fields, organization.FieldCode)
	}
	if m.logo_url != nil {
		fields = append(fields, organization.FieldLogoURL)
	}
	if m.address != nil {
		fields = append(fields, organization.FieldAddress)
	}
	if m.phone != nil {
		fields = append(fields, organization.FieldPhone)
	}
	if m.email != nil {
		fields = append(fields, organization.FieldEmail)
	}
	if m.website != nil {
		fields = append(fields, organization.FieldWebsite)
	}
	if m.created_at != nil {
		fields = append(fields, organization.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, organization.FieldUpdatedAt)
	}
	if m.parent != nil {
		fields = append(fields, organization.FieldParentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrganizationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case organization.FieldName:
		return m.Name()
	case organization.FieldCode:
		return m.Code()
	case organization.FieldLogoURL:
		return m.LogoURL()
	case organization.FieldAddress:
		return m.Address()
	case organization.FieldPhone:
		return m.Phone()
	case organization.FieldEmail:
		return m.Email()
	case organization.FieldWebsite:
		return m.Website()
	case organization.FieldCreatedAt:
		return m.CreatedAt()
	case organization.FieldUpdatedAt:
		return m.UpdatedAt()
	case organization.FieldParentID:
		return m.ParentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrganizationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case organization.FieldName:
		return m.OldName(ctx)
	case organization.FieldCode:
		return m.OldCode(ctx)
	case organization.FieldLogoURL:
		return m.OldLogoURL(ctx)
	case organization.FieldAddress:
		return m.OldAddress(ctx)
	case organization.FieldPhone:
		return m.OldPhone(ctx)
	case organization.FieldEmail:
		return m.OldEmail(ctx)
	case organization.FieldWebsite:
		return m.OldWebsite(ctx)
	case organization.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case organization.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case organization.FieldParentID:
		return m.OldParentID(ctx)
	}
	return nil, fmt.Errorf("unknown Organization field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case organization.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case organization.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case organization.FieldLogoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoURL(v)
		return nil
	case organization.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case organization.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case organization.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case organization.FieldWebsite:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebsite(v)
		return nil
	case organization.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case organization.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case organization.FieldParentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	}
	return fmt.Errorf("unknown Organization field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrganizationMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrganizationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Organization numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrganizationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(organization.FieldLogoURL) {
		fields = append(fields, organization.FieldLogoURL)
	}
	if m.FieldCleared(organization.FieldAddress) {
		fields = append(fields, organization.FieldAddress)
	}
	if m.FieldCleared(organization.FieldPhone) {
		fields = append(fields, organization.FieldPhone)
	}
	if m.FieldCleared(organization.FieldEmail) {
		fields = append(fields, organization.FieldEmail)
	}
	if m.FieldCleared(organization.FieldWebsite) {
		fields = append(fields, organization.FieldWebsite)
	}
	if m.FieldCleared(organization.FieldParentID) {
		fields = append(fields, organization.FieldParentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrganizationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrganizationMutation) ClearField(name string) error {
	switch name {
	case organization.FieldLogoURL:
		m.ClearLogoURL()
		return nil
	case organization.FieldAddress:
		m.ClearAddress()
		return nil
	case organization.FieldPhone:
		m.ClearPhone()
		return nil
	case organization.FieldEmail:
		m.ClearEmail()
		return nil
	case organization.FieldWebsite:
		m.ClearWebsite()
		return nil
	case organization.FieldParentID:
		m.ClearParentID()
		return nil
	}
	return fmt.Errorf("unknown Organization nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrganizationMutation) ResetField(name string) error {
	switch name {
	case organization.FieldName:
		m.ResetName()
		return nil
	case organization.FieldCode:
		m.ResetCode()
		return nil
	case organization.FieldLogoURL:
		m.ResetLogoURL()
		return nil
	case organization.FieldAddress:
		m.ResetAddress()
		return nil
	case organization.FieldPhone:
		m.ResetPhone()
		return nil
	case organization.FieldEmail:
		m.ResetEmail()
		return nil
	case organization.FieldWebsite:
		m.ResetWebsite()
		return nil
	case organization.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case organization.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case organization.FieldParentID:
		m.ResetParentID()
		return nil
	}
	return fmt.Errorf("unknown Organization field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrganizationMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.parent != nil {
		edges = append(edges, organization.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, organization.EdgeChildren)
	}
	if m.departments != nil {
		edges = append(edges, organization.EdgeDepartments)
	}
	if m.projects != nil {
		edges = append(edges, organization.EdgeProjects)
	}
	if m.labels != nil {
		edges = append(edges, organization.EdgeLabels)
	}
	if m.leave_requests != nil {
		edges = append(edges, organization.EdgeLeaveRequests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrganizationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case organization.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case organization.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeDepartments:
		ids := make([]ent.Value, 0, len(m.departments))
		for id := range m.departments {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.projects))
		for id := range m.projects {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeLabels:
		ids := make([]ent.Value, 0, len(m.labels))
		for id := range m.labels {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeLeaveRequests:
		ids := make([]ent.Value, 0, len(m.leave_requests))
		for id := range m.leave_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrganizationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedchildren != nil {
		edges = append(edges, organization.EdgeChildren)
	}
	if m.removeddepartments != nil {
		edges = append(edges, organization.EdgeDepartments)
	}
	if m.removedprojects != nil {
		edges = append(edges, organization.EdgeProjects)
	}
	if m.removedlabels != nil {
		edges = append(edges, organization.EdgeLabels)
	}
	if m.removedleave_requests != nil {
		edges = append(edges, organization.EdgeLeaveRequests)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrganizationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case organization.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeDepartments:
		ids := make([]ent.Value, 0, len(m.removeddepartments))
		for id := range m.removeddepartments {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeProjects:
		ids := make([]ent.Value, 0, len(m.removedprojects))
		for id := range m.removedprojects {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeLabels:
		ids := make([]ent.Value, 0, len(m.removedlabels))
		for id := range m.removedlabels {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeLeaveRequests:
		ids := make([]ent.Value, 0, len(m.removedleave_requests))
		for id := range m.removedleave_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrganizationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedparent {
		edges = append(edges, organization.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, organization.EdgeChildren)
	}
	if m.cleareddepartments {
		edges = append(edges, organization.EdgeDepartments)
	}
	if m.clearedprojects {
		edges = append(edges, organization.EdgeProjects)
	}
	if m.clearedlabels {
		edges = append(edges, organization.EdgeLabels)
	}
	if m.clearedleave_requests {
		edges = append(edges, organization.EdgeLeaveRequests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrganizationMutation) EdgeCleared(name string) bool {
	switch name {
	case organization.EdgeParent:
		return m.clearedparent
	case organization.EdgeChildren:
		return m.clearedchildren
	case organization.EdgeDepartments:
		return m.cleareddepartments
	case organization.EdgeProjects:
		return m.clearedprojects
	case organization.EdgeLabels:
		return m.clearedlabels
	case organization.EdgeLeaveRequests:
		return m.clearedleave_requests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrganizationMutation) ClearEdge(name string) error {
	switch name {
	case organization.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Organization unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrganizationMutation) ResetEdge(name string) error {
	switch name {
	case organization.EdgeParent:
		m.ResetParent()
		return nil
	case organization.EdgeChildren:
		m.ResetChildren()
		return nil
	case organization.EdgeDepartments:
		m.ResetDepartments()
		return nil
	case organization.EdgeProjects:
		m.ResetProjects()
		return nil
	case organization.EdgeLabels:
		m.ResetLabels()
		return nil
	case organization.EdgeLeaveRequests:
		m.ResetLeaveRequests()
		return nil
	}
	return fmt.Errorf("unknown Organization edge %s", name)
}

// PositionMutation represents an operation that mutates the Position nodes in the graph.
type PositionMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	code               *string
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	employees          map[int]struct{}
	removedemployees   map[int]struct{}
	clearedemployees   bool
	departments        *int
	cleareddepartments bool
	children           map[int]struct{}
	removedchildren    map[int]struct{}
	clearedchildren    bool
	parent             *int
	clearedparent      bool
	done               bool
	oldValue           func(context.Context) (*Position, error)
	predicates         []predicate.Position
}

var _ ent.Mutation = (*PositionMutation)(nil)

// positionOption allows management of the mutation configuration using functional options.
type positionOption func(*PositionMutation)

// newPositionMutation creates new mutation for the Position entity.
func newPositionMutation(c config, op Op, opts ...positionOption) *PositionMutation {
	m := &PositionMutation{
		config:        c,
		op:            op,
		typ:           TypePosition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPositionID sets the ID field of the mutation.
func withPositionID(id int) positionOption {
	return func(m *PositionMutation) {
		var (
			err   error
			once  sync.Once
			value *Position
		)
		m.oldValue = func(ctx context.Context) (*Position, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Position.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPosition sets the old Position of the mutation.
func withPosition(node *Position) positionOption {
	return func(m *PositionMutation) {
		m.oldValue = func(context.Context) (*Position, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PositionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PositionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PositionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PositionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Position.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PositionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PositionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PositionMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *PositionMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *PositionMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *PositionMutation) ResetCode() {
	m.code = nil
}

// SetDepartmentID sets the "department_id" field.
func (m *PositionMutation) SetDepartmentID(i int) {
	m.departments = &i
}

// DepartmentID returns the value of the "department_id" field in the mutation.
func (m *PositionMutation) DepartmentID() (r int, exists bool) {
	v := m.departments
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartmentID returns the old "department_id" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldDepartmentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartmentID: %w", err)
	}
	return oldValue.DepartmentID, nil
}

// ResetDepartmentID resets all changes to the "department_id" field.
func (m *PositionMutation) ResetDepartmentID() {
	m.departments = nil
}

// SetParentID sets the "parent_id" field.
func (m *PositionMutation) SetParentID(i int) {
	m.parent = &i
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *PositionMutation) ParentID() (r int, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldParentID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ClearParentID clears the value of the "parent_id" field.
func (m *PositionMutation) ClearParentID() {
	m.parent = nil
	m.clearedFields[position.FieldParentID] = struct{}{}
}

// ParentIDCleared returns if the "parent_id" field was cleared in this mutation.
func (m *PositionMutation) ParentIDCleared() bool {
	_, ok := m.clearedFields[position.FieldParentID]
	return ok
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *PositionMutation) ResetParentID() {
	m.parent = nil
	delete(m.clearedFields, position.FieldParentID)
}

// SetCreatedAt sets the "created_at" field.
func (m *PositionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PositionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PositionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PositionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PositionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Position entity.
// If the Position object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PositionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PositionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddEmployeeIDs adds the "employees" edge to the Employee entity by ids.
func (m *PositionMutation) AddEmployeeIDs(ids ...int) {
	if m.employees == nil {
		m.employees = make(map[int]struct{})
	}
	for i := range ids {
		m.employees[ids[i]] = struct{}{}
	}
}

// ClearEmployees clears the "employees" edge to the Employee entity.
func (m *PositionMutation) ClearEmployees() {
	m.clearedemployees = true
}

// EmployeesCleared reports if the "employees" edge to the Employee entity was cleared.
func (m *PositionMutation) EmployeesCleared() bool {
	return m.clearedemployees
}

// RemoveEmployeeIDs removes the "employees" edge to the Employee entity by IDs.
func (m *PositionMutation) RemoveEmployeeIDs(ids ...int) {
	if m.removedemployees == nil {
		m.removedemployees = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.employees, ids[i])
		m.removedemployees[ids[i]] = struct{}{}
	}
}

// RemovedEmployees returns the removed IDs of the "employees" edge to the Employee entity.
func (m *PositionMutation) RemovedEmployeesIDs() (ids []int) {
	for id := range m.removedemployees {
		ids = append(ids, id)
	}
	return
}

// EmployeesIDs returns the "employees" edge IDs in the mutation.
func (m *PositionMutation) EmployeesIDs() (ids []int) {
	for id := range m.employees {
		ids = append(ids, id)
	}
	return
}

// ResetEmployees resets all changes to the "employees" edge.
func (m *PositionMutation) ResetEmployees() {
	m.employees = nil
	m.clearedemployees = false
	m.removedemployees = nil
}

// SetDepartmentsID sets the "departments" edge to the Department entity by id.
func (m *PositionMutation) SetDepartmentsID(id int) {
	m.departments = &id
}

// ClearDepartments clears the "departments" edge to the Department entity.
func (m *PositionMutation) ClearDepartments() {
	m.cleareddepartments = true
	m.clearedFields[position.FieldDepartmentID] = struct{}{}
}

// DepartmentsCleared reports if the "departments" edge to the Department entity was cleared.
func (m *PositionMutation) DepartmentsCleared() bool {
	return m.cleareddepartments
}

// DepartmentsID returns the "departments" edge ID in the mutation.
func (m *PositionMutation) DepartmentsID() (id int, exists bool) {
	if m.departments != nil {
		return *m.departments, true
	}
	return
}

// DepartmentsIDs returns the "departments" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DepartmentsID instead. It exists only for internal usage by the builders.
func (m *PositionMutation) DepartmentsIDs() (ids []int) {
	if id := m.departments; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDepartments resets all changes to the "departments" edge.
func (m *PositionMutation) ResetDepartments() {
	m.departments = nil
	m.cleareddepartments = false
}

// AddChildIDs adds the "children" edge to the Position entity by ids.
func (m *PositionMutation) AddChildIDs(ids ...int) {
	if m.children == nil {
		m.children = make(map[int]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Position entity.
func (m *PositionMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Position entity was cleared.
func (m *PositionMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Position entity by IDs.
func (m *PositionMutation) RemoveChildIDs(ids ...int) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Position entity.
func (m *PositionMutation) RemovedChildrenIDs() (ids []int) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *PositionMutation) ChildrenIDs() (ids []int) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *PositionMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// ClearParent clears the "parent" edge to the Position entity.
func (m *PositionMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[position.FieldParentID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the Position entity was cleared.
func (m *PositionMutation) ParentCleared() bool {
	return m.ParentIDCleared() || m.clearedparent
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *PositionMutation) ParentIDs() (ids []int) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *PositionMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// Where appends a list predicates to the PositionMutation builder.
func (m *PositionMutation) Where(ps ...predicate.Position) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PositionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PositionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Position, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PositionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PositionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Position).
func (m *PositionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PositionMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, position.FieldName)
	}
	if m.code != nil {
		fields = append(fields, position.FieldCode)
	}
	if m.departments != nil {
		fields = append(fields, position.FieldDepartmentID)
	}
	if m.parent != nil {
		fields = append(fields, position.FieldParentID)
	}
	if m.created_at != nil {
		fields = append(fields, position.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, position.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PositionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case position.FieldName:
		return m.Name()
	case position.FieldCode:
		return m.Code()
	case position.FieldDepartmentID:
		return m.DepartmentID()
	case position.FieldParentID:
		return m.ParentID()
	case position.FieldCreatedAt:
		return m.CreatedAt()
	case position.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PositionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case position.FieldName:
		return m.OldName(ctx)
	case position.FieldCode:
		return m.OldCode(ctx)
	case position.FieldDepartmentID:
		return m.OldDepartmentID(ctx)
	case position.FieldParentID:
		return m.OldParentID(ctx)
	case position.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case position.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Position field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PositionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case position.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case position.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case position.FieldDepartmentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartmentID(v)
		return nil
	case position.FieldParentID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	case position.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case position.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Position field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PositionMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PositionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PositionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Position numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PositionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(position.FieldParentID) {
		fields = append(fields, position.FieldParentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PositionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PositionMutation) ClearField(name string) error {
	switch name {
	case position.FieldParentID:
		m.ClearParentID()
		return nil
	}
	return fmt.Errorf("unknown Position nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PositionMutation) ResetField(name string) error {
	switch name {
	case position.FieldName:
		m.ResetName()
		return nil
	case position.FieldCode:
		m.ResetCode()
		return nil
	case position.FieldDepartmentID:
		m.ResetDepartmentID()
		return nil
	case position.FieldParentID:
		m.ResetParentID()
		return nil
	case position.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case position.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Position field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PositionMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.employees != nil {
		edges = append(edges, position.EdgeEmployees)
	}
	if m.departments != nil {
		edges = append(edges, position.EdgeDepartments)
	}
	if m.children != nil {
		edges = append(edges, position.EdgeChildren)
	}
	if m.parent != nil {
		edges = append(edges, position.EdgeParent)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PositionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case position.EdgeEmployees:
		ids := make([]ent.Value, 0, len(m.employees))
		for id := range m.employees {
			ids = append(ids, id)
		}
		return ids
	case position.EdgeDepartments:
		if id := m.departments; id != nil {
			return []ent.Value{*id}
		}
	case position.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case position.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PositionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedemployees != nil {
		edges = append(edges, position.EdgeEmployees)
	}
	if m.removedchildren != nil {
		edges = append(edges, position.EdgeChildren)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PositionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case position.EdgeEmployees:
		ids := make([]ent.Value, 0, len(m.removedemployees))
		for id := range m.removedemployees {
			ids = append(ids, id)
		}
		return ids
	case position.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PositionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedemployees {
		edges = append(edges, position.EdgeEmployees)
	}
	if m.cleareddepartments {
		edges = append(edges, position.EdgeDepartments)
	}
	if m.clearedchildren {
		edges = append(edges, position.EdgeChildren)
	}
	if m.clearedparent {
		edges = append(edges, position.EdgeParent)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PositionMutation) EdgeCleared(name string) bool {
	switch name {
	case position.EdgeEmployees:
		return m.clearedemployees
	case position.EdgeDepartments:
		return m.cleareddepartments
	case position.EdgeChildren:
		return m.clearedchildren
	case position.EdgeParent:
		return m.clearedparent
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PositionMutation) ClearEdge(name string) error {
	switch name {
	case position.EdgeDepartments:
		m.ClearDepartments()
		return nil
	case position.EdgeParent:
		m.ClearParent()
		return nil
	}
	return fmt.Errorf("unknown Position unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PositionMutation) ResetEdge(name string) error {
	switch name {
	case position.EdgeEmployees:
		m.ResetEmployees()
		return nil
	case position.EdgeDepartments:
		m.ResetDepartments()
		return nil
	case position.EdgeChildren:
		m.ResetChildren()
		return nil
	case position.EdgeParent:
		m.ResetParent()
		return nil
	}
	return fmt.Errorf("unknown Position edge %s", name)
}

// ProjectMutation represents an operation that mutates the Project nodes in the graph.
type ProjectMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	code                *string
	description         *string
	start_at            *time.Time
	end_at              *time.Time
	process             *int
	addprocess          *int
	status              *project.Status
	visibility          *project.Visibility
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	tasks               map[int]struct{}
	removedtasks        map[int]struct{}
	clearedtasks        bool
	organization        *int
	clearedorganization bool
	creator             *int
	clearedcreator      bool
	updater             *int
	clearedupdater      bool
	done                bool
	oldValue            func(context.Context) (*Project, error)
	predicates          []predicate.Project
}

var _ ent.Mutation = (*ProjectMutation)(nil)

// projectOption allows management of the mutation configuration using functional options.
type projectOption func(*ProjectMutation)

// newProjectMutation creates new mutation for the Project entity.
func newProjectMutation(c config, op Op, opts ...projectOption) *ProjectMutation {
	m := &ProjectMutation{
		config:        c,
		op:            op,
		typ:           TypeProject,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProjectID sets the ID field of the mutation.
func withProjectID(id int) projectOption {
	return func(m *ProjectMutation) {
		var (
			err   error
			once  sync.Once
			value *Project
		)
		m.oldValue = func(ctx context.Context) (*Project, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Project.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProject sets the old Project of the mutation.
func withProject(node *Project) projectOption {
	return func(m *ProjectMutation) {
		m.oldValue = func(context.Context) (*Project, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProjectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProjectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProjectMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProjectMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Project.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProjectMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProjectMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProjectMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *ProjectMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ProjectMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *ProjectMutation) ResetCode() {
	m.code = nil
}

// SetDescription sets the "description" field.
func (m *ProjectMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ProjectMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ProjectMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[project.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ProjectMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[project.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ProjectMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, project.FieldDescription)
}

// SetStartAt sets the "start_at" field.
func (m *ProjectMutation) SetStartAt(t time.Time) {
	m.start_at = &t
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *ProjectMutation) StartAt() (r time.Time, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// ClearStartAt clears the value of the "start_at" field.
func (m *ProjectMutation) ClearStartAt() {
	m.start_at = nil
	m.clearedFields[project.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *ProjectMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[project.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *ProjectMutation) ResetStartAt() {
	m.start_at = nil
	delete(m.clearedFields, project.FieldStartAt)
}

// SetEndAt sets the "end_at" field.
func (m *ProjectMutation) SetEndAt(t time.Time) {
	m.end_at = &t
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *ProjectMutation) EndAt() (r time.Time, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldEndAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// ClearEndAt clears the value of the "end_at" field.
func (m *ProjectMutation) ClearEndAt() {
	m.end_at = nil
	m.clearedFields[project.FieldEndAt] = struct{}{}
}

// EndAtCleared returns if the "end_at" field was cleared in this mutation.
func (m *ProjectMutation) EndAtCleared() bool {
	_, ok := m.clearedFields[project.FieldEndAt]
	return ok
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *ProjectMutation) ResetEndAt() {
	m.end_at = nil
	delete(m.clearedFields, project.FieldEndAt)
}

// SetCreatorID sets the "creator_id" field.
func (m *ProjectMutation) SetCreatorID(i int) {
	m.creator = &i
}

// CreatorID returns the value of the "creator_id" field in the mutation.
func (m *ProjectMutation) CreatorID() (r int, exists bool) {
	v := m.creator
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatorID returns the old "creator_id" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldCreatorID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatorID: %w", err)
	}
	return oldValue.CreatorID, nil
}

// ResetCreatorID resets all changes to the "creator_id" field.
func (m *ProjectMutation) ResetCreatorID() {
	m.creator = nil
}

// SetUpdaterID sets the "updater_id" field.
func (m *ProjectMutation) SetUpdaterID(i int) {
	m.updater = &i
}

// UpdaterID returns the value of the "updater_id" field in the mutation.
func (m *ProjectMutation) UpdaterID() (r int, exists bool) {
	v := m.updater
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdaterID returns the old "updater_id" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldUpdaterID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdaterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdaterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdaterID: %w", err)
	}
	return oldValue.UpdaterID, nil
}

// ResetUpdaterID resets all changes to the "updater_id" field.
func (m *ProjectMutation) ResetUpdaterID() {
	m.updater = nil
}

// SetOrgID sets the "org_id" field.
func (m *ProjectMutation) SetOrgID(i int) {
	m.organization = &i
}

// OrgID returns the value of the "org_id" field in the mutation.
func (m *ProjectMutation) OrgID() (r int, exists bool) {
	v := m.organization
	if v == nil {
		return
	}
	return *v, true
}

// OldOrgID returns the old "org_id" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldOrgID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrgID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrgID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrgID: %w", err)
	}
	return oldValue.OrgID, nil
}

// ResetOrgID resets all changes to the "org_id" field.
func (m *ProjectMutation) ResetOrgID() {
	m.organization = nil
}

// SetProcess sets the "process" field.
func (m *ProjectMutation) SetProcess(i int) {
	m.process = &i
	m.addprocess = nil
}

// Process returns the value of the "process" field in the mutation.
func (m *ProjectMutation) Process() (r int, exists bool) {
	v := m.process
	if v == nil {
		return
	}
	return *v, true
}

// OldProcess returns the old "process" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldProcess(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcess: %w", err)
	}
	return oldValue.Process, nil
}

// AddProcess adds i to the "process" field.
func (m *ProjectMutation) AddProcess(i int) {
	if m.addprocess != nil {
		*m.addprocess += i
	} else {
		m.addprocess = &i
	}
}

// AddedProcess returns the value that was added to the "process" field in this mutation.
func (m *ProjectMutation) AddedProcess() (r int, exists bool) {
	v := m.addprocess
	if v == nil {
		return
	}
	return *v, true
}

// ClearProcess clears the value of the "process" field.
func (m *ProjectMutation) ClearProcess() {
	m.process = nil
	m.addprocess = nil
	m.clearedFields[project.FieldProcess] = struct{}{}
}

// ProcessCleared returns if the "process" field was cleared in this mutation.
func (m *ProjectMutation) ProcessCleared() bool {
	_, ok := m.clearedFields[project.FieldProcess]
	return ok
}

// ResetProcess resets all changes to the "process" field.
func (m *ProjectMutation) ResetProcess() {
	m.process = nil
	m.addprocess = nil
	delete(m.clearedFields, project.FieldProcess)
}

// SetStatus sets the "status" field.
func (m *ProjectMutation) SetStatus(pr project.Status) {
	m.status = &pr
}

// Status returns the value of the "status" field in the mutation.
func (m *ProjectMutation) Status() (r project.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldStatus(ctx context.Context) (v project.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ProjectMutation) ResetStatus() {
	m.status = nil
}

// SetVisibility sets the "visibility" field.
func (m *ProjectMutation) SetVisibility(pr project.Visibility) {
	m.visibility = &pr
}

// Visibility returns the value of the "visibility" field in the mutation.
func (m *ProjectMutation) Visibility() (r project.Visibility, exists bool) {
	v := m.visibility
	if v == nil {
		return
	}
	return *v, true
}

// OldVisibility returns the old "visibility" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldVisibility(ctx context.Context) (v project.Visibility, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVisibility is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVisibility requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisibility: %w", err)
	}
	return oldValue.Visibility, nil
}

// ResetVisibility resets all changes to the "visibility" field.
func (m *ProjectMutation) ResetVisibility() {
	m.visibility = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProjectMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProjectMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProjectMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProjectMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProjectMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Project entity.
// If the Project object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProjectMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProjectMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddTaskIDs adds the "tasks" edge to the Task entity by ids.
func (m *ProjectMutation) AddTaskIDs(ids ...int) {
	if m.tasks == nil {
		m.tasks = make(map[int]struct{})
	}
	for i := range ids {
		m.tasks[ids[i]] = struct{}{}
	}
}

// ClearTasks clears the "tasks" edge to the Task entity.
func (m *ProjectMutation) ClearTasks() {
	m.clearedtasks = true
}

// TasksCleared reports if the "tasks" edge to the Task entity was cleared.
func (m *ProjectMutation) TasksCleared() bool {
	return m.clearedtasks
}

// RemoveTaskIDs removes the "tasks" edge to the Task entity by IDs.
func (m *ProjectMutation) RemoveTaskIDs(ids ...int) {
	if m.removedtasks == nil {
		m.removedtasks = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tasks, ids[i])
		m.removedtasks[ids[i]] = struct{}{}
	}
}

// RemovedTasks returns the removed IDs of the "tasks" edge to the Task entity.
func (m *ProjectMutation) RemovedTasksIDs() (ids []int) {
	for id := range m.removedtasks {
		ids = append(ids, id)
	}
	return
}

// TasksIDs returns the "tasks" edge IDs in the mutation.
func (m *ProjectMutation) TasksIDs() (ids []int) {
	for id := range m.tasks {
		ids = append(ids, id)
	}
	return
}

// ResetTasks resets all changes to the "tasks" edge.
func (m *ProjectMutation) ResetTasks() {
	m.tasks = nil
	m.clearedtasks = false
	m.removedtasks = nil
}

// SetOrganizationID sets the "organization" edge to the Organization entity by id.
func (m *ProjectMutation) SetOrganizationID(id int) {
	m.organization = &id
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (m *ProjectMutation) ClearOrganization() {
	m.clearedorganization = true
	m.clearedFields[project.FieldOrgID] = struct{}{}
}

// OrganizationCleared reports if the "organization" edge to the Organization entity was cleared.
func (m *ProjectMutation) OrganizationCleared() bool {
	return m.clearedorganization
}

// OrganizationID returns the "organization" edge ID in the mutation.
func (m *ProjectMutation) OrganizationID() (id int, exists bool) {
	if m.organization != nil {
		return *m.organization, true
	}
	return
}

// OrganizationIDs returns the "organization" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganizationID instead. It exists only for internal usage by the builders.
func (m *ProjectMutation) OrganizationIDs() (ids []int) {
	if id := m.organization; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrganization resets all changes to the "organization" edge.
func (m *ProjectMutation) ResetOrganization() {
	m.organization = nil
	m.clearedorganization = false
}

// ClearCreator clears the "creator" edge to the Employee entity.
func (m *ProjectMutation) ClearCreator() {
	m.clearedcreator = true
	m.clearedFields[project.FieldCreatorID] = struct{}{}
}

// CreatorCleared reports if the "creator" edge to the Employee entity was cleared.
func (m *ProjectMutation) CreatorCleared() bool {
	return m.clearedcreator
}

// CreatorIDs returns the "creator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatorID instead. It exists only for internal usage by the builders.
func (m *ProjectMutation) CreatorIDs() (ids []int) {
	if id := m.creator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreator resets all changes to the "creator" edge.
func (m *ProjectMutation) ResetCreator() {
	m.creator = nil
	m.clearedcreator = false
}

// ClearUpdater clears the "updater" edge to the Employee entity.
func (m *ProjectMutation) ClearUpdater() {
	m.clearedupdater = true
	m.clearedFields[project.FieldUpdaterID] = struct{}{}
}

// UpdaterCleared reports if the "updater" edge to the Employee entity was cleared.
func (m *ProjectMutation) UpdaterCleared() bool {
	return m.clearedupdater
}

// UpdaterIDs returns the "updater" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UpdaterID instead. It exists only for internal usage by the builders.
func (m *ProjectMutation) UpdaterIDs() (ids []int) {
	if id := m.updater; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUpdater resets all changes to the "updater" edge.
func (m *ProjectMutation) ResetUpdater() {
	m.updater = nil
	m.clearedupdater = false
}

// Where appends a list predicates to the ProjectMutation builder.
func (m *ProjectMutation) Where(ps ...predicate.Project) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProjectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProjectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Project, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProjectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProjectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Project).
func (m *ProjectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProjectMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.name != nil {
		fields = append(fields, project.FieldName)
	}
	if m.code != nil {
		fields = append(fields, project.FieldCode)
	}
	if m.description != nil {
		fields = append(fields, project.FieldDescription)
	}
	if m.start_at != nil {
		fields = append(fields, project.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, project.FieldEndAt)
	}
	if m.creator != nil {
		fields = append(fields, project.FieldCreatorID)
	}
	if m.updater != nil {
		fields = append(fields, project.FieldUpdaterID)
	}
	if m.organization != nil {
		fields = append(fields, project.FieldOrgID)
	}
	if m.process != nil {
		fields = append(fields, project.FieldProcess)
	}
	if m.status != nil {
		fields = append(fields, project.FieldStatus)
	}
	if m.visibility != nil {
		fields = append(fields, project.FieldVisibility)
	}
	if m.created_at != nil {
		fields = append(fields, project.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, project.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProjectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case project.FieldName:
		return m.Name()
	case project.FieldCode:
		return m.Code()
	case project.FieldDescription:
		return m.Description()
	case project.FieldStartAt:
		return m.StartAt()
	case project.FieldEndAt:
		return m.EndAt()
	case project.FieldCreatorID:
		return m.CreatorID()
	case project.FieldUpdaterID:
		return m.UpdaterID()
	case project.FieldOrgID:
		return m.OrgID()
	case project.FieldProcess:
		return m.Process()
	case project.FieldStatus:
		return m.Status()
	case project.FieldVisibility:
		return m.Visibility()
	case project.FieldCreatedAt:
		return m.CreatedAt()
	case project.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProjectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case project.FieldName:
		return m.OldName(ctx)
	case project.FieldCode:
		return m.OldCode(ctx)
	case project.FieldDescription:
		return m.OldDescription(ctx)
	case project.FieldStartAt:
		return m.OldStartAt(ctx)
	case project.FieldEndAt:
		return m.OldEndAt(ctx)
	case project.FieldCreatorID:
		return m.OldCreatorID(ctx)
	case project.FieldUpdaterID:
		return m.OldUpdaterID(ctx)
	case project.FieldOrgID:
		return m.OldOrgID(ctx)
	case project.FieldProcess:
		return m.OldProcess(ctx)
	case project.FieldStatus:
		return m.OldStatus(ctx)
	case project.FieldVisibility:
		return m.OldVisibility(ctx)
	case project.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case project.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Project field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case project.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case project.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case project.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case project.FieldStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case project.FieldEndAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	case project.FieldCreatorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatorID(v)
		return nil
	case project.FieldUpdaterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdaterID(v)
		return nil
	case project.FieldOrgID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrgID(v)
		return nil
	case project.FieldProcess:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcess(v)
		return nil
	case project.FieldStatus:
		v, ok := value.(project.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case project.FieldVisibility:
		v, ok := value.(project.Visibility)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisibility(v)
		return nil
	case project.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case project.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProjectMutation) AddedFields() []string {
	var fields []string
	if m.addprocess != nil {
		fields = append(fields, project.FieldProcess)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProjectMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case project.FieldProcess:
		return m.AddedProcess()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProjectMutation) AddField(name string, value ent.Value) error {
	switch name {
	case project.FieldProcess:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProcess(v)
		return nil
	}
	return fmt.Errorf("unknown Project numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProjectMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(project.FieldDescription) {
		fields = append(fields, project.FieldDescription)
	}
	if m.FieldCleared(project.FieldStartAt) {
		fields = append(fields, project.FieldStartAt)
	}
	if m.FieldCleared(project.FieldEndAt) {
		fields = append(fields, project.FieldEndAt)
	}
	if m.FieldCleared(project.FieldProcess) {
		fields = append(fields, project.FieldProcess)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProjectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProjectMutation) ClearField(name string) error {
	switch name {
	case project.FieldDescription:
		m.ClearDescription()
		return nil
	case project.FieldStartAt:
		m.ClearStartAt()
		return nil
	case project.FieldEndAt:
		m.ClearEndAt()
		return nil
	case project.FieldProcess:
		m.ClearProcess()
		return nil
	}
	return fmt.Errorf("unknown Project nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProjectMutation) ResetField(name string) error {
	switch name {
	case project.FieldName:
		m.ResetName()
		return nil
	case project.FieldCode:
		m.ResetCode()
		return nil
	case project.FieldDescription:
		m.ResetDescription()
		return nil
	case project.FieldStartAt:
		m.ResetStartAt()
		return nil
	case project.FieldEndAt:
		m.ResetEndAt()
		return nil
	case project.FieldCreatorID:
		m.ResetCreatorID()
		return nil
	case project.FieldUpdaterID:
		m.ResetUpdaterID()
		return nil
	case project.FieldOrgID:
		m.ResetOrgID()
		return nil
	case project.FieldProcess:
		m.ResetProcess()
		return nil
	case project.FieldStatus:
		m.ResetStatus()
		return nil
	case project.FieldVisibility:
		m.ResetVisibility()
		return nil
	case project.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case project.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Project field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProjectMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.tasks != nil {
		edges = append(edges, project.EdgeTasks)
	}
	if m.organization != nil {
		edges = append(edges, project.EdgeOrganization)
	}
	if m.creator != nil {
		edges = append(edges, project.EdgeCreator)
	}
	if m.updater != nil {
		edges = append(edges, project.EdgeUpdater)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProjectMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.tasks))
		for id := range m.tasks {
			ids = append(ids, id)
		}
		return ids
	case project.EdgeOrganization:
		if id := m.organization; id != nil {
			return []ent.Value{*id}
		}
	case project.EdgeCreator:
		if id := m.creator; id != nil {
			return []ent.Value{*id}
		}
	case project.EdgeUpdater:
		if id := m.updater; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProjectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedtasks != nil {
		edges = append(edges, project.EdgeTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProjectMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case project.EdgeTasks:
		ids := make([]ent.Value, 0, len(m.removedtasks))
		for id := range m.removedtasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProjectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedtasks {
		edges = append(edges, project.EdgeTasks)
	}
	if m.clearedorganization {
		edges = append(edges, project.EdgeOrganization)
	}
	if m.clearedcreator {
		edges = append(edges, project.EdgeCreator)
	}
	if m.clearedupdater {
		edges = append(edges, project.EdgeUpdater)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProjectMutation) EdgeCleared(name string) bool {
	switch name {
	case project.EdgeTasks:
		return m.clearedtasks
	case project.EdgeOrganization:
		return m.clearedorganization
	case project.EdgeCreator:
		return m.clearedcreator
	case project.EdgeUpdater:
		return m.clearedupdater
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProjectMutation) ClearEdge(name string) error {
	switch name {
	case project.EdgeOrganization:
		m.ClearOrganization()
		return nil
	case project.EdgeCreator:
		m.ClearCreator()
		return nil
	case project.EdgeUpdater:
		m.ClearUpdater()
		return nil
	}
	return fmt.Errorf("unknown Project unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProjectMutation) ResetEdge(name string) error {
	switch name {
	case project.EdgeTasks:
		m.ResetTasks()
		return nil
	case project.EdgeOrganization:
		m.ResetOrganization()
		return nil
	case project.EdgeCreator:
		m.ResetCreator()
		return nil
	case project.EdgeUpdater:
		m.ResetUpdater()
		return nil
	}
	return fmt.Errorf("unknown Project edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	code             *string
	description      *string
	process          *int
	addprocess       *int
	status           *task.Status
	start_at         *time.Time
	due_date         *time.Time
	creator_id       *int
	addcreator_id    *int
	updater_id       *int
	addupdater_id    *int
	created_at       *time.Time
	updated_at       *time.Time
	_type            *task.Type
	clearedFields    map[string]struct{}
	project          *int
	clearedproject   bool
	labels           map[int]struct{}
	removedlabels    map[int]struct{}
	clearedlabels    bool
	assignees        map[int]struct{}
	removedassignees map[int]struct{}
	clearedassignees bool
	done             bool
	oldValue         func(context.Context) (*Task, error)
	predicates       []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id int) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TaskMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TaskMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TaskMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *TaskMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *TaskMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *TaskMutation) ResetCode() {
	m.code = nil
}

// SetDescription sets the "description" field.
func (m *TaskMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TaskMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *TaskMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[task.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *TaskMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[task.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *TaskMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, task.FieldDescription)
}

// SetProcess sets the "process" field.
func (m *TaskMutation) SetProcess(i int) {
	m.process = &i
	m.addprocess = nil
}

// Process returns the value of the "process" field in the mutation.
func (m *TaskMutation) Process() (r int, exists bool) {
	v := m.process
	if v == nil {
		return
	}
	return *v, true
}

// OldProcess returns the old "process" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldProcess(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcess is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcess requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcess: %w", err)
	}
	return oldValue.Process, nil
}

// AddProcess adds i to the "process" field.
func (m *TaskMutation) AddProcess(i int) {
	if m.addprocess != nil {
		*m.addprocess += i
	} else {
		m.addprocess = &i
	}
}

// AddedProcess returns the value that was added to the "process" field in this mutation.
func (m *TaskMutation) AddedProcess() (r int, exists bool) {
	v := m.addprocess
	if v == nil {
		return
	}
	return *v, true
}

// ResetProcess resets all changes to the "process" field.
func (m *TaskMutation) ResetProcess() {
	m.process = nil
	m.addprocess = nil
}

// SetStatus sets the "status" field.
func (m *TaskMutation) SetStatus(t task.Status) {
	m.status = &t
}

// Status returns the value of the "status" field in the mutation.
func (m *TaskMutation) Status() (r task.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldStatus(ctx context.Context) (v task.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TaskMutation) ResetStatus() {
	m.status = nil
}

// SetStartAt sets the "start_at" field.
func (m *TaskMutation) SetStartAt(t time.Time) {
	m.start_at = &t
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *TaskMutation) StartAt() (r time.Time, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// ClearStartAt clears the value of the "start_at" field.
func (m *TaskMutation) ClearStartAt() {
	m.start_at = nil
	m.clearedFields[task.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *TaskMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[task.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *TaskMutation) ResetStartAt() {
	m.start_at = nil
	delete(m.clearedFields, task.FieldStartAt)
}

// SetDueDate sets the "due_date" field.
func (m *TaskMutation) SetDueDate(t time.Time) {
	m.due_date = &t
}

// DueDate returns the value of the "due_date" field in the mutation.
func (m *TaskMutation) DueDate() (r time.Time, exists bool) {
	v := m.due_date
	if v == nil {
		return
	}
	return *v, true
}

// OldDueDate returns the old "due_date" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDueDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDueDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDueDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDueDate: %w", err)
	}
	return oldValue.DueDate, nil
}

// ClearDueDate clears the value of the "due_date" field.
func (m *TaskMutation) ClearDueDate() {
	m.due_date = nil
	m.clearedFields[task.FieldDueDate] = struct{}{}
}

// DueDateCleared returns if the "due_date" field was cleared in this mutation.
func (m *TaskMutation) DueDateCleared() bool {
	_, ok := m.clearedFields[task.FieldDueDate]
	return ok
}

// ResetDueDate resets all changes to the "due_date" field.
func (m *TaskMutation) ResetDueDate() {
	m.due_date = nil
	delete(m.clearedFields, task.FieldDueDate)
}

// SetProjectID sets the "project_id" field.
func (m *TaskMutation) SetProjectID(i int) {
	m.project = &i
}

// ProjectID returns the value of the "project_id" field in the mutation.
func (m *TaskMutation) ProjectID() (r int, exists bool) {
	v := m.project
	if v == nil {
		return
	}
	return *v, true
}

// OldProjectID returns the old "project_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldProjectID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProjectID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProjectID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProjectID: %w", err)
	}
	return oldValue.ProjectID, nil
}

// ClearProjectID clears the value of the "project_id" field.
func (m *TaskMutation) ClearProjectID() {
	m.project = nil
	m.clearedFields[task.FieldProjectID] = struct{}{}
}

// ProjectIDCleared returns if the "project_id" field was cleared in this mutation.
func (m *TaskMutation) ProjectIDCleared() bool {
	_, ok := m.clearedFields[task.FieldProjectID]
	return ok
}

// ResetProjectID resets all changes to the "project_id" field.
func (m *TaskMutation) ResetProjectID() {
	m.project = nil
	delete(m.clearedFields, task.FieldProjectID)
}

// SetCreatorID sets the "creator_id" field.
func (m *TaskMutation) SetCreatorID(i int) {
	m.creator_id = &i
	m.addcreator_id = nil
}

// CreatorID returns the value of the "creator_id" field in the mutation.
func (m *TaskMutation) CreatorID() (r int, exists bool) {
	v := m.creator_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatorID returns the old "creator_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatorID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatorID: %w", err)
	}
	return oldValue.CreatorID, nil
}

// AddCreatorID adds i to the "creator_id" field.
func (m *TaskMutation) AddCreatorID(i int) {
	if m.addcreator_id != nil {
		*m.addcreator_id += i
	} else {
		m.addcreator_id = &i
	}
}

// AddedCreatorID returns the value that was added to the "creator_id" field in this mutation.
func (m *TaskMutation) AddedCreatorID() (r int, exists bool) {
	v := m.addcreator_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatorID resets all changes to the "creator_id" field.
func (m *TaskMutation) ResetCreatorID() {
	m.creator_id = nil
	m.addcreator_id = nil
}

// SetUpdaterID sets the "updater_id" field.
func (m *TaskMutation) SetUpdaterID(i int) {
	m.updater_id = &i
	m.addupdater_id = nil
}

// UpdaterID returns the value of the "updater_id" field in the mutation.
func (m *TaskMutation) UpdaterID() (r int, exists bool) {
	v := m.updater_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdaterID returns the old "updater_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldUpdaterID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdaterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdaterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdaterID: %w", err)
	}
	return oldValue.UpdaterID, nil
}

// AddUpdaterID adds i to the "updater_id" field.
func (m *TaskMutation) AddUpdaterID(i int) {
	if m.addupdater_id != nil {
		*m.addupdater_id += i
	} else {
		m.addupdater_id = &i
	}
}

// AddedUpdaterID returns the value that was added to the "updater_id" field in this mutation.
func (m *TaskMutation) AddedUpdaterID() (r int, exists bool) {
	v := m.addupdater_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdaterID resets all changes to the "updater_id" field.
func (m *TaskMutation) ResetUpdaterID() {
	m.updater_id = nil
	m.addupdater_id = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TaskMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TaskMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TaskMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetType sets the "type" field.
func (m *TaskMutation) SetType(t task.Type) {
	m._type = &t
}

// GetType returns the value of the "type" field in the mutation.
func (m *TaskMutation) GetType() (r task.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldType(ctx context.Context) (v task.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *TaskMutation) ResetType() {
	m._type = nil
}

// ClearProject clears the "project" edge to the Project entity.
func (m *TaskMutation) ClearProject() {
	m.clearedproject = true
	m.clearedFields[task.FieldProjectID] = struct{}{}
}

// ProjectCleared reports if the "project" edge to the Project entity was cleared.
func (m *TaskMutation) ProjectCleared() bool {
	return m.ProjectIDCleared() || m.clearedproject
}

// ProjectIDs returns the "project" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProjectID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) ProjectIDs() (ids []int) {
	if id := m.project; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProject resets all changes to the "project" edge.
func (m *TaskMutation) ResetProject() {
	m.project = nil
	m.clearedproject = false
}

// AddLabelIDs adds the "labels" edge to the Label entity by ids.
func (m *TaskMutation) AddLabelIDs(ids ...int) {
	if m.labels == nil {
		m.labels = make(map[int]struct{})
	}
	for i := range ids {
		m.labels[ids[i]] = struct{}{}
	}
}

// ClearLabels clears the "labels" edge to the Label entity.
func (m *TaskMutation) ClearLabels() {
	m.clearedlabels = true
}

// LabelsCleared reports if the "labels" edge to the Label entity was cleared.
func (m *TaskMutation) LabelsCleared() bool {
	return m.clearedlabels
}

// RemoveLabelIDs removes the "labels" edge to the Label entity by IDs.
func (m *TaskMutation) RemoveLabelIDs(ids ...int) {
	if m.removedlabels == nil {
		m.removedlabels = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.labels, ids[i])
		m.removedlabels[ids[i]] = struct{}{}
	}
}

// RemovedLabels returns the removed IDs of the "labels" edge to the Label entity.
func (m *TaskMutation) RemovedLabelsIDs() (ids []int) {
	for id := range m.removedlabels {
		ids = append(ids, id)
	}
	return
}

// LabelsIDs returns the "labels" edge IDs in the mutation.
func (m *TaskMutation) LabelsIDs() (ids []int) {
	for id := range m.labels {
		ids = append(ids, id)
	}
	return
}

// ResetLabels resets all changes to the "labels" edge.
func (m *TaskMutation) ResetLabels() {
	m.labels = nil
	m.clearedlabels = false
	m.removedlabels = nil
}

// AddAssigneeIDs adds the "assignees" edge to the Employee entity by ids.
func (m *TaskMutation) AddAssigneeIDs(ids ...int) {
	if m.assignees == nil {
		m.assignees = make(map[int]struct{})
	}
	for i := range ids {
		m.assignees[ids[i]] = struct{}{}
	}
}

// ClearAssignees clears the "assignees" edge to the Employee entity.
func (m *TaskMutation) ClearAssignees() {
	m.clearedassignees = true
}

// AssigneesCleared reports if the "assignees" edge to the Employee entity was cleared.
func (m *TaskMutation) AssigneesCleared() bool {
	return m.clearedassignees
}

// RemoveAssigneeIDs removes the "assignees" edge to the Employee entity by IDs.
func (m *TaskMutation) RemoveAssigneeIDs(ids ...int) {
	if m.removedassignees == nil {
		m.removedassignees = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.assignees, ids[i])
		m.removedassignees[ids[i]] = struct{}{}
	}
}

// RemovedAssignees returns the removed IDs of the "assignees" edge to the Employee entity.
func (m *TaskMutation) RemovedAssigneesIDs() (ids []int) {
	for id := range m.removedassignees {
		ids = append(ids, id)
	}
	return
}

// AssigneesIDs returns the "assignees" edge IDs in the mutation.
func (m *TaskMutation) AssigneesIDs() (ids []int) {
	for id := range m.assignees {
		ids = append(ids, id)
	}
	return
}

// ResetAssignees resets all changes to the "assignees" edge.
func (m *TaskMutation) ResetAssignees() {
	m.assignees = nil
	m.clearedassignees = false
	m.removedassignees = nil
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Task, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.name != nil {
		fields = append(fields, task.FieldName)
	}
	if m.code != nil {
		fields = append(fields, task.FieldCode)
	}
	if m.description != nil {
		fields = append(fields, task.FieldDescription)
	}
	if m.process != nil {
		fields = append(fields, task.FieldProcess)
	}
	if m.status != nil {
		fields = append(fields, task.FieldStatus)
	}
	if m.start_at != nil {
		fields = append(fields, task.FieldStartAt)
	}
	if m.due_date != nil {
		fields = append(fields, task.FieldDueDate)
	}
	if m.project != nil {
		fields = append(fields, task.FieldProjectID)
	}
	if m.creator_id != nil {
		fields = append(fields, task.FieldCreatorID)
	}
	if m.updater_id != nil {
		fields = append(fields, task.FieldUpdaterID)
	}
	if m.created_at != nil {
		fields = append(fields, task.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, task.FieldUpdatedAt)
	}
	if m._type != nil {
		fields = append(fields, task.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldName:
		return m.Name()
	case task.FieldCode:
		return m.Code()
	case task.FieldDescription:
		return m.Description()
	case task.FieldProcess:
		return m.Process()
	case task.FieldStatus:
		return m.Status()
	case task.FieldStartAt:
		return m.StartAt()
	case task.FieldDueDate:
		return m.DueDate()
	case task.FieldProjectID:
		return m.ProjectID()
	case task.FieldCreatorID:
		return m.CreatorID()
	case task.FieldUpdaterID:
		return m.UpdaterID()
	case task.FieldCreatedAt:
		return m.CreatedAt()
	case task.FieldUpdatedAt:
		return m.UpdatedAt()
	case task.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldName:
		return m.OldName(ctx)
	case task.FieldCode:
		return m.OldCode(ctx)
	case task.FieldDescription:
		return m.OldDescription(ctx)
	case task.FieldProcess:
		return m.OldProcess(ctx)
	case task.FieldStatus:
		return m.OldStatus(ctx)
	case task.FieldStartAt:
		return m.OldStartAt(ctx)
	case task.FieldDueDate:
		return m.OldDueDate(ctx)
	case task.FieldProjectID:
		return m.OldProjectID(ctx)
	case task.FieldCreatorID:
		return m.OldCreatorID(ctx)
	case task.FieldUpdaterID:
		return m.OldUpdaterID(ctx)
	case task.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case task.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case task.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case task.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case task.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case task.FieldProcess:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcess(v)
		return nil
	case task.FieldStatus:
		v, ok := value.(task.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case task.FieldStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case task.FieldDueDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDueDate(v)
		return nil
	case task.FieldProjectID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProjectID(v)
		return nil
	case task.FieldCreatorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatorID(v)
		return nil
	case task.FieldUpdaterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdaterID(v)
		return nil
	case task.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case task.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case task.FieldType:
		v, ok := value.(task.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	var fields []string
	if m.addprocess != nil {
		fields = append(fields, task.FieldProcess)
	}
	if m.addcreator_id != nil {
		fields = append(fields, task.FieldCreatorID)
	}
	if m.addupdater_id != nil {
		fields = append(fields, task.FieldUpdaterID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case task.FieldProcess:
		return m.AddedProcess()
	case task.FieldCreatorID:
		return m.AddedCreatorID()
	case task.FieldUpdaterID:
		return m.AddedUpdaterID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case task.FieldProcess:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProcess(v)
		return nil
	case task.FieldCreatorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatorID(v)
		return nil
	case task.FieldUpdaterID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdaterID(v)
		return nil
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldDescription) {
		fields = append(fields, task.FieldDescription)
	}
	if m.FieldCleared(task.FieldStartAt) {
		fields = append(fields, task.FieldStartAt)
	}
	if m.FieldCleared(task.FieldDueDate) {
		fields = append(fields, task.FieldDueDate)
	}
	if m.FieldCleared(task.FieldProjectID) {
		fields = append(fields, task.FieldProjectID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldDescription:
		m.ClearDescription()
		return nil
	case task.FieldStartAt:
		m.ClearStartAt()
		return nil
	case task.FieldDueDate:
		m.ClearDueDate()
		return nil
	case task.FieldProjectID:
		m.ClearProjectID()
		return nil
	}
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldName:
		m.ResetName()
		return nil
	case task.FieldCode:
		m.ResetCode()
		return nil
	case task.FieldDescription:
		m.ResetDescription()
		return nil
	case task.FieldProcess:
		m.ResetProcess()
		return nil
	case task.FieldStatus:
		m.ResetStatus()
		return nil
	case task.FieldStartAt:
		m.ResetStartAt()
		return nil
	case task.FieldDueDate:
		m.ResetDueDate()
		return nil
	case task.FieldProjectID:
		m.ResetProjectID()
		return nil
	case task.FieldCreatorID:
		m.ResetCreatorID()
		return nil
	case task.FieldUpdaterID:
		m.ResetUpdaterID()
		return nil
	case task.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case task.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case task.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.project != nil {
		edges = append(edges, task.EdgeProject)
	}
	if m.labels != nil {
		edges = append(edges, task.EdgeLabels)
	}
	if m.assignees != nil {
		edges = append(edges, task.EdgeAssignees)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeProject:
		if id := m.project; id != nil {
			return []ent.Value{*id}
		}
	case task.EdgeLabels:
		ids := make([]ent.Value, 0, len(m.labels))
		for id := range m.labels {
			ids = append(ids, id)
		}
		return ids
	case task.EdgeAssignees:
		ids := make([]ent.Value, 0, len(m.assignees))
		for id := range m.assignees {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedlabels != nil {
		edges = append(edges, task.EdgeLabels)
	}
	if m.removedassignees != nil {
		edges = append(edges, task.EdgeAssignees)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeLabels:
		ids := make([]ent.Value, 0, len(m.removedlabels))
		for id := range m.removedlabels {
			ids = append(ids, id)
		}
		return ids
	case task.EdgeAssignees:
		ids := make([]ent.Value, 0, len(m.removedassignees))
		for id := range m.removedassignees {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedproject {
		edges = append(edges, task.EdgeProject)
	}
	if m.clearedlabels {
		edges = append(edges, task.EdgeLabels)
	}
	if m.clearedassignees {
		edges = append(edges, task.EdgeAssignees)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	switch name {
	case task.EdgeProject:
		return m.clearedproject
	case task.EdgeLabels:
		return m.clearedlabels
	case task.EdgeAssignees:
		return m.clearedassignees
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	switch name {
	case task.EdgeProject:
		m.ClearProject()
		return nil
	}
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	switch name {
	case task.EdgeProject:
		m.ResetProject()
		return nil
	case task.EdgeLabels:
		m.ResetLabels()
		return nil
	case task.EdgeAssignees:
		m.ResetAssignees()
		return nil
	}
	return fmt.Errorf("unknown Task edge %s", name)
}
