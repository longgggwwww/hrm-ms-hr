// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/appointmenthistory"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
	"github.com/longgggwwww/hrm-ms-hr/ent/leaveapproval"
	"github.com/longgggwwww/hrm-ms-hr/ent/leaverequest"
	"github.com/longgggwwww/hrm-ms-hr/ent/position"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
	"github.com/longgggwwww/hrm-ms-hr/ent/project"
	"github.com/longgggwwww/hrm-ms-hr/ent/task"
	"github.com/longgggwwww/hrm-ms-hr/ent/taskreport"
	"github.com/longgggwwww/hrm-ms-hr/ent/zaloemployee"
)

// EmployeeQuery is the builder for querying Employee entities.
type EmployeeQuery struct {
	config
	ctx                      *QueryContext
	order                    []employee.OrderOption
	inters                   []Interceptor
	predicates               []predicate.Employee
	withPosition             *PositionQuery
	withCreatedProjects      *ProjectQuery
	withUpdatedProjects      *ProjectQuery
	withAssignedTasks        *TaskQuery
	withLeaveApproves        *LeaveApprovalQuery
	withLeaveRequests        *LeaveRequestQuery
	withTaskReports          *TaskReportQuery
	withProjects             *ProjectQuery
	withAppointmentHistories *AppointmentHistoryQuery
	withZaloEmployee         *ZaloEmployeeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EmployeeQuery builder.
func (eq *EmployeeQuery) Where(ps ...predicate.Employee) *EmployeeQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *EmployeeQuery) Limit(limit int) *EmployeeQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *EmployeeQuery) Offset(offset int) *EmployeeQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EmployeeQuery) Unique(unique bool) *EmployeeQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *EmployeeQuery) Order(o ...employee.OrderOption) *EmployeeQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryPosition chains the current query on the "position" edge.
func (eq *EmployeeQuery) QueryPosition() *PositionQuery {
	query := (&PositionClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(position.Table, position.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, employee.PositionTable, employee.PositionColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCreatedProjects chains the current query on the "created_projects" edge.
func (eq *EmployeeQuery) QueryCreatedProjects() *ProjectQuery {
	query := (&ProjectClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.CreatedProjectsTable, employee.CreatedProjectsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUpdatedProjects chains the current query on the "updated_projects" edge.
func (eq *EmployeeQuery) QueryUpdatedProjects() *ProjectQuery {
	query := (&ProjectClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.UpdatedProjectsTable, employee.UpdatedProjectsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssignedTasks chains the current query on the "assigned_tasks" edge.
func (eq *EmployeeQuery) QueryAssignedTasks() *TaskQuery {
	query := (&TaskClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, employee.AssignedTasksTable, employee.AssignedTasksPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLeaveApproves chains the current query on the "leave_approves" edge.
func (eq *EmployeeQuery) QueryLeaveApproves() *LeaveApprovalQuery {
	query := (&LeaveApprovalClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(leaveapproval.Table, leaveapproval.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.LeaveApprovesTable, employee.LeaveApprovesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLeaveRequests chains the current query on the "leave_requests" edge.
func (eq *EmployeeQuery) QueryLeaveRequests() *LeaveRequestQuery {
	query := (&LeaveRequestClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(leaverequest.Table, leaverequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.LeaveRequestsTable, employee.LeaveRequestsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaskReports chains the current query on the "task_reports" edge.
func (eq *EmployeeQuery) QueryTaskReports() *TaskReportQuery {
	query := (&TaskReportClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(taskreport.Table, taskreport.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.TaskReportsTable, employee.TaskReportsColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProjects chains the current query on the "projects" edge.
func (eq *EmployeeQuery) QueryProjects() *ProjectQuery {
	query := (&ProjectClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, employee.ProjectsTable, employee.ProjectsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppointmentHistories chains the current query on the "appointment_histories" edge.
func (eq *EmployeeQuery) QueryAppointmentHistories() *AppointmentHistoryQuery {
	query := (&AppointmentHistoryClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(appointmenthistory.Table, appointmenthistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, employee.AppointmentHistoriesTable, employee.AppointmentHistoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryZaloEmployee chains the current query on the "zalo_employee" edge.
func (eq *EmployeeQuery) QueryZaloEmployee() *ZaloEmployeeQuery {
	query := (&ZaloEmployeeClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(employee.Table, employee.FieldID, selector),
			sqlgraph.To(zaloemployee.Table, zaloemployee.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, employee.ZaloEmployeeTable, employee.ZaloEmployeeColumn),
		)
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Employee entity from the query.
// Returns a *NotFoundError when no Employee was found.
func (eq *EmployeeQuery) First(ctx context.Context) (*Employee, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{employee.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EmployeeQuery) FirstX(ctx context.Context) *Employee {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Employee ID from the query.
// Returns a *NotFoundError when no Employee ID was found.
func (eq *EmployeeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{employee.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EmployeeQuery) FirstIDX(ctx context.Context) int {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Employee entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Employee entity is found.
// Returns a *NotFoundError when no Employee entities are found.
func (eq *EmployeeQuery) Only(ctx context.Context) (*Employee, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{employee.Label}
	default:
		return nil, &NotSingularError{employee.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EmployeeQuery) OnlyX(ctx context.Context) *Employee {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Employee ID in the query.
// Returns a *NotSingularError when more than one Employee ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EmployeeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{employee.Label}
	default:
		err = &NotSingularError{employee.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EmployeeQuery) OnlyIDX(ctx context.Context) int {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Employees.
func (eq *EmployeeQuery) All(ctx context.Context) ([]*Employee, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryAll)
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Employee, *EmployeeQuery]()
	return withInterceptors[[]*Employee](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *EmployeeQuery) AllX(ctx context.Context) []*Employee {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Employee IDs.
func (eq *EmployeeQuery) IDs(ctx context.Context) (ids []int, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryIDs)
	if err = eq.Select(employee.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EmployeeQuery) IDsX(ctx context.Context) []int {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EmployeeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryCount)
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*EmployeeQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EmployeeQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EmployeeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryExist)
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EmployeeQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EmployeeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EmployeeQuery) Clone() *EmployeeQuery {
	if eq == nil {
		return nil
	}
	return &EmployeeQuery{
		config:                   eq.config,
		ctx:                      eq.ctx.Clone(),
		order:                    append([]employee.OrderOption{}, eq.order...),
		inters:                   append([]Interceptor{}, eq.inters...),
		predicates:               append([]predicate.Employee{}, eq.predicates...),
		withPosition:             eq.withPosition.Clone(),
		withCreatedProjects:      eq.withCreatedProjects.Clone(),
		withUpdatedProjects:      eq.withUpdatedProjects.Clone(),
		withAssignedTasks:        eq.withAssignedTasks.Clone(),
		withLeaveApproves:        eq.withLeaveApproves.Clone(),
		withLeaveRequests:        eq.withLeaveRequests.Clone(),
		withTaskReports:          eq.withTaskReports.Clone(),
		withProjects:             eq.withProjects.Clone(),
		withAppointmentHistories: eq.withAppointmentHistories.Clone(),
		withZaloEmployee:         eq.withZaloEmployee.Clone(),
		// clone intermediate query.
		sql:  eq.sql.Clone(),
		path: eq.path,
	}
}

// WithPosition tells the query-builder to eager-load the nodes that are connected to
// the "position" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithPosition(opts ...func(*PositionQuery)) *EmployeeQuery {
	query := (&PositionClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withPosition = query
	return eq
}

// WithCreatedProjects tells the query-builder to eager-load the nodes that are connected to
// the "created_projects" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithCreatedProjects(opts ...func(*ProjectQuery)) *EmployeeQuery {
	query := (&ProjectClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withCreatedProjects = query
	return eq
}

// WithUpdatedProjects tells the query-builder to eager-load the nodes that are connected to
// the "updated_projects" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithUpdatedProjects(opts ...func(*ProjectQuery)) *EmployeeQuery {
	query := (&ProjectClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withUpdatedProjects = query
	return eq
}

// WithAssignedTasks tells the query-builder to eager-load the nodes that are connected to
// the "assigned_tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithAssignedTasks(opts ...func(*TaskQuery)) *EmployeeQuery {
	query := (&TaskClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withAssignedTasks = query
	return eq
}

// WithLeaveApproves tells the query-builder to eager-load the nodes that are connected to
// the "leave_approves" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithLeaveApproves(opts ...func(*LeaveApprovalQuery)) *EmployeeQuery {
	query := (&LeaveApprovalClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withLeaveApproves = query
	return eq
}

// WithLeaveRequests tells the query-builder to eager-load the nodes that are connected to
// the "leave_requests" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithLeaveRequests(opts ...func(*LeaveRequestQuery)) *EmployeeQuery {
	query := (&LeaveRequestClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withLeaveRequests = query
	return eq
}

// WithTaskReports tells the query-builder to eager-load the nodes that are connected to
// the "task_reports" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithTaskReports(opts ...func(*TaskReportQuery)) *EmployeeQuery {
	query := (&TaskReportClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withTaskReports = query
	return eq
}

// WithProjects tells the query-builder to eager-load the nodes that are connected to
// the "projects" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithProjects(opts ...func(*ProjectQuery)) *EmployeeQuery {
	query := (&ProjectClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withProjects = query
	return eq
}

// WithAppointmentHistories tells the query-builder to eager-load the nodes that are connected to
// the "appointment_histories" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithAppointmentHistories(opts ...func(*AppointmentHistoryQuery)) *EmployeeQuery {
	query := (&AppointmentHistoryClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withAppointmentHistories = query
	return eq
}

// WithZaloEmployee tells the query-builder to eager-load the nodes that are connected to
// the "zalo_employee" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EmployeeQuery) WithZaloEmployee(opts ...func(*ZaloEmployeeQuery)) *EmployeeQuery {
	query := (&ZaloEmployeeClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withZaloEmployee = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID string `json:"user_id"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Employee.Query().
//		GroupBy(employee.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (eq *EmployeeQuery) GroupBy(field string, fields ...string) *EmployeeGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EmployeeGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = employee.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID string `json:"user_id"`
//	}
//
//	client.Employee.Query().
//		Select(employee.FieldUserID).
//		Scan(ctx, &v)
func (eq *EmployeeQuery) Select(fields ...string) *EmployeeSelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &EmployeeSelect{EmployeeQuery: eq}
	sbuild.label = employee.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EmployeeSelect configured with the given aggregations.
func (eq *EmployeeQuery) Aggregate(fns ...AggregateFunc) *EmployeeSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *EmployeeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !employee.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EmployeeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Employee, error) {
	var (
		nodes       = []*Employee{}
		_spec       = eq.querySpec()
		loadedTypes = [10]bool{
			eq.withPosition != nil,
			eq.withCreatedProjects != nil,
			eq.withUpdatedProjects != nil,
			eq.withAssignedTasks != nil,
			eq.withLeaveApproves != nil,
			eq.withLeaveRequests != nil,
			eq.withTaskReports != nil,
			eq.withProjects != nil,
			eq.withAppointmentHistories != nil,
			eq.withZaloEmployee != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Employee).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Employee{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withPosition; query != nil {
		if err := eq.loadPosition(ctx, query, nodes, nil,
			func(n *Employee, e *Position) { n.Edges.Position = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withCreatedProjects; query != nil {
		if err := eq.loadCreatedProjects(ctx, query, nodes,
			func(n *Employee) { n.Edges.CreatedProjects = []*Project{} },
			func(n *Employee, e *Project) { n.Edges.CreatedProjects = append(n.Edges.CreatedProjects, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withUpdatedProjects; query != nil {
		if err := eq.loadUpdatedProjects(ctx, query, nodes,
			func(n *Employee) { n.Edges.UpdatedProjects = []*Project{} },
			func(n *Employee, e *Project) { n.Edges.UpdatedProjects = append(n.Edges.UpdatedProjects, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withAssignedTasks; query != nil {
		if err := eq.loadAssignedTasks(ctx, query, nodes,
			func(n *Employee) { n.Edges.AssignedTasks = []*Task{} },
			func(n *Employee, e *Task) { n.Edges.AssignedTasks = append(n.Edges.AssignedTasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withLeaveApproves; query != nil {
		if err := eq.loadLeaveApproves(ctx, query, nodes,
			func(n *Employee) { n.Edges.LeaveApproves = []*LeaveApproval{} },
			func(n *Employee, e *LeaveApproval) { n.Edges.LeaveApproves = append(n.Edges.LeaveApproves, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withLeaveRequests; query != nil {
		if err := eq.loadLeaveRequests(ctx, query, nodes,
			func(n *Employee) { n.Edges.LeaveRequests = []*LeaveRequest{} },
			func(n *Employee, e *LeaveRequest) { n.Edges.LeaveRequests = append(n.Edges.LeaveRequests, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withTaskReports; query != nil {
		if err := eq.loadTaskReports(ctx, query, nodes,
			func(n *Employee) { n.Edges.TaskReports = []*TaskReport{} },
			func(n *Employee, e *TaskReport) { n.Edges.TaskReports = append(n.Edges.TaskReports, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withProjects; query != nil {
		if err := eq.loadProjects(ctx, query, nodes,
			func(n *Employee) { n.Edges.Projects = []*Project{} },
			func(n *Employee, e *Project) { n.Edges.Projects = append(n.Edges.Projects, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withAppointmentHistories; query != nil {
		if err := eq.loadAppointmentHistories(ctx, query, nodes,
			func(n *Employee) { n.Edges.AppointmentHistories = []*AppointmentHistory{} },
			func(n *Employee, e *AppointmentHistory) {
				n.Edges.AppointmentHistories = append(n.Edges.AppointmentHistories, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withZaloEmployee; query != nil {
		if err := eq.loadZaloEmployee(ctx, query, nodes, nil,
			func(n *Employee, e *ZaloEmployee) { n.Edges.ZaloEmployee = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EmployeeQuery) loadPosition(ctx context.Context, query *PositionQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *Position)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Employee)
	for i := range nodes {
		fk := nodes[i].PositionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(position.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "position_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EmployeeQuery) loadCreatedProjects(ctx context.Context, query *ProjectQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *Project)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Employee)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(project.FieldCreatorID)
	}
	query.Where(predicate.Project(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(employee.CreatedProjectsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CreatorID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "creator_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EmployeeQuery) loadUpdatedProjects(ctx context.Context, query *ProjectQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *Project)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Employee)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(project.FieldUpdaterID)
	}
	query.Where(predicate.Project(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(employee.UpdatedProjectsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UpdaterID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "updater_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EmployeeQuery) loadAssignedTasks(ctx context.Context, query *TaskQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *Task)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Employee)
	nids := make(map[int]map[*Employee]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(employee.AssignedTasksTable)
		s.Join(joinT).On(s.C(task.FieldID), joinT.C(employee.AssignedTasksPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(employee.AssignedTasksPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(employee.AssignedTasksPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Employee]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Task](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "assigned_tasks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EmployeeQuery) loadLeaveApproves(ctx context.Context, query *LeaveApprovalQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *LeaveApproval)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Employee)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(leaveapproval.FieldReviewerID)
	}
	query.Where(predicate.LeaveApproval(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(employee.LeaveApprovesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ReviewerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "reviewer_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EmployeeQuery) loadLeaveRequests(ctx context.Context, query *LeaveRequestQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *LeaveRequest)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Employee)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(leaverequest.FieldEmployeeID)
	}
	query.Where(predicate.LeaveRequest(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(employee.LeaveRequestsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EmployeeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "employee_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EmployeeQuery) loadTaskReports(ctx context.Context, query *TaskReportQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *TaskReport)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Employee)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(taskreport.FieldReporterID)
	}
	query.Where(predicate.TaskReport(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(employee.TaskReportsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ReporterID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "reporter_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EmployeeQuery) loadProjects(ctx context.Context, query *ProjectQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *Project)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Employee)
	nids := make(map[int]map[*Employee]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(employee.ProjectsTable)
		s.Join(joinT).On(s.C(project.FieldID), joinT.C(employee.ProjectsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(employee.ProjectsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(employee.ProjectsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*Employee]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Project](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "projects" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EmployeeQuery) loadAppointmentHistories(ctx context.Context, query *AppointmentHistoryQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *AppointmentHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Employee)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(appointmenthistory.FieldEmployeeID)
	}
	query.Where(predicate.AppointmentHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(employee.AppointmentHistoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EmployeeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "employee_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (eq *EmployeeQuery) loadZaloEmployee(ctx context.Context, query *ZaloEmployeeQuery, nodes []*Employee, init func(*Employee), assign func(*Employee, *ZaloEmployee)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Employee)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(zaloemployee.FieldEmployeeID)
	}
	query.Where(predicate.ZaloEmployee(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(employee.ZaloEmployeeColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.EmployeeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "employee_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (eq *EmployeeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EmployeeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(employee.Table, employee.Columns, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, employee.FieldID)
		for i := range fields {
			if fields[i] != employee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if eq.withPosition != nil {
			_spec.Node.AddColumnOnce(employee.FieldPositionID)
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EmployeeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(employee.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = employee.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EmployeeGroupBy is the group-by builder for Employee entities.
type EmployeeGroupBy struct {
	selector
	build *EmployeeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EmployeeGroupBy) Aggregate(fns ...AggregateFunc) *EmployeeGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *EmployeeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, ent.OpQueryGroupBy)
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EmployeeQuery, *EmployeeGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *EmployeeGroupBy) sqlScan(ctx context.Context, root *EmployeeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EmployeeSelect is the builder for selecting fields of Employee entities.
type EmployeeSelect struct {
	*EmployeeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *EmployeeSelect) Aggregate(fns ...AggregateFunc) *EmployeeSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *EmployeeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, ent.OpQuerySelect)
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EmployeeQuery, *EmployeeSelect](ctx, es.EmployeeQuery, es, es.inters, v)
}

func (es *EmployeeSelect) sqlScan(ctx context.Context, root *EmployeeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
