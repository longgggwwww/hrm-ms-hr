// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
	"github.com/longgggwwww/hrm-ms-hr/ent/zaloemployee"
)

// ZaloEmployee is the model entity for the ZaloEmployee schema.
type ZaloEmployee struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ZaloUID holds the value of the "zalo_uid" field.
	ZaloUID string `json:"zalo_uid"`
	// EmployeeID holds the value of the "employee_id" field.
	EmployeeID int `json:"employee_id"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ZaloEmployeeQuery when eager-loading is set.
	Edges        ZaloEmployeeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ZaloEmployeeEdges holds the relations/edges for other nodes in the graph.
type ZaloEmployeeEdges struct {
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ZaloEmployeeEdges) EmployeeOrErr() (*Employee, error) {
	if e.Employee != nil {
		return e.Employee, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: employee.Label}
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ZaloEmployee) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case zaloemployee.FieldID, zaloemployee.FieldEmployeeID:
			values[i] = new(sql.NullInt64)
		case zaloemployee.FieldZaloUID:
			values[i] = new(sql.NullString)
		case zaloemployee.FieldCreatedAt, zaloemployee.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ZaloEmployee fields.
func (ze *ZaloEmployee) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case zaloemployee.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ze.ID = int(value.Int64)
		case zaloemployee.FieldZaloUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field zalo_uid", values[i])
			} else if value.Valid {
				ze.ZaloUID = value.String
			}
		case zaloemployee.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				ze.EmployeeID = int(value.Int64)
			}
		case zaloemployee.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ze.CreatedAt = value.Time
			}
		case zaloemployee.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ze.UpdatedAt = value.Time
			}
		default:
			ze.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ZaloEmployee.
// This includes values selected through modifiers, order, etc.
func (ze *ZaloEmployee) Value(name string) (ent.Value, error) {
	return ze.selectValues.Get(name)
}

// QueryEmployee queries the "employee" edge of the ZaloEmployee entity.
func (ze *ZaloEmployee) QueryEmployee() *EmployeeQuery {
	return NewZaloEmployeeClient(ze.config).QueryEmployee(ze)
}

// Update returns a builder for updating this ZaloEmployee.
// Note that you need to call ZaloEmployee.Unwrap() before calling this method if this ZaloEmployee
// was returned from a transaction, and the transaction was committed or rolled back.
func (ze *ZaloEmployee) Update() *ZaloEmployeeUpdateOne {
	return NewZaloEmployeeClient(ze.config).UpdateOne(ze)
}

// Unwrap unwraps the ZaloEmployee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ze *ZaloEmployee) Unwrap() *ZaloEmployee {
	_tx, ok := ze.config.driver.(*txDriver)
	if !ok {
		panic("ent: ZaloEmployee is not a transactional entity")
	}
	ze.config.driver = _tx.drv
	return ze
}

// String implements the fmt.Stringer.
func (ze *ZaloEmployee) String() string {
	var builder strings.Builder
	builder.WriteString("ZaloEmployee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ze.ID))
	builder.WriteString("zalo_uid=")
	builder.WriteString(ze.ZaloUID)
	builder.WriteString(", ")
	builder.WriteString("employee_id=")
	builder.WriteString(fmt.Sprintf("%v", ze.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ze.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ze.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ZaloEmployees is a parsable slice of ZaloEmployee.
type ZaloEmployees []*ZaloEmployee
