// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
	"github.com/longgggwwww/hrm-ms-hr/ent/task"
	"github.com/longgggwwww/hrm-ms-hr/ent/taskreport"
)

// TaskReportUpdate is the builder for updating TaskReport entities.
type TaskReportUpdate struct {
	config
	hooks    []Hook
	mutation *TaskReportMutation
}

// Where appends a list predicates to the TaskReportUpdate builder.
func (tru *TaskReportUpdate) Where(ps ...predicate.TaskReport) *TaskReportUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetContent sets the "content" field.
func (tru *TaskReportUpdate) SetContent(s string) *TaskReportUpdate {
	tru.mutation.SetContent(s)
	return tru
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tru *TaskReportUpdate) SetNillableContent(s *string) *TaskReportUpdate {
	if s != nil {
		tru.SetContent(*s)
	}
	return tru
}

// ClearContent clears the value of the "content" field.
func (tru *TaskReportUpdate) ClearContent() *TaskReportUpdate {
	tru.mutation.ClearContent()
	return tru
}

// SetTaskID sets the "task_id" field.
func (tru *TaskReportUpdate) SetTaskID(i int) *TaskReportUpdate {
	tru.mutation.SetTaskID(i)
	return tru
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (tru *TaskReportUpdate) SetNillableTaskID(i *int) *TaskReportUpdate {
	if i != nil {
		tru.SetTaskID(*i)
	}
	return tru
}

// SetReporterID sets the "reporter_id" field.
func (tru *TaskReportUpdate) SetReporterID(i int) *TaskReportUpdate {
	tru.mutation.SetReporterID(i)
	return tru
}

// SetNillableReporterID sets the "reporter_id" field if the given value is not nil.
func (tru *TaskReportUpdate) SetNillableReporterID(i *int) *TaskReportUpdate {
	if i != nil {
		tru.SetReporterID(*i)
	}
	return tru
}

// SetUpdatedAt sets the "updated_at" field.
func (tru *TaskReportUpdate) SetUpdatedAt(t time.Time) *TaskReportUpdate {
	tru.mutation.SetUpdatedAt(t)
	return tru
}

// SetTask sets the "task" edge to the Task entity.
func (tru *TaskReportUpdate) SetTask(t *Task) *TaskReportUpdate {
	return tru.SetTaskID(t.ID)
}

// SetReporter sets the "reporter" edge to the Employee entity.
func (tru *TaskReportUpdate) SetReporter(e *Employee) *TaskReportUpdate {
	return tru.SetReporterID(e.ID)
}

// Mutation returns the TaskReportMutation object of the builder.
func (tru *TaskReportUpdate) Mutation() *TaskReportMutation {
	return tru.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (tru *TaskReportUpdate) ClearTask() *TaskReportUpdate {
	tru.mutation.ClearTask()
	return tru
}

// ClearReporter clears the "reporter" edge to the Employee entity.
func (tru *TaskReportUpdate) ClearReporter() *TaskReportUpdate {
	tru.mutation.ClearReporter()
	return tru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TaskReportUpdate) Save(ctx context.Context) (int, error) {
	tru.defaults()
	return withHooks(ctx, tru.sqlSave, tru.mutation, tru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TaskReportUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TaskReportUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TaskReportUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tru *TaskReportUpdate) defaults() {
	if _, ok := tru.mutation.UpdatedAt(); !ok {
		v := taskreport.UpdateDefaultUpdatedAt()
		tru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tru *TaskReportUpdate) check() error {
	if tru.mutation.TaskCleared() && len(tru.mutation.TaskIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TaskReport.task"`)
	}
	if tru.mutation.ReporterCleared() && len(tru.mutation.ReporterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TaskReport.reporter"`)
	}
	return nil
}

func (tru *TaskReportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskreport.Table, taskreport.Columns, sqlgraph.NewFieldSpec(taskreport.FieldID, field.TypeInt))
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tru.mutation.Content(); ok {
		_spec.SetField(taskreport.FieldContent, field.TypeString, value)
	}
	if tru.mutation.ContentCleared() {
		_spec.ClearField(taskreport.FieldContent, field.TypeString)
	}
	if value, ok := tru.mutation.UpdatedAt(); ok {
		_spec.SetField(taskreport.FieldUpdatedAt, field.TypeTime, value)
	}
	if tru.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskreport.TaskTable,
			Columns: []string{taskreport.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskreport.TaskTable,
			Columns: []string{taskreport.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tru.mutation.ReporterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskreport.ReporterTable,
			Columns: []string{taskreport.ReporterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.ReporterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskreport.ReporterTable,
			Columns: []string{taskreport.ReporterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tru.mutation.done = true
	return n, nil
}

// TaskReportUpdateOne is the builder for updating a single TaskReport entity.
type TaskReportUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskReportMutation
}

// SetContent sets the "content" field.
func (truo *TaskReportUpdateOne) SetContent(s string) *TaskReportUpdateOne {
	truo.mutation.SetContent(s)
	return truo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (truo *TaskReportUpdateOne) SetNillableContent(s *string) *TaskReportUpdateOne {
	if s != nil {
		truo.SetContent(*s)
	}
	return truo
}

// ClearContent clears the value of the "content" field.
func (truo *TaskReportUpdateOne) ClearContent() *TaskReportUpdateOne {
	truo.mutation.ClearContent()
	return truo
}

// SetTaskID sets the "task_id" field.
func (truo *TaskReportUpdateOne) SetTaskID(i int) *TaskReportUpdateOne {
	truo.mutation.SetTaskID(i)
	return truo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (truo *TaskReportUpdateOne) SetNillableTaskID(i *int) *TaskReportUpdateOne {
	if i != nil {
		truo.SetTaskID(*i)
	}
	return truo
}

// SetReporterID sets the "reporter_id" field.
func (truo *TaskReportUpdateOne) SetReporterID(i int) *TaskReportUpdateOne {
	truo.mutation.SetReporterID(i)
	return truo
}

// SetNillableReporterID sets the "reporter_id" field if the given value is not nil.
func (truo *TaskReportUpdateOne) SetNillableReporterID(i *int) *TaskReportUpdateOne {
	if i != nil {
		truo.SetReporterID(*i)
	}
	return truo
}

// SetUpdatedAt sets the "updated_at" field.
func (truo *TaskReportUpdateOne) SetUpdatedAt(t time.Time) *TaskReportUpdateOne {
	truo.mutation.SetUpdatedAt(t)
	return truo
}

// SetTask sets the "task" edge to the Task entity.
func (truo *TaskReportUpdateOne) SetTask(t *Task) *TaskReportUpdateOne {
	return truo.SetTaskID(t.ID)
}

// SetReporter sets the "reporter" edge to the Employee entity.
func (truo *TaskReportUpdateOne) SetReporter(e *Employee) *TaskReportUpdateOne {
	return truo.SetReporterID(e.ID)
}

// Mutation returns the TaskReportMutation object of the builder.
func (truo *TaskReportUpdateOne) Mutation() *TaskReportMutation {
	return truo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (truo *TaskReportUpdateOne) ClearTask() *TaskReportUpdateOne {
	truo.mutation.ClearTask()
	return truo
}

// ClearReporter clears the "reporter" edge to the Employee entity.
func (truo *TaskReportUpdateOne) ClearReporter() *TaskReportUpdateOne {
	truo.mutation.ClearReporter()
	return truo
}

// Where appends a list predicates to the TaskReportUpdate builder.
func (truo *TaskReportUpdateOne) Where(ps ...predicate.TaskReport) *TaskReportUpdateOne {
	truo.mutation.Where(ps...)
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TaskReportUpdateOne) Select(field string, fields ...string) *TaskReportUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TaskReport entity.
func (truo *TaskReportUpdateOne) Save(ctx context.Context) (*TaskReport, error) {
	truo.defaults()
	return withHooks(ctx, truo.sqlSave, truo.mutation, truo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TaskReportUpdateOne) SaveX(ctx context.Context) *TaskReport {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TaskReportUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TaskReportUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (truo *TaskReportUpdateOne) defaults() {
	if _, ok := truo.mutation.UpdatedAt(); !ok {
		v := taskreport.UpdateDefaultUpdatedAt()
		truo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (truo *TaskReportUpdateOne) check() error {
	if truo.mutation.TaskCleared() && len(truo.mutation.TaskIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TaskReport.task"`)
	}
	if truo.mutation.ReporterCleared() && len(truo.mutation.ReporterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TaskReport.reporter"`)
	}
	return nil
}

func (truo *TaskReportUpdateOne) sqlSave(ctx context.Context) (_node *TaskReport, err error) {
	if err := truo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskreport.Table, taskreport.Columns, sqlgraph.NewFieldSpec(taskreport.FieldID, field.TypeInt))
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskReport.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskreport.FieldID)
		for _, f := range fields {
			if !taskreport.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taskreport.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := truo.mutation.Content(); ok {
		_spec.SetField(taskreport.FieldContent, field.TypeString, value)
	}
	if truo.mutation.ContentCleared() {
		_spec.ClearField(taskreport.FieldContent, field.TypeString)
	}
	if value, ok := truo.mutation.UpdatedAt(); ok {
		_spec.SetField(taskreport.FieldUpdatedAt, field.TypeTime, value)
	}
	if truo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskreport.TaskTable,
			Columns: []string{taskreport.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskreport.TaskTable,
			Columns: []string{taskreport.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if truo.mutation.ReporterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskreport.ReporterTable,
			Columns: []string{taskreport.ReporterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.ReporterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskreport.ReporterTable,
			Columns: []string{taskreport.ReporterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskReport{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskreport.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	truo.mutation.done = true
	return _node, nil
}
