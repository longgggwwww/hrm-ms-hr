// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
	"github.com/longgggwwww/hrm-ms-hr/ent/leaveapproval"
	"github.com/longgggwwww/hrm-ms-hr/ent/leaverequest"
	"github.com/longgggwwww/hrm-ms-hr/ent/organization"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
)

// LeaveRequestUpdate is the builder for updating LeaveRequest entities.
type LeaveRequestUpdate struct {
	config
	hooks    []Hook
	mutation *LeaveRequestMutation
}

// Where appends a list predicates to the LeaveRequestUpdate builder.
func (lru *LeaveRequestUpdate) Where(ps ...predicate.LeaveRequest) *LeaveRequestUpdate {
	lru.mutation.Where(ps...)
	return lru
}

// SetTotalDays sets the "total_days" field.
func (lru *LeaveRequestUpdate) SetTotalDays(f float64) *LeaveRequestUpdate {
	lru.mutation.ResetTotalDays()
	lru.mutation.SetTotalDays(f)
	return lru
}

// SetNillableTotalDays sets the "total_days" field if the given value is not nil.
func (lru *LeaveRequestUpdate) SetNillableTotalDays(f *float64) *LeaveRequestUpdate {
	if f != nil {
		lru.SetTotalDays(*f)
	}
	return lru
}

// AddTotalDays adds f to the "total_days" field.
func (lru *LeaveRequestUpdate) AddTotalDays(f float64) *LeaveRequestUpdate {
	lru.mutation.AddTotalDays(f)
	return lru
}

// SetStartAt sets the "start_at" field.
func (lru *LeaveRequestUpdate) SetStartAt(t time.Time) *LeaveRequestUpdate {
	lru.mutation.SetStartAt(t)
	return lru
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (lru *LeaveRequestUpdate) SetNillableStartAt(t *time.Time) *LeaveRequestUpdate {
	if t != nil {
		lru.SetStartAt(*t)
	}
	return lru
}

// SetEndAt sets the "end_at" field.
func (lru *LeaveRequestUpdate) SetEndAt(t time.Time) *LeaveRequestUpdate {
	lru.mutation.SetEndAt(t)
	return lru
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (lru *LeaveRequestUpdate) SetNillableEndAt(t *time.Time) *LeaveRequestUpdate {
	if t != nil {
		lru.SetEndAt(*t)
	}
	return lru
}

// SetReason sets the "reason" field.
func (lru *LeaveRequestUpdate) SetReason(s string) *LeaveRequestUpdate {
	lru.mutation.SetReason(s)
	return lru
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (lru *LeaveRequestUpdate) SetNillableReason(s *string) *LeaveRequestUpdate {
	if s != nil {
		lru.SetReason(*s)
	}
	return lru
}

// ClearReason clears the value of the "reason" field.
func (lru *LeaveRequestUpdate) ClearReason() *LeaveRequestUpdate {
	lru.mutation.ClearReason()
	return lru
}

// SetType sets the "type" field.
func (lru *LeaveRequestUpdate) SetType(l leaverequest.Type) *LeaveRequestUpdate {
	lru.mutation.SetType(l)
	return lru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (lru *LeaveRequestUpdate) SetNillableType(l *leaverequest.Type) *LeaveRequestUpdate {
	if l != nil {
		lru.SetType(*l)
	}
	return lru
}

// SetStatus sets the "status" field.
func (lru *LeaveRequestUpdate) SetStatus(l leaverequest.Status) *LeaveRequestUpdate {
	lru.mutation.SetStatus(l)
	return lru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lru *LeaveRequestUpdate) SetNillableStatus(l *leaverequest.Status) *LeaveRequestUpdate {
	if l != nil {
		lru.SetStatus(*l)
	}
	return lru
}

// SetOrgID sets the "org_id" field.
func (lru *LeaveRequestUpdate) SetOrgID(i int) *LeaveRequestUpdate {
	lru.mutation.SetOrgID(i)
	return lru
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (lru *LeaveRequestUpdate) SetNillableOrgID(i *int) *LeaveRequestUpdate {
	if i != nil {
		lru.SetOrgID(*i)
	}
	return lru
}

// SetEmployeeID sets the "employee_id" field.
func (lru *LeaveRequestUpdate) SetEmployeeID(i int) *LeaveRequestUpdate {
	lru.mutation.SetEmployeeID(i)
	return lru
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (lru *LeaveRequestUpdate) SetNillableEmployeeID(i *int) *LeaveRequestUpdate {
	if i != nil {
		lru.SetEmployeeID(*i)
	}
	return lru
}

// SetCreatedAt sets the "created_at" field.
func (lru *LeaveRequestUpdate) SetCreatedAt(t time.Time) *LeaveRequestUpdate {
	lru.mutation.SetCreatedAt(t)
	return lru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lru *LeaveRequestUpdate) SetNillableCreatedAt(t *time.Time) *LeaveRequestUpdate {
	if t != nil {
		lru.SetCreatedAt(*t)
	}
	return lru
}

// SetUpdatedAt sets the "updated_at" field.
func (lru *LeaveRequestUpdate) SetUpdatedAt(t time.Time) *LeaveRequestUpdate {
	lru.mutation.SetUpdatedAt(t)
	return lru
}

// AddLeaveApprofeIDs adds the "leave_approves" edge to the LeaveApproval entity by IDs.
func (lru *LeaveRequestUpdate) AddLeaveApprofeIDs(ids ...int) *LeaveRequestUpdate {
	lru.mutation.AddLeaveApprofeIDs(ids...)
	return lru
}

// AddLeaveApproves adds the "leave_approves" edges to the LeaveApproval entity.
func (lru *LeaveRequestUpdate) AddLeaveApproves(l ...*LeaveApproval) *LeaveRequestUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lru.AddLeaveApprofeIDs(ids...)
}

// SetApplicantID sets the "applicant" edge to the Employee entity by ID.
func (lru *LeaveRequestUpdate) SetApplicantID(id int) *LeaveRequestUpdate {
	lru.mutation.SetApplicantID(id)
	return lru
}

// SetApplicant sets the "applicant" edge to the Employee entity.
func (lru *LeaveRequestUpdate) SetApplicant(e *Employee) *LeaveRequestUpdate {
	return lru.SetApplicantID(e.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (lru *LeaveRequestUpdate) SetOrganizationID(id int) *LeaveRequestUpdate {
	lru.mutation.SetOrganizationID(id)
	return lru
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (lru *LeaveRequestUpdate) SetOrganization(o *Organization) *LeaveRequestUpdate {
	return lru.SetOrganizationID(o.ID)
}

// Mutation returns the LeaveRequestMutation object of the builder.
func (lru *LeaveRequestUpdate) Mutation() *LeaveRequestMutation {
	return lru.mutation
}

// ClearLeaveApproves clears all "leave_approves" edges to the LeaveApproval entity.
func (lru *LeaveRequestUpdate) ClearLeaveApproves() *LeaveRequestUpdate {
	lru.mutation.ClearLeaveApproves()
	return lru
}

// RemoveLeaveApprofeIDs removes the "leave_approves" edge to LeaveApproval entities by IDs.
func (lru *LeaveRequestUpdate) RemoveLeaveApprofeIDs(ids ...int) *LeaveRequestUpdate {
	lru.mutation.RemoveLeaveApprofeIDs(ids...)
	return lru
}

// RemoveLeaveApproves removes "leave_approves" edges to LeaveApproval entities.
func (lru *LeaveRequestUpdate) RemoveLeaveApproves(l ...*LeaveApproval) *LeaveRequestUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lru.RemoveLeaveApprofeIDs(ids...)
}

// ClearApplicant clears the "applicant" edge to the Employee entity.
func (lru *LeaveRequestUpdate) ClearApplicant() *LeaveRequestUpdate {
	lru.mutation.ClearApplicant()
	return lru
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (lru *LeaveRequestUpdate) ClearOrganization() *LeaveRequestUpdate {
	lru.mutation.ClearOrganization()
	return lru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lru *LeaveRequestUpdate) Save(ctx context.Context) (int, error) {
	lru.defaults()
	return withHooks(ctx, lru.sqlSave, lru.mutation, lru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lru *LeaveRequestUpdate) SaveX(ctx context.Context) int {
	affected, err := lru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lru *LeaveRequestUpdate) Exec(ctx context.Context) error {
	_, err := lru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lru *LeaveRequestUpdate) ExecX(ctx context.Context) {
	if err := lru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lru *LeaveRequestUpdate) defaults() {
	if _, ok := lru.mutation.UpdatedAt(); !ok {
		v := leaverequest.UpdateDefaultUpdatedAt()
		lru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lru *LeaveRequestUpdate) check() error {
	if v, ok := lru.mutation.GetType(); ok {
		if err := leaverequest.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "LeaveRequest.type": %w`, err)}
		}
	}
	if v, ok := lru.mutation.Status(); ok {
		if err := leaverequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "LeaveRequest.status": %w`, err)}
		}
	}
	if lru.mutation.ApplicantCleared() && len(lru.mutation.ApplicantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LeaveRequest.applicant"`)
	}
	if lru.mutation.OrganizationCleared() && len(lru.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LeaveRequest.organization"`)
	}
	return nil
}

func (lru *LeaveRequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(leaverequest.Table, leaverequest.Columns, sqlgraph.NewFieldSpec(leaverequest.FieldID, field.TypeInt))
	if ps := lru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lru.mutation.TotalDays(); ok {
		_spec.SetField(leaverequest.FieldTotalDays, field.TypeFloat64, value)
	}
	if value, ok := lru.mutation.AddedTotalDays(); ok {
		_spec.AddField(leaverequest.FieldTotalDays, field.TypeFloat64, value)
	}
	if value, ok := lru.mutation.StartAt(); ok {
		_spec.SetField(leaverequest.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := lru.mutation.EndAt(); ok {
		_spec.SetField(leaverequest.FieldEndAt, field.TypeTime, value)
	}
	if value, ok := lru.mutation.Reason(); ok {
		_spec.SetField(leaverequest.FieldReason, field.TypeString, value)
	}
	if lru.mutation.ReasonCleared() {
		_spec.ClearField(leaverequest.FieldReason, field.TypeString)
	}
	if value, ok := lru.mutation.GetType(); ok {
		_spec.SetField(leaverequest.FieldType, field.TypeEnum, value)
	}
	if value, ok := lru.mutation.Status(); ok {
		_spec.SetField(leaverequest.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := lru.mutation.CreatedAt(); ok {
		_spec.SetField(leaverequest.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := lru.mutation.UpdatedAt(); ok {
		_spec.SetField(leaverequest.FieldUpdatedAt, field.TypeTime, value)
	}
	if lru.mutation.LeaveApprovesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   leaverequest.LeaveApprovesTable,
			Columns: []string{leaverequest.LeaveApprovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaveapproval.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.RemovedLeaveApprovesIDs(); len(nodes) > 0 && !lru.mutation.LeaveApprovesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   leaverequest.LeaveApprovesTable,
			Columns: []string{leaverequest.LeaveApprovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaveapproval.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.LeaveApprovesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   leaverequest.LeaveApprovesTable,
			Columns: []string{leaverequest.LeaveApprovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaveapproval.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lru.mutation.ApplicantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaverequest.ApplicantTable,
			Columns: []string{leaverequest.ApplicantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.ApplicantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaverequest.ApplicantTable,
			Columns: []string{leaverequest.ApplicantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lru.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaverequest.OrganizationTable,
			Columns: []string{leaverequest.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lru.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaverequest.OrganizationTable,
			Columns: []string{leaverequest.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{leaverequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lru.mutation.done = true
	return n, nil
}

// LeaveRequestUpdateOne is the builder for updating a single LeaveRequest entity.
type LeaveRequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LeaveRequestMutation
}

// SetTotalDays sets the "total_days" field.
func (lruo *LeaveRequestUpdateOne) SetTotalDays(f float64) *LeaveRequestUpdateOne {
	lruo.mutation.ResetTotalDays()
	lruo.mutation.SetTotalDays(f)
	return lruo
}

// SetNillableTotalDays sets the "total_days" field if the given value is not nil.
func (lruo *LeaveRequestUpdateOne) SetNillableTotalDays(f *float64) *LeaveRequestUpdateOne {
	if f != nil {
		lruo.SetTotalDays(*f)
	}
	return lruo
}

// AddTotalDays adds f to the "total_days" field.
func (lruo *LeaveRequestUpdateOne) AddTotalDays(f float64) *LeaveRequestUpdateOne {
	lruo.mutation.AddTotalDays(f)
	return lruo
}

// SetStartAt sets the "start_at" field.
func (lruo *LeaveRequestUpdateOne) SetStartAt(t time.Time) *LeaveRequestUpdateOne {
	lruo.mutation.SetStartAt(t)
	return lruo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (lruo *LeaveRequestUpdateOne) SetNillableStartAt(t *time.Time) *LeaveRequestUpdateOne {
	if t != nil {
		lruo.SetStartAt(*t)
	}
	return lruo
}

// SetEndAt sets the "end_at" field.
func (lruo *LeaveRequestUpdateOne) SetEndAt(t time.Time) *LeaveRequestUpdateOne {
	lruo.mutation.SetEndAt(t)
	return lruo
}

// SetNillableEndAt sets the "end_at" field if the given value is not nil.
func (lruo *LeaveRequestUpdateOne) SetNillableEndAt(t *time.Time) *LeaveRequestUpdateOne {
	if t != nil {
		lruo.SetEndAt(*t)
	}
	return lruo
}

// SetReason sets the "reason" field.
func (lruo *LeaveRequestUpdateOne) SetReason(s string) *LeaveRequestUpdateOne {
	lruo.mutation.SetReason(s)
	return lruo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (lruo *LeaveRequestUpdateOne) SetNillableReason(s *string) *LeaveRequestUpdateOne {
	if s != nil {
		lruo.SetReason(*s)
	}
	return lruo
}

// ClearReason clears the value of the "reason" field.
func (lruo *LeaveRequestUpdateOne) ClearReason() *LeaveRequestUpdateOne {
	lruo.mutation.ClearReason()
	return lruo
}

// SetType sets the "type" field.
func (lruo *LeaveRequestUpdateOne) SetType(l leaverequest.Type) *LeaveRequestUpdateOne {
	lruo.mutation.SetType(l)
	return lruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (lruo *LeaveRequestUpdateOne) SetNillableType(l *leaverequest.Type) *LeaveRequestUpdateOne {
	if l != nil {
		lruo.SetType(*l)
	}
	return lruo
}

// SetStatus sets the "status" field.
func (lruo *LeaveRequestUpdateOne) SetStatus(l leaverequest.Status) *LeaveRequestUpdateOne {
	lruo.mutation.SetStatus(l)
	return lruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lruo *LeaveRequestUpdateOne) SetNillableStatus(l *leaverequest.Status) *LeaveRequestUpdateOne {
	if l != nil {
		lruo.SetStatus(*l)
	}
	return lruo
}

// SetOrgID sets the "org_id" field.
func (lruo *LeaveRequestUpdateOne) SetOrgID(i int) *LeaveRequestUpdateOne {
	lruo.mutation.SetOrgID(i)
	return lruo
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (lruo *LeaveRequestUpdateOne) SetNillableOrgID(i *int) *LeaveRequestUpdateOne {
	if i != nil {
		lruo.SetOrgID(*i)
	}
	return lruo
}

// SetEmployeeID sets the "employee_id" field.
func (lruo *LeaveRequestUpdateOne) SetEmployeeID(i int) *LeaveRequestUpdateOne {
	lruo.mutation.SetEmployeeID(i)
	return lruo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (lruo *LeaveRequestUpdateOne) SetNillableEmployeeID(i *int) *LeaveRequestUpdateOne {
	if i != nil {
		lruo.SetEmployeeID(*i)
	}
	return lruo
}

// SetCreatedAt sets the "created_at" field.
func (lruo *LeaveRequestUpdateOne) SetCreatedAt(t time.Time) *LeaveRequestUpdateOne {
	lruo.mutation.SetCreatedAt(t)
	return lruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lruo *LeaveRequestUpdateOne) SetNillableCreatedAt(t *time.Time) *LeaveRequestUpdateOne {
	if t != nil {
		lruo.SetCreatedAt(*t)
	}
	return lruo
}

// SetUpdatedAt sets the "updated_at" field.
func (lruo *LeaveRequestUpdateOne) SetUpdatedAt(t time.Time) *LeaveRequestUpdateOne {
	lruo.mutation.SetUpdatedAt(t)
	return lruo
}

// AddLeaveApprofeIDs adds the "leave_approves" edge to the LeaveApproval entity by IDs.
func (lruo *LeaveRequestUpdateOne) AddLeaveApprofeIDs(ids ...int) *LeaveRequestUpdateOne {
	lruo.mutation.AddLeaveApprofeIDs(ids...)
	return lruo
}

// AddLeaveApproves adds the "leave_approves" edges to the LeaveApproval entity.
func (lruo *LeaveRequestUpdateOne) AddLeaveApproves(l ...*LeaveApproval) *LeaveRequestUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lruo.AddLeaveApprofeIDs(ids...)
}

// SetApplicantID sets the "applicant" edge to the Employee entity by ID.
func (lruo *LeaveRequestUpdateOne) SetApplicantID(id int) *LeaveRequestUpdateOne {
	lruo.mutation.SetApplicantID(id)
	return lruo
}

// SetApplicant sets the "applicant" edge to the Employee entity.
func (lruo *LeaveRequestUpdateOne) SetApplicant(e *Employee) *LeaveRequestUpdateOne {
	return lruo.SetApplicantID(e.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (lruo *LeaveRequestUpdateOne) SetOrganizationID(id int) *LeaveRequestUpdateOne {
	lruo.mutation.SetOrganizationID(id)
	return lruo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (lruo *LeaveRequestUpdateOne) SetOrganization(o *Organization) *LeaveRequestUpdateOne {
	return lruo.SetOrganizationID(o.ID)
}

// Mutation returns the LeaveRequestMutation object of the builder.
func (lruo *LeaveRequestUpdateOne) Mutation() *LeaveRequestMutation {
	return lruo.mutation
}

// ClearLeaveApproves clears all "leave_approves" edges to the LeaveApproval entity.
func (lruo *LeaveRequestUpdateOne) ClearLeaveApproves() *LeaveRequestUpdateOne {
	lruo.mutation.ClearLeaveApproves()
	return lruo
}

// RemoveLeaveApprofeIDs removes the "leave_approves" edge to LeaveApproval entities by IDs.
func (lruo *LeaveRequestUpdateOne) RemoveLeaveApprofeIDs(ids ...int) *LeaveRequestUpdateOne {
	lruo.mutation.RemoveLeaveApprofeIDs(ids...)
	return lruo
}

// RemoveLeaveApproves removes "leave_approves" edges to LeaveApproval entities.
func (lruo *LeaveRequestUpdateOne) RemoveLeaveApproves(l ...*LeaveApproval) *LeaveRequestUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return lruo.RemoveLeaveApprofeIDs(ids...)
}

// ClearApplicant clears the "applicant" edge to the Employee entity.
func (lruo *LeaveRequestUpdateOne) ClearApplicant() *LeaveRequestUpdateOne {
	lruo.mutation.ClearApplicant()
	return lruo
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (lruo *LeaveRequestUpdateOne) ClearOrganization() *LeaveRequestUpdateOne {
	lruo.mutation.ClearOrganization()
	return lruo
}

// Where appends a list predicates to the LeaveRequestUpdate builder.
func (lruo *LeaveRequestUpdateOne) Where(ps ...predicate.LeaveRequest) *LeaveRequestUpdateOne {
	lruo.mutation.Where(ps...)
	return lruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lruo *LeaveRequestUpdateOne) Select(field string, fields ...string) *LeaveRequestUpdateOne {
	lruo.fields = append([]string{field}, fields...)
	return lruo
}

// Save executes the query and returns the updated LeaveRequest entity.
func (lruo *LeaveRequestUpdateOne) Save(ctx context.Context) (*LeaveRequest, error) {
	lruo.defaults()
	return withHooks(ctx, lruo.sqlSave, lruo.mutation, lruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lruo *LeaveRequestUpdateOne) SaveX(ctx context.Context) *LeaveRequest {
	node, err := lruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lruo *LeaveRequestUpdateOne) Exec(ctx context.Context) error {
	_, err := lruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lruo *LeaveRequestUpdateOne) ExecX(ctx context.Context) {
	if err := lruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lruo *LeaveRequestUpdateOne) defaults() {
	if _, ok := lruo.mutation.UpdatedAt(); !ok {
		v := leaverequest.UpdateDefaultUpdatedAt()
		lruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lruo *LeaveRequestUpdateOne) check() error {
	if v, ok := lruo.mutation.GetType(); ok {
		if err := leaverequest.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "LeaveRequest.type": %w`, err)}
		}
	}
	if v, ok := lruo.mutation.Status(); ok {
		if err := leaverequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "LeaveRequest.status": %w`, err)}
		}
	}
	if lruo.mutation.ApplicantCleared() && len(lruo.mutation.ApplicantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LeaveRequest.applicant"`)
	}
	if lruo.mutation.OrganizationCleared() && len(lruo.mutation.OrganizationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "LeaveRequest.organization"`)
	}
	return nil
}

func (lruo *LeaveRequestUpdateOne) sqlSave(ctx context.Context) (_node *LeaveRequest, err error) {
	if err := lruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(leaverequest.Table, leaverequest.Columns, sqlgraph.NewFieldSpec(leaverequest.FieldID, field.TypeInt))
	id, ok := lruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LeaveRequest.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, leaverequest.FieldID)
		for _, f := range fields {
			if !leaverequest.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != leaverequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lruo.mutation.TotalDays(); ok {
		_spec.SetField(leaverequest.FieldTotalDays, field.TypeFloat64, value)
	}
	if value, ok := lruo.mutation.AddedTotalDays(); ok {
		_spec.AddField(leaverequest.FieldTotalDays, field.TypeFloat64, value)
	}
	if value, ok := lruo.mutation.StartAt(); ok {
		_spec.SetField(leaverequest.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := lruo.mutation.EndAt(); ok {
		_spec.SetField(leaverequest.FieldEndAt, field.TypeTime, value)
	}
	if value, ok := lruo.mutation.Reason(); ok {
		_spec.SetField(leaverequest.FieldReason, field.TypeString, value)
	}
	if lruo.mutation.ReasonCleared() {
		_spec.ClearField(leaverequest.FieldReason, field.TypeString)
	}
	if value, ok := lruo.mutation.GetType(); ok {
		_spec.SetField(leaverequest.FieldType, field.TypeEnum, value)
	}
	if value, ok := lruo.mutation.Status(); ok {
		_spec.SetField(leaverequest.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := lruo.mutation.CreatedAt(); ok {
		_spec.SetField(leaverequest.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := lruo.mutation.UpdatedAt(); ok {
		_spec.SetField(leaverequest.FieldUpdatedAt, field.TypeTime, value)
	}
	if lruo.mutation.LeaveApprovesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   leaverequest.LeaveApprovesTable,
			Columns: []string{leaverequest.LeaveApprovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaveapproval.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.RemovedLeaveApprovesIDs(); len(nodes) > 0 && !lruo.mutation.LeaveApprovesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   leaverequest.LeaveApprovesTable,
			Columns: []string{leaverequest.LeaveApprovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaveapproval.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.LeaveApprovesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   leaverequest.LeaveApprovesTable,
			Columns: []string{leaverequest.LeaveApprovesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaveapproval.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lruo.mutation.ApplicantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaverequest.ApplicantTable,
			Columns: []string{leaverequest.ApplicantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.ApplicantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaverequest.ApplicantTable,
			Columns: []string{leaverequest.ApplicantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lruo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaverequest.OrganizationTable,
			Columns: []string{leaverequest.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lruo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   leaverequest.OrganizationTable,
			Columns: []string{leaverequest.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &LeaveRequest{config: lruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{leaverequest.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lruo.mutation.done = true
	return _node, nil
}
