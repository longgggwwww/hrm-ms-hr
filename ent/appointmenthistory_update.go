// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/appointmenthistory"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
)

// AppointmentHistoryUpdate is the builder for updating AppointmentHistory entities.
type AppointmentHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *AppointmentHistoryMutation
}

// Where appends a list predicates to the AppointmentHistoryUpdate builder.
func (ahu *AppointmentHistoryUpdate) Where(ps ...predicate.AppointmentHistory) *AppointmentHistoryUpdate {
	ahu.mutation.Where(ps...)
	return ahu
}

// SetEmployeeID sets the "employee_id" field.
func (ahu *AppointmentHistoryUpdate) SetEmployeeID(i int) *AppointmentHistoryUpdate {
	ahu.mutation.SetEmployeeID(i)
	return ahu
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (ahu *AppointmentHistoryUpdate) SetNillableEmployeeID(i *int) *AppointmentHistoryUpdate {
	if i != nil {
		ahu.SetEmployeeID(*i)
	}
	return ahu
}

// SetPositionName sets the "position_name" field.
func (ahu *AppointmentHistoryUpdate) SetPositionName(s string) *AppointmentHistoryUpdate {
	ahu.mutation.SetPositionName(s)
	return ahu
}

// SetNillablePositionName sets the "position_name" field if the given value is not nil.
func (ahu *AppointmentHistoryUpdate) SetNillablePositionName(s *string) *AppointmentHistoryUpdate {
	if s != nil {
		ahu.SetPositionName(*s)
	}
	return ahu
}

// SetJoiningAt sets the "joining_at" field.
func (ahu *AppointmentHistoryUpdate) SetJoiningAt(t time.Time) *AppointmentHistoryUpdate {
	ahu.mutation.SetJoiningAt(t)
	return ahu
}

// SetNillableJoiningAt sets the "joining_at" field if the given value is not nil.
func (ahu *AppointmentHistoryUpdate) SetNillableJoiningAt(t *time.Time) *AppointmentHistoryUpdate {
	if t != nil {
		ahu.SetJoiningAt(*t)
	}
	return ahu
}

// SetDescription sets the "description" field.
func (ahu *AppointmentHistoryUpdate) SetDescription(s string) *AppointmentHistoryUpdate {
	ahu.mutation.SetDescription(s)
	return ahu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ahu *AppointmentHistoryUpdate) SetNillableDescription(s *string) *AppointmentHistoryUpdate {
	if s != nil {
		ahu.SetDescription(*s)
	}
	return ahu
}

// ClearDescription clears the value of the "description" field.
func (ahu *AppointmentHistoryUpdate) ClearDescription() *AppointmentHistoryUpdate {
	ahu.mutation.ClearDescription()
	return ahu
}

// SetAttachmentUrls sets the "attachment_urls" field.
func (ahu *AppointmentHistoryUpdate) SetAttachmentUrls(s []string) *AppointmentHistoryUpdate {
	ahu.mutation.SetAttachmentUrls(s)
	return ahu
}

// AppendAttachmentUrls appends s to the "attachment_urls" field.
func (ahu *AppointmentHistoryUpdate) AppendAttachmentUrls(s []string) *AppointmentHistoryUpdate {
	ahu.mutation.AppendAttachmentUrls(s)
	return ahu
}

// ClearAttachmentUrls clears the value of the "attachment_urls" field.
func (ahu *AppointmentHistoryUpdate) ClearAttachmentUrls() *AppointmentHistoryUpdate {
	ahu.mutation.ClearAttachmentUrls()
	return ahu
}

// SetCreatedAt sets the "created_at" field.
func (ahu *AppointmentHistoryUpdate) SetCreatedAt(t time.Time) *AppointmentHistoryUpdate {
	ahu.mutation.SetCreatedAt(t)
	return ahu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ahu *AppointmentHistoryUpdate) SetNillableCreatedAt(t *time.Time) *AppointmentHistoryUpdate {
	if t != nil {
		ahu.SetCreatedAt(*t)
	}
	return ahu
}

// SetUpdatedAt sets the "updated_at" field.
func (ahu *AppointmentHistoryUpdate) SetUpdatedAt(t time.Time) *AppointmentHistoryUpdate {
	ahu.mutation.SetUpdatedAt(t)
	return ahu
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (ahu *AppointmentHistoryUpdate) SetEmployee(e *Employee) *AppointmentHistoryUpdate {
	return ahu.SetEmployeeID(e.ID)
}

// Mutation returns the AppointmentHistoryMutation object of the builder.
func (ahu *AppointmentHistoryUpdate) Mutation() *AppointmentHistoryMutation {
	return ahu.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (ahu *AppointmentHistoryUpdate) ClearEmployee() *AppointmentHistoryUpdate {
	ahu.mutation.ClearEmployee()
	return ahu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ahu *AppointmentHistoryUpdate) Save(ctx context.Context) (int, error) {
	ahu.defaults()
	return withHooks(ctx, ahu.sqlSave, ahu.mutation, ahu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahu *AppointmentHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ahu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ahu *AppointmentHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ahu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahu *AppointmentHistoryUpdate) ExecX(ctx context.Context) {
	if err := ahu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ahu *AppointmentHistoryUpdate) defaults() {
	if _, ok := ahu.mutation.UpdatedAt(); !ok {
		v := appointmenthistory.UpdateDefaultUpdatedAt()
		ahu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ahu *AppointmentHistoryUpdate) check() error {
	if ahu.mutation.EmployeeCleared() && len(ahu.mutation.EmployeeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppointmentHistory.employee"`)
	}
	return nil
}

func (ahu *AppointmentHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ahu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(appointmenthistory.Table, appointmenthistory.Columns, sqlgraph.NewFieldSpec(appointmenthistory.FieldID, field.TypeInt))
	if ps := ahu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ahu.mutation.PositionName(); ok {
		_spec.SetField(appointmenthistory.FieldPositionName, field.TypeString, value)
	}
	if value, ok := ahu.mutation.JoiningAt(); ok {
		_spec.SetField(appointmenthistory.FieldJoiningAt, field.TypeTime, value)
	}
	if value, ok := ahu.mutation.Description(); ok {
		_spec.SetField(appointmenthistory.FieldDescription, field.TypeString, value)
	}
	if ahu.mutation.DescriptionCleared() {
		_spec.ClearField(appointmenthistory.FieldDescription, field.TypeString)
	}
	if value, ok := ahu.mutation.AttachmentUrls(); ok {
		_spec.SetField(appointmenthistory.FieldAttachmentUrls, field.TypeJSON, value)
	}
	if value, ok := ahu.mutation.AppendedAttachmentUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appointmenthistory.FieldAttachmentUrls, value)
		})
	}
	if ahu.mutation.AttachmentUrlsCleared() {
		_spec.ClearField(appointmenthistory.FieldAttachmentUrls, field.TypeJSON)
	}
	if value, ok := ahu.mutation.CreatedAt(); ok {
		_spec.SetField(appointmenthistory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ahu.mutation.UpdatedAt(); ok {
		_spec.SetField(appointmenthistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if ahu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmenthistory.EmployeeTable,
			Columns: []string{appointmenthistory.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ahu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmenthistory.EmployeeTable,
			Columns: []string{appointmenthistory.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ahu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointmenthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ahu.mutation.done = true
	return n, nil
}

// AppointmentHistoryUpdateOne is the builder for updating a single AppointmentHistory entity.
type AppointmentHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppointmentHistoryMutation
}

// SetEmployeeID sets the "employee_id" field.
func (ahuo *AppointmentHistoryUpdateOne) SetEmployeeID(i int) *AppointmentHistoryUpdateOne {
	ahuo.mutation.SetEmployeeID(i)
	return ahuo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (ahuo *AppointmentHistoryUpdateOne) SetNillableEmployeeID(i *int) *AppointmentHistoryUpdateOne {
	if i != nil {
		ahuo.SetEmployeeID(*i)
	}
	return ahuo
}

// SetPositionName sets the "position_name" field.
func (ahuo *AppointmentHistoryUpdateOne) SetPositionName(s string) *AppointmentHistoryUpdateOne {
	ahuo.mutation.SetPositionName(s)
	return ahuo
}

// SetNillablePositionName sets the "position_name" field if the given value is not nil.
func (ahuo *AppointmentHistoryUpdateOne) SetNillablePositionName(s *string) *AppointmentHistoryUpdateOne {
	if s != nil {
		ahuo.SetPositionName(*s)
	}
	return ahuo
}

// SetJoiningAt sets the "joining_at" field.
func (ahuo *AppointmentHistoryUpdateOne) SetJoiningAt(t time.Time) *AppointmentHistoryUpdateOne {
	ahuo.mutation.SetJoiningAt(t)
	return ahuo
}

// SetNillableJoiningAt sets the "joining_at" field if the given value is not nil.
func (ahuo *AppointmentHistoryUpdateOne) SetNillableJoiningAt(t *time.Time) *AppointmentHistoryUpdateOne {
	if t != nil {
		ahuo.SetJoiningAt(*t)
	}
	return ahuo
}

// SetDescription sets the "description" field.
func (ahuo *AppointmentHistoryUpdateOne) SetDescription(s string) *AppointmentHistoryUpdateOne {
	ahuo.mutation.SetDescription(s)
	return ahuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ahuo *AppointmentHistoryUpdateOne) SetNillableDescription(s *string) *AppointmentHistoryUpdateOne {
	if s != nil {
		ahuo.SetDescription(*s)
	}
	return ahuo
}

// ClearDescription clears the value of the "description" field.
func (ahuo *AppointmentHistoryUpdateOne) ClearDescription() *AppointmentHistoryUpdateOne {
	ahuo.mutation.ClearDescription()
	return ahuo
}

// SetAttachmentUrls sets the "attachment_urls" field.
func (ahuo *AppointmentHistoryUpdateOne) SetAttachmentUrls(s []string) *AppointmentHistoryUpdateOne {
	ahuo.mutation.SetAttachmentUrls(s)
	return ahuo
}

// AppendAttachmentUrls appends s to the "attachment_urls" field.
func (ahuo *AppointmentHistoryUpdateOne) AppendAttachmentUrls(s []string) *AppointmentHistoryUpdateOne {
	ahuo.mutation.AppendAttachmentUrls(s)
	return ahuo
}

// ClearAttachmentUrls clears the value of the "attachment_urls" field.
func (ahuo *AppointmentHistoryUpdateOne) ClearAttachmentUrls() *AppointmentHistoryUpdateOne {
	ahuo.mutation.ClearAttachmentUrls()
	return ahuo
}

// SetCreatedAt sets the "created_at" field.
func (ahuo *AppointmentHistoryUpdateOne) SetCreatedAt(t time.Time) *AppointmentHistoryUpdateOne {
	ahuo.mutation.SetCreatedAt(t)
	return ahuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ahuo *AppointmentHistoryUpdateOne) SetNillableCreatedAt(t *time.Time) *AppointmentHistoryUpdateOne {
	if t != nil {
		ahuo.SetCreatedAt(*t)
	}
	return ahuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ahuo *AppointmentHistoryUpdateOne) SetUpdatedAt(t time.Time) *AppointmentHistoryUpdateOne {
	ahuo.mutation.SetUpdatedAt(t)
	return ahuo
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (ahuo *AppointmentHistoryUpdateOne) SetEmployee(e *Employee) *AppointmentHistoryUpdateOne {
	return ahuo.SetEmployeeID(e.ID)
}

// Mutation returns the AppointmentHistoryMutation object of the builder.
func (ahuo *AppointmentHistoryUpdateOne) Mutation() *AppointmentHistoryMutation {
	return ahuo.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (ahuo *AppointmentHistoryUpdateOne) ClearEmployee() *AppointmentHistoryUpdateOne {
	ahuo.mutation.ClearEmployee()
	return ahuo
}

// Where appends a list predicates to the AppointmentHistoryUpdate builder.
func (ahuo *AppointmentHistoryUpdateOne) Where(ps ...predicate.AppointmentHistory) *AppointmentHistoryUpdateOne {
	ahuo.mutation.Where(ps...)
	return ahuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ahuo *AppointmentHistoryUpdateOne) Select(field string, fields ...string) *AppointmentHistoryUpdateOne {
	ahuo.fields = append([]string{field}, fields...)
	return ahuo
}

// Save executes the query and returns the updated AppointmentHistory entity.
func (ahuo *AppointmentHistoryUpdateOne) Save(ctx context.Context) (*AppointmentHistory, error) {
	ahuo.defaults()
	return withHooks(ctx, ahuo.sqlSave, ahuo.mutation, ahuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahuo *AppointmentHistoryUpdateOne) SaveX(ctx context.Context) *AppointmentHistory {
	node, err := ahuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ahuo *AppointmentHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ahuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahuo *AppointmentHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ahuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ahuo *AppointmentHistoryUpdateOne) defaults() {
	if _, ok := ahuo.mutation.UpdatedAt(); !ok {
		v := appointmenthistory.UpdateDefaultUpdatedAt()
		ahuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ahuo *AppointmentHistoryUpdateOne) check() error {
	if ahuo.mutation.EmployeeCleared() && len(ahuo.mutation.EmployeeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppointmentHistory.employee"`)
	}
	return nil
}

func (ahuo *AppointmentHistoryUpdateOne) sqlSave(ctx context.Context) (_node *AppointmentHistory, err error) {
	if err := ahuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appointmenthistory.Table, appointmenthistory.Columns, sqlgraph.NewFieldSpec(appointmenthistory.FieldID, field.TypeInt))
	id, ok := ahuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppointmentHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ahuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appointmenthistory.FieldID)
		for _, f := range fields {
			if !appointmenthistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appointmenthistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ahuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ahuo.mutation.PositionName(); ok {
		_spec.SetField(appointmenthistory.FieldPositionName, field.TypeString, value)
	}
	if value, ok := ahuo.mutation.JoiningAt(); ok {
		_spec.SetField(appointmenthistory.FieldJoiningAt, field.TypeTime, value)
	}
	if value, ok := ahuo.mutation.Description(); ok {
		_spec.SetField(appointmenthistory.FieldDescription, field.TypeString, value)
	}
	if ahuo.mutation.DescriptionCleared() {
		_spec.ClearField(appointmenthistory.FieldDescription, field.TypeString)
	}
	if value, ok := ahuo.mutation.AttachmentUrls(); ok {
		_spec.SetField(appointmenthistory.FieldAttachmentUrls, field.TypeJSON, value)
	}
	if value, ok := ahuo.mutation.AppendedAttachmentUrls(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, appointmenthistory.FieldAttachmentUrls, value)
		})
	}
	if ahuo.mutation.AttachmentUrlsCleared() {
		_spec.ClearField(appointmenthistory.FieldAttachmentUrls, field.TypeJSON)
	}
	if value, ok := ahuo.mutation.CreatedAt(); ok {
		_spec.SetField(appointmenthistory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ahuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appointmenthistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if ahuo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmenthistory.EmployeeTable,
			Columns: []string{appointmenthistory.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ahuo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmenthistory.EmployeeTable,
			Columns: []string{appointmenthistory.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppointmentHistory{config: ahuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ahuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointmenthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ahuo.mutation.done = true
	return _node, nil
}
