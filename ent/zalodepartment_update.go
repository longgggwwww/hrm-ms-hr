// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/department"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
	"github.com/longgggwwww/hrm-ms-hr/ent/zalodepartment"
)

// ZaloDepartmentUpdate is the builder for updating ZaloDepartment entities.
type ZaloDepartmentUpdate struct {
	config
	hooks    []Hook
	mutation *ZaloDepartmentMutation
}

// Where appends a list predicates to the ZaloDepartmentUpdate builder.
func (zdu *ZaloDepartmentUpdate) Where(ps ...predicate.ZaloDepartment) *ZaloDepartmentUpdate {
	zdu.mutation.Where(ps...)
	return zdu
}

// SetGroupID sets the "group_id" field.
func (zdu *ZaloDepartmentUpdate) SetGroupID(s string) *ZaloDepartmentUpdate {
	zdu.mutation.SetGroupID(s)
	return zdu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (zdu *ZaloDepartmentUpdate) SetNillableGroupID(s *string) *ZaloDepartmentUpdate {
	if s != nil {
		zdu.SetGroupID(*s)
	}
	return zdu
}

// SetDepartmentID sets the "department_id" field.
func (zdu *ZaloDepartmentUpdate) SetDepartmentID(i int) *ZaloDepartmentUpdate {
	zdu.mutation.SetDepartmentID(i)
	return zdu
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (zdu *ZaloDepartmentUpdate) SetNillableDepartmentID(i *int) *ZaloDepartmentUpdate {
	if i != nil {
		zdu.SetDepartmentID(*i)
	}
	return zdu
}

// SetUpdatedAt sets the "updated_at" field.
func (zdu *ZaloDepartmentUpdate) SetUpdatedAt(t time.Time) *ZaloDepartmentUpdate {
	zdu.mutation.SetUpdatedAt(t)
	return zdu
}

// SetDepartment sets the "department" edge to the Department entity.
func (zdu *ZaloDepartmentUpdate) SetDepartment(d *Department) *ZaloDepartmentUpdate {
	return zdu.SetDepartmentID(d.ID)
}

// Mutation returns the ZaloDepartmentMutation object of the builder.
func (zdu *ZaloDepartmentUpdate) Mutation() *ZaloDepartmentMutation {
	return zdu.mutation
}

// ClearDepartment clears the "department" edge to the Department entity.
func (zdu *ZaloDepartmentUpdate) ClearDepartment() *ZaloDepartmentUpdate {
	zdu.mutation.ClearDepartment()
	return zdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (zdu *ZaloDepartmentUpdate) Save(ctx context.Context) (int, error) {
	zdu.defaults()
	return withHooks(ctx, zdu.sqlSave, zdu.mutation, zdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (zdu *ZaloDepartmentUpdate) SaveX(ctx context.Context) int {
	affected, err := zdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (zdu *ZaloDepartmentUpdate) Exec(ctx context.Context) error {
	_, err := zdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (zdu *ZaloDepartmentUpdate) ExecX(ctx context.Context) {
	if err := zdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (zdu *ZaloDepartmentUpdate) defaults() {
	if _, ok := zdu.mutation.UpdatedAt(); !ok {
		v := zalodepartment.UpdateDefaultUpdatedAt()
		zdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (zdu *ZaloDepartmentUpdate) check() error {
	if v, ok := zdu.mutation.GroupID(); ok {
		if err := zalodepartment.GroupIDValidator(v); err != nil {
			return &ValidationError{Name: "group_id", err: fmt.Errorf(`ent: validator failed for field "ZaloDepartment.group_id": %w`, err)}
		}
	}
	if zdu.mutation.DepartmentCleared() && len(zdu.mutation.DepartmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ZaloDepartment.department"`)
	}
	return nil
}

func (zdu *ZaloDepartmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := zdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(zalodepartment.Table, zalodepartment.Columns, sqlgraph.NewFieldSpec(zalodepartment.FieldID, field.TypeInt))
	if ps := zdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := zdu.mutation.GroupID(); ok {
		_spec.SetField(zalodepartment.FieldGroupID, field.TypeString, value)
	}
	if value, ok := zdu.mutation.UpdatedAt(); ok {
		_spec.SetField(zalodepartment.FieldUpdatedAt, field.TypeTime, value)
	}
	if zdu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   zalodepartment.DepartmentTable,
			Columns: []string{zalodepartment.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := zdu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   zalodepartment.DepartmentTable,
			Columns: []string{zalodepartment.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, zdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{zalodepartment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	zdu.mutation.done = true
	return n, nil
}

// ZaloDepartmentUpdateOne is the builder for updating a single ZaloDepartment entity.
type ZaloDepartmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ZaloDepartmentMutation
}

// SetGroupID sets the "group_id" field.
func (zduo *ZaloDepartmentUpdateOne) SetGroupID(s string) *ZaloDepartmentUpdateOne {
	zduo.mutation.SetGroupID(s)
	return zduo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (zduo *ZaloDepartmentUpdateOne) SetNillableGroupID(s *string) *ZaloDepartmentUpdateOne {
	if s != nil {
		zduo.SetGroupID(*s)
	}
	return zduo
}

// SetDepartmentID sets the "department_id" field.
func (zduo *ZaloDepartmentUpdateOne) SetDepartmentID(i int) *ZaloDepartmentUpdateOne {
	zduo.mutation.SetDepartmentID(i)
	return zduo
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (zduo *ZaloDepartmentUpdateOne) SetNillableDepartmentID(i *int) *ZaloDepartmentUpdateOne {
	if i != nil {
		zduo.SetDepartmentID(*i)
	}
	return zduo
}

// SetUpdatedAt sets the "updated_at" field.
func (zduo *ZaloDepartmentUpdateOne) SetUpdatedAt(t time.Time) *ZaloDepartmentUpdateOne {
	zduo.mutation.SetUpdatedAt(t)
	return zduo
}

// SetDepartment sets the "department" edge to the Department entity.
func (zduo *ZaloDepartmentUpdateOne) SetDepartment(d *Department) *ZaloDepartmentUpdateOne {
	return zduo.SetDepartmentID(d.ID)
}

// Mutation returns the ZaloDepartmentMutation object of the builder.
func (zduo *ZaloDepartmentUpdateOne) Mutation() *ZaloDepartmentMutation {
	return zduo.mutation
}

// ClearDepartment clears the "department" edge to the Department entity.
func (zduo *ZaloDepartmentUpdateOne) ClearDepartment() *ZaloDepartmentUpdateOne {
	zduo.mutation.ClearDepartment()
	return zduo
}

// Where appends a list predicates to the ZaloDepartmentUpdate builder.
func (zduo *ZaloDepartmentUpdateOne) Where(ps ...predicate.ZaloDepartment) *ZaloDepartmentUpdateOne {
	zduo.mutation.Where(ps...)
	return zduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (zduo *ZaloDepartmentUpdateOne) Select(field string, fields ...string) *ZaloDepartmentUpdateOne {
	zduo.fields = append([]string{field}, fields...)
	return zduo
}

// Save executes the query and returns the updated ZaloDepartment entity.
func (zduo *ZaloDepartmentUpdateOne) Save(ctx context.Context) (*ZaloDepartment, error) {
	zduo.defaults()
	return withHooks(ctx, zduo.sqlSave, zduo.mutation, zduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (zduo *ZaloDepartmentUpdateOne) SaveX(ctx context.Context) *ZaloDepartment {
	node, err := zduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (zduo *ZaloDepartmentUpdateOne) Exec(ctx context.Context) error {
	_, err := zduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (zduo *ZaloDepartmentUpdateOne) ExecX(ctx context.Context) {
	if err := zduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (zduo *ZaloDepartmentUpdateOne) defaults() {
	if _, ok := zduo.mutation.UpdatedAt(); !ok {
		v := zalodepartment.UpdateDefaultUpdatedAt()
		zduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (zduo *ZaloDepartmentUpdateOne) check() error {
	if v, ok := zduo.mutation.GroupID(); ok {
		if err := zalodepartment.GroupIDValidator(v); err != nil {
			return &ValidationError{Name: "group_id", err: fmt.Errorf(`ent: validator failed for field "ZaloDepartment.group_id": %w`, err)}
		}
	}
	if zduo.mutation.DepartmentCleared() && len(zduo.mutation.DepartmentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ZaloDepartment.department"`)
	}
	return nil
}

func (zduo *ZaloDepartmentUpdateOne) sqlSave(ctx context.Context) (_node *ZaloDepartment, err error) {
	if err := zduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(zalodepartment.Table, zalodepartment.Columns, sqlgraph.NewFieldSpec(zalodepartment.FieldID, field.TypeInt))
	id, ok := zduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ZaloDepartment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := zduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, zalodepartment.FieldID)
		for _, f := range fields {
			if !zalodepartment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != zalodepartment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := zduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := zduo.mutation.GroupID(); ok {
		_spec.SetField(zalodepartment.FieldGroupID, field.TypeString, value)
	}
	if value, ok := zduo.mutation.UpdatedAt(); ok {
		_spec.SetField(zalodepartment.FieldUpdatedAt, field.TypeTime, value)
	}
	if zduo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   zalodepartment.DepartmentTable,
			Columns: []string{zalodepartment.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := zduo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   zalodepartment.DepartmentTable,
			Columns: []string{zalodepartment.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ZaloDepartment{config: zduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, zduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{zalodepartment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	zduo.mutation.done = true
	return _node, nil
}
