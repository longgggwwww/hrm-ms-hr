// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/longgggwwww/hrm-ms-hr/ent"
	appointmenthistory "github.com/longgggwwww/hrm-ms-hr/ent/appointmenthistory"
	employee "github.com/longgggwwww/hrm-ms-hr/ent/employee"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	strconv "strconv"
)

// AppointmentHistoryService implements AppointmentHistoryServiceServer
type AppointmentHistoryService struct {
	client *ent.Client
	UnimplementedAppointmentHistoryServiceServer
}

// NewAppointmentHistoryService returns a new AppointmentHistoryService
func NewAppointmentHistoryService(client *ent.Client) *AppointmentHistoryService {
	return &AppointmentHistoryService{
		client: client,
	}
}

// toProtoAppointmentHistory transforms the ent type to the pb type
func toProtoAppointmentHistory(e *ent.AppointmentHistory) (*AppointmentHistory, error) {
	v := &AppointmentHistory{}
	attachment_urls := e.AttachmentUrls
	v.AttachmentUrls = attachment_urls
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	description := wrapperspb.String(e.Description)
	v.Description = description
	employee := int64(e.EmployeeID)
	v.EmployeeId = employee
	id := int64(e.ID)
	v.Id = id
	joining_at := timestamppb.New(e.JoiningAt)
	v.JoiningAt = joining_at
	position_name := e.PositionName
	v.PositionName = position_name
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	if edg := e.Edges.Employee; edg != nil {
		id := int64(edg.ID)
		v.Employee = &Employee{
			Id: id,
		}
	}
	return v, nil
}

// toProtoAppointmentHistoryList transforms a list of ent type to a list of pb type
func toProtoAppointmentHistoryList(e []*ent.AppointmentHistory) ([]*AppointmentHistory, error) {
	var pbList []*AppointmentHistory
	for _, entEntity := range e {
		pbEntity, err := toProtoAppointmentHistory(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements AppointmentHistoryServiceServer.Create
func (svc *AppointmentHistoryService) Create(ctx context.Context, req *CreateAppointmentHistoryRequest) (*AppointmentHistory, error) {
	appointmenthistory := req.GetAppointmentHistory()
	m, err := svc.createBuilder(appointmenthistory)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoAppointmentHistory(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements AppointmentHistoryServiceServer.Get
func (svc *AppointmentHistoryService) Get(ctx context.Context, req *GetAppointmentHistoryRequest) (*AppointmentHistory, error) {
	var (
		err error
		get *ent.AppointmentHistory
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetAppointmentHistoryRequest_VIEW_UNSPECIFIED, GetAppointmentHistoryRequest_BASIC:
		get, err = svc.client.AppointmentHistory.Get(ctx, id)
	case GetAppointmentHistoryRequest_WITH_EDGE_IDS:
		get, err = svc.client.AppointmentHistory.Query().
			Where(appointmenthistory.ID(id)).
			WithEmployee(func(query *ent.EmployeeQuery) {
				query.Select(employee.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoAppointmentHistory(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements AppointmentHistoryServiceServer.Update
func (svc *AppointmentHistoryService) Update(ctx context.Context, req *UpdateAppointmentHistoryRequest) (*AppointmentHistory, error) {
	appointmenthistory := req.GetAppointmentHistory()
	appointmenthistoryID := int(appointmenthistory.GetId())
	m := svc.client.AppointmentHistory.UpdateOneID(appointmenthistoryID)
	if appointmenthistory.GetAttachmentUrls() != nil {
		appointmenthistoryAttachmentUrls := appointmenthistory.GetAttachmentUrls()
		m.SetAttachmentUrls(appointmenthistoryAttachmentUrls)
	}
	appointmenthistoryCreatedAt := runtime.ExtractTime(appointmenthistory.GetCreatedAt())
	m.SetCreatedAt(appointmenthistoryCreatedAt)
	if appointmenthistory.GetDescription() != nil {
		appointmenthistoryDescription := appointmenthistory.GetDescription().GetValue()
		m.SetDescription(appointmenthistoryDescription)
	}
	appointmenthistoryEmployeeID := int(appointmenthistory.GetEmployeeId())
	m.SetEmployeeID(appointmenthistoryEmployeeID)
	appointmenthistoryJoiningAt := runtime.ExtractTime(appointmenthistory.GetJoiningAt())
	m.SetJoiningAt(appointmenthistoryJoiningAt)
	appointmenthistoryPositionName := appointmenthistory.GetPositionName()
	m.SetPositionName(appointmenthistoryPositionName)
	appointmenthistoryUpdatedAt := runtime.ExtractTime(appointmenthistory.GetUpdatedAt())
	m.SetUpdatedAt(appointmenthistoryUpdatedAt)
	if appointmenthistory.GetEmployee() != nil {
		appointmenthistoryEmployee := int(appointmenthistory.GetEmployee().GetId())
		m.SetEmployeeID(appointmenthistoryEmployee)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoAppointmentHistory(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements AppointmentHistoryServiceServer.Delete
func (svc *AppointmentHistoryService) Delete(ctx context.Context, req *DeleteAppointmentHistoryRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.AppointmentHistory.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements AppointmentHistoryServiceServer.List
func (svc *AppointmentHistoryService) List(ctx context.Context, req *ListAppointmentHistoryRequest) (*ListAppointmentHistoryResponse, error) {
	var (
		err      error
		entList  []*ent.AppointmentHistory
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.AppointmentHistory.Query().
		Order(ent.Desc(appointmenthistory.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(appointmenthistory.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListAppointmentHistoryRequest_VIEW_UNSPECIFIED, ListAppointmentHistoryRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListAppointmentHistoryRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithEmployee(func(query *ent.EmployeeQuery) {
				query.Select(employee.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoAppointmentHistoryList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListAppointmentHistoryResponse{
			AppointmentHistoryList: protoList,
			NextPageToken:          nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements AppointmentHistoryServiceServer.BatchCreate
func (svc *AppointmentHistoryService) BatchCreate(ctx context.Context, req *BatchCreateAppointmentHistoriesRequest) (*BatchCreateAppointmentHistoriesResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.AppointmentHistoryCreate, len(requests))
	for i, req := range requests {
		appointmenthistory := req.GetAppointmentHistory()
		var err error
		bulk[i], err = svc.createBuilder(appointmenthistory)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.AppointmentHistory.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoAppointmentHistoryList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateAppointmentHistoriesResponse{
			AppointmentHistories: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *AppointmentHistoryService) createBuilder(appointmenthistory *AppointmentHistory) (*ent.AppointmentHistoryCreate, error) {
	m := svc.client.AppointmentHistory.Create()
	if appointmenthistory.GetAttachmentUrls() != nil {
		appointmenthistoryAttachmentUrls := appointmenthistory.GetAttachmentUrls()
		m.SetAttachmentUrls(appointmenthistoryAttachmentUrls)
	}
	appointmenthistoryCreatedAt := runtime.ExtractTime(appointmenthistory.GetCreatedAt())
	m.SetCreatedAt(appointmenthistoryCreatedAt)
	if appointmenthistory.GetDescription() != nil {
		appointmenthistoryDescription := appointmenthistory.GetDescription().GetValue()
		m.SetDescription(appointmenthistoryDescription)
	}
	appointmenthistoryEmployeeID := int(appointmenthistory.GetEmployeeId())
	m.SetEmployeeID(appointmenthistoryEmployeeID)
	appointmenthistoryJoiningAt := runtime.ExtractTime(appointmenthistory.GetJoiningAt())
	m.SetJoiningAt(appointmenthistoryJoiningAt)
	appointmenthistoryPositionName := appointmenthistory.GetPositionName()
	m.SetPositionName(appointmenthistoryPositionName)
	appointmenthistoryUpdatedAt := runtime.ExtractTime(appointmenthistory.GetUpdatedAt())
	m.SetUpdatedAt(appointmenthistoryUpdatedAt)
	if appointmenthistory.GetEmployee() != nil {
		appointmenthistoryEmployee := int(appointmenthistory.GetEmployee().GetId())
		m.SetEmployeeID(appointmenthistoryEmployee)
	}
	return m, nil
}
