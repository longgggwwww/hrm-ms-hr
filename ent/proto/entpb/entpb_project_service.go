// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/longgggwwww/hrm-ms-hr/ent"
	employee "github.com/longgggwwww/hrm-ms-hr/ent/employee"
	organization "github.com/longgggwwww/hrm-ms-hr/ent/organization"
	project "github.com/longgggwwww/hrm-ms-hr/ent/project"
	task "github.com/longgggwwww/hrm-ms-hr/ent/task"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	regexp "regexp"
	strconv "strconv"
	strings "strings"
)

// ProjectService implements ProjectServiceServer
type ProjectService struct {
	client *ent.Client
	UnimplementedProjectServiceServer
}

// NewProjectService returns a new ProjectService
func NewProjectService(client *ent.Client) *ProjectService {
	return &ProjectService{
		client: client,
	}
}

var protoIdentNormalizeRegexpProject_Status = regexp.MustCompile(`[^a-zA-Z0-9_]+`)

func protoIdentNormalizeProject_Status(e string) string {
	return protoIdentNormalizeRegexpProject_Status.ReplaceAllString(e, "_")
}

func toProtoProject_Status(e project.Status) Project_Status {
	if v, ok := Project_Status_value[strings.ToUpper("STATUS_"+protoIdentNormalizeProject_Status(string(e)))]; ok {
		return Project_Status(v)
	}
	return Project_Status(0)
}

func toEntProject_Status(e Project_Status) project.Status {
	if v, ok := Project_Status_name[int32(e)]; ok {
		entVal := map[string]string{
			"STATUS_NOT_STARTED": "not_started",
			"STATUS_IN_PROGRESS": "in_progress",
			"STATUS_COMPLETED":   "completed",
		}[v]
		return project.Status(entVal)
	}
	return ""
}

// toProtoProject transforms the ent type to the pb type
func toProtoProject(e *ent.Project) (*Project, error) {
	v := &Project{}
	code := e.Code
	v.Code = code
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	creator := int64(e.CreatorID)
	v.CreatorId = creator
	if e.Description != nil {
		description := wrapperspb.String(*e.Description)
		v.Description = description
	}
	if e.EndAt != nil {
		end_at := timestamppb.New(*e.EndAt)
		v.EndAt = end_at
	}
	id := int64(e.ID)
	v.Id = id
	name := e.Name
	v.Name = name
	organization := int64(e.OrgID)
	v.OrgId = organization
	process := wrapperspb.Int64(int64(e.Process))
	v.Process = process
	if e.StartAt != nil {
		start_at := timestamppb.New(*e.StartAt)
		v.StartAt = start_at
	}
	status := toProtoProject_Status(e.Status)
	v.Status = status
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	updater := int64(e.UpdaterID)
	v.UpdaterId = updater
	if edg := e.Edges.Creator; edg != nil {
		id := int64(edg.ID)
		v.Creator = &Employee{
			Id: id,
		}
	}
	for _, edg := range e.Edges.Members {
		id := int64(edg.ID)
		v.Members = append(v.Members, &Employee{
			Id: id,
		})
	}
	if edg := e.Edges.Organization; edg != nil {
		id := int64(edg.ID)
		v.Organization = &Organization{
			Id: id,
		}
	}
	for _, edg := range e.Edges.Tasks {
		id := int64(edg.ID)
		v.Tasks = append(v.Tasks, &Task{
			Id: id,
		})
	}
	if edg := e.Edges.Updater; edg != nil {
		id := int64(edg.ID)
		v.Updater = &Employee{
			Id: id,
		}
	}
	return v, nil
}

// toProtoProjectList transforms a list of ent type to a list of pb type
func toProtoProjectList(e []*ent.Project) ([]*Project, error) {
	var pbList []*Project
	for _, entEntity := range e {
		pbEntity, err := toProtoProject(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements ProjectServiceServer.Create
func (svc *ProjectService) Create(ctx context.Context, req *CreateProjectRequest) (*Project, error) {
	project := req.GetProject()
	m, err := svc.createBuilder(project)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoProject(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements ProjectServiceServer.Get
func (svc *ProjectService) Get(ctx context.Context, req *GetProjectRequest) (*Project, error) {
	var (
		err error
		get *ent.Project
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetProjectRequest_VIEW_UNSPECIFIED, GetProjectRequest_BASIC:
		get, err = svc.client.Project.Get(ctx, id)
	case GetProjectRequest_WITH_EDGE_IDS:
		get, err = svc.client.Project.Query().
			Where(project.ID(id)).
			WithCreator(func(query *ent.EmployeeQuery) {
				query.Select(employee.FieldID)
			}).
			WithMembers(func(query *ent.EmployeeQuery) {
				query.Select(employee.FieldID)
			}).
			WithOrganization(func(query *ent.OrganizationQuery) {
				query.Select(organization.FieldID)
			}).
			WithTasks(func(query *ent.TaskQuery) {
				query.Select(task.FieldID)
			}).
			WithUpdater(func(query *ent.EmployeeQuery) {
				query.Select(employee.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoProject(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements ProjectServiceServer.Update
func (svc *ProjectService) Update(ctx context.Context, req *UpdateProjectRequest) (*Project, error) {
	project := req.GetProject()
	projectID := int(project.GetId())
	m := svc.client.Project.UpdateOneID(projectID)
	projectCode := project.GetCode()
	m.SetCode(projectCode)
	projectCreatorID := int(project.GetCreatorId())
	m.SetCreatorID(projectCreatorID)
	if project.GetDescription() != nil {
		projectDescription := project.GetDescription().GetValue()
		m.SetDescription(projectDescription)
	}
	if project.GetEndAt() != nil {
		projectEndAt := runtime.ExtractTime(project.GetEndAt())
		m.SetEndAt(projectEndAt)
	}
	projectName := project.GetName()
	m.SetName(projectName)
	projectOrgID := int(project.GetOrgId())
	m.SetOrgID(projectOrgID)
	if project.GetProcess() != nil {
		projectProcess := int(project.GetProcess().GetValue())
		m.SetProcess(projectProcess)
	}
	if project.GetStartAt() != nil {
		projectStartAt := runtime.ExtractTime(project.GetStartAt())
		m.SetStartAt(projectStartAt)
	}
	projectStatus := toEntProject_Status(project.GetStatus())
	m.SetStatus(projectStatus)
	projectUpdatedAt := runtime.ExtractTime(project.GetUpdatedAt())
	m.SetUpdatedAt(projectUpdatedAt)
	projectUpdaterID := int(project.GetUpdaterId())
	m.SetUpdaterID(projectUpdaterID)
	if project.GetCreator() != nil {
		projectCreator := int(project.GetCreator().GetId())
		m.SetCreatorID(projectCreator)
	}
	for _, item := range project.GetMembers() {
		members := int(item.GetId())
		m.AddMemberIDs(members)
	}
	if project.GetOrganization() != nil {
		projectOrganization := int(project.GetOrganization().GetId())
		m.SetOrganizationID(projectOrganization)
	}
	for _, item := range project.GetTasks() {
		tasks := int(item.GetId())
		m.AddTaskIDs(tasks)
	}
	if project.GetUpdater() != nil {
		projectUpdater := int(project.GetUpdater().GetId())
		m.SetUpdaterID(projectUpdater)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoProject(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements ProjectServiceServer.Delete
func (svc *ProjectService) Delete(ctx context.Context, req *DeleteProjectRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Project.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements ProjectServiceServer.List
func (svc *ProjectService) List(ctx context.Context, req *ListProjectRequest) (*ListProjectResponse, error) {
	var (
		err      error
		entList  []*ent.Project
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Project.Query().
		Order(ent.Desc(project.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(project.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListProjectRequest_VIEW_UNSPECIFIED, ListProjectRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListProjectRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithCreator(func(query *ent.EmployeeQuery) {
				query.Select(employee.FieldID)
			}).
			WithMembers(func(query *ent.EmployeeQuery) {
				query.Select(employee.FieldID)
			}).
			WithOrganization(func(query *ent.OrganizationQuery) {
				query.Select(organization.FieldID)
			}).
			WithTasks(func(query *ent.TaskQuery) {
				query.Select(task.FieldID)
			}).
			WithUpdater(func(query *ent.EmployeeQuery) {
				query.Select(employee.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoProjectList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListProjectResponse{
			ProjectList:   protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements ProjectServiceServer.BatchCreate
func (svc *ProjectService) BatchCreate(ctx context.Context, req *BatchCreateProjectsRequest) (*BatchCreateProjectsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.ProjectCreate, len(requests))
	for i, req := range requests {
		project := req.GetProject()
		var err error
		bulk[i], err = svc.createBuilder(project)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Project.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoProjectList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateProjectsResponse{
			Projects: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *ProjectService) createBuilder(project *Project) (*ent.ProjectCreate, error) {
	m := svc.client.Project.Create()
	projectCode := project.GetCode()
	m.SetCode(projectCode)
	projectCreatedAt := runtime.ExtractTime(project.GetCreatedAt())
	m.SetCreatedAt(projectCreatedAt)
	projectCreatorID := int(project.GetCreatorId())
	m.SetCreatorID(projectCreatorID)
	if project.GetDescription() != nil {
		projectDescription := project.GetDescription().GetValue()
		m.SetDescription(projectDescription)
	}
	if project.GetEndAt() != nil {
		projectEndAt := runtime.ExtractTime(project.GetEndAt())
		m.SetEndAt(projectEndAt)
	}
	projectName := project.GetName()
	m.SetName(projectName)
	projectOrgID := int(project.GetOrgId())
	m.SetOrgID(projectOrgID)
	if project.GetProcess() != nil {
		projectProcess := int(project.GetProcess().GetValue())
		m.SetProcess(projectProcess)
	}
	if project.GetStartAt() != nil {
		projectStartAt := runtime.ExtractTime(project.GetStartAt())
		m.SetStartAt(projectStartAt)
	}
	projectStatus := toEntProject_Status(project.GetStatus())
	m.SetStatus(projectStatus)
	projectUpdatedAt := runtime.ExtractTime(project.GetUpdatedAt())
	m.SetUpdatedAt(projectUpdatedAt)
	projectUpdaterID := int(project.GetUpdaterId())
	m.SetUpdaterID(projectUpdaterID)
	if project.GetCreator() != nil {
		projectCreator := int(project.GetCreator().GetId())
		m.SetCreatorID(projectCreator)
	}
	for _, item := range project.GetMembers() {
		members := int(item.GetId())
		m.AddMemberIDs(members)
	}
	if project.GetOrganization() != nil {
		projectOrganization := int(project.GetOrganization().GetId())
		m.SetOrganizationID(projectOrganization)
	}
	for _, item := range project.GetTasks() {
		tasks := int(item.GetId())
		m.AddTaskIDs(tasks)
	}
	if project.GetUpdater() != nil {
		projectUpdater := int(project.GetUpdater().GetId())
		m.SetUpdaterID(projectUpdater)
	}
	return m, nil
}
