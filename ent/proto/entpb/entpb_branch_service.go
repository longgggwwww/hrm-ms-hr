// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	uuid "github.com/google/uuid"
	ent "github.com/longgggwwww/hrm-ms-hr/ent"
	branch "github.com/longgggwwww/hrm-ms-hr/ent/branch"
	company "github.com/longgggwwww/hrm-ms-hr/ent/company"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// BranchService implements BranchServiceServer
type BranchService struct {
	client *ent.Client
	UnimplementedBranchServiceServer
}

// NewBranchService returns a new BranchService
func NewBranchService(client *ent.Client) *BranchService {
	return &BranchService{
		client: client,
	}
}

// toProtoBranch transforms the ent type to the pb type
func toProtoBranch(e *ent.Branch) (*Branch, error) {
	v := &Branch{}
	address := wrapperspb.String(e.Address)
	v.Address = address
	code := e.Code
	v.Code = code
	company, err := e.CompanyID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.CompanyId = company
	contact_info := wrapperspb.String(e.ContactInfo)
	v.ContactInfo = contact_info
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	name := e.Name
	v.Name = name
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	if edg := e.Edges.Company; edg != nil {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Company = &Company{
			Id: id,
		}
	}
	return v, nil
}

// toProtoBranchList transforms a list of ent type to a list of pb type
func toProtoBranchList(e []*ent.Branch) ([]*Branch, error) {
	var pbList []*Branch
	for _, entEntity := range e {
		pbEntity, err := toProtoBranch(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements BranchServiceServer.Create
func (svc *BranchService) Create(ctx context.Context, req *CreateBranchRequest) (*Branch, error) {
	branch := req.GetBranch()
	m, err := svc.createBuilder(branch)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoBranch(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements BranchServiceServer.Get
func (svc *BranchService) Get(ctx context.Context, req *GetBranchRequest) (*Branch, error) {
	var (
		err error
		get *ent.Branch
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetBranchRequest_VIEW_UNSPECIFIED, GetBranchRequest_BASIC:
		get, err = svc.client.Branch.Get(ctx, id)
	case GetBranchRequest_WITH_EDGE_IDS:
		get, err = svc.client.Branch.Query().
			Where(branch.ID(id)).
			WithCompany(func(query *ent.CompanyQuery) {
				query.Select(company.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoBranch(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements BranchServiceServer.Update
func (svc *BranchService) Update(ctx context.Context, req *UpdateBranchRequest) (*Branch, error) {
	branch := req.GetBranch()
	var branchID uuid.UUID
	if err := (&branchID).UnmarshalBinary(branch.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.Branch.UpdateOneID(branchID)
	if branch.GetAddress() != nil {
		branchAddress := branch.GetAddress().GetValue()
		m.SetAddress(branchAddress)
	}
	branchCode := branch.GetCode()
	m.SetCode(branchCode)
	var branchCompanyID uuid.UUID
	if err := (&branchCompanyID).UnmarshalBinary(branch.GetCompanyId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetCompanyID(branchCompanyID)
	if branch.GetContactInfo() != nil {
		branchContactInfo := branch.GetContactInfo().GetValue()
		m.SetContactInfo(branchContactInfo)
	}
	branchName := branch.GetName()
	m.SetName(branchName)
	branchUpdatedAt := runtime.ExtractTime(branch.GetUpdatedAt())
	m.SetUpdatedAt(branchUpdatedAt)
	if branch.GetCompany() != nil {
		var branchCompany uuid.UUID
		if err := (&branchCompany).UnmarshalBinary(branch.GetCompany().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetCompanyID(branchCompany)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoBranch(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements BranchServiceServer.Delete
func (svc *BranchService) Delete(ctx context.Context, req *DeleteBranchRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.Branch.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements BranchServiceServer.List
func (svc *BranchService) List(ctx context.Context, req *ListBranchRequest) (*ListBranchResponse, error) {
	var (
		err      error
		entList  []*ent.Branch
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Branch.Query().
		Order(ent.Desc(branch.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken, err := uuid.ParseBytes(bytes)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		listQuery = listQuery.
			Where(branch.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListBranchRequest_VIEW_UNSPECIFIED, ListBranchRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListBranchRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithCompany(func(query *ent.CompanyQuery) {
				query.Select(company.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoBranchList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListBranchResponse{
			BranchList:    protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements BranchServiceServer.BatchCreate
func (svc *BranchService) BatchCreate(ctx context.Context, req *BatchCreateBranchesRequest) (*BatchCreateBranchesResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.BranchCreate, len(requests))
	for i, req := range requests {
		branch := req.GetBranch()
		var err error
		bulk[i], err = svc.createBuilder(branch)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Branch.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoBranchList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateBranchesResponse{
			Branches: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *BranchService) createBuilder(branch *Branch) (*ent.BranchCreate, error) {
	m := svc.client.Branch.Create()
	if branch.GetAddress() != nil {
		branchAddress := branch.GetAddress().GetValue()
		m.SetAddress(branchAddress)
	}
	branchCode := branch.GetCode()
	m.SetCode(branchCode)
	var branchCompanyID uuid.UUID
	if err := (&branchCompanyID).UnmarshalBinary(branch.GetCompanyId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetCompanyID(branchCompanyID)
	if branch.GetContactInfo() != nil {
		branchContactInfo := branch.GetContactInfo().GetValue()
		m.SetContactInfo(branchContactInfo)
	}
	branchCreatedAt := runtime.ExtractTime(branch.GetCreatedAt())
	m.SetCreatedAt(branchCreatedAt)
	branchName := branch.GetName()
	m.SetName(branchName)
	branchUpdatedAt := runtime.ExtractTime(branch.GetUpdatedAt())
	m.SetUpdatedAt(branchUpdatedAt)
	if branch.GetCompany() != nil {
		var branchCompany uuid.UUID
		if err := (&branchCompany).UnmarshalBinary(branch.GetCompany().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetCompanyID(branchCompany)
	}
	return m, nil
}
