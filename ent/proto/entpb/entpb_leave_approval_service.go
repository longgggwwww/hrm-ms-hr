// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/longgggwwww/hrm-ms-hr/ent"
	employee "github.com/longgggwwww/hrm-ms-hr/ent/employee"
	leaveapproval "github.com/longgggwwww/hrm-ms-hr/ent/leaveapproval"
	leaverequest "github.com/longgggwwww/hrm-ms-hr/ent/leaverequest"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	strconv "strconv"
)

// LeaveApprovalService implements LeaveApprovalServiceServer
type LeaveApprovalService struct {
	client *ent.Client
	UnimplementedLeaveApprovalServiceServer
}

// NewLeaveApprovalService returns a new LeaveApprovalService
func NewLeaveApprovalService(client *ent.Client) *LeaveApprovalService {
	return &LeaveApprovalService{
		client: client,
	}
}

// toProtoLeaveApproval transforms the ent type to the pb type
func toProtoLeaveApproval(e *ent.LeaveApproval) (*LeaveApproval, error) {
	v := &LeaveApproval{}
	if e.Comment != nil {
		comment := wrapperspb.String(*e.Comment)
		v.Comment = comment
	}
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	id := int64(e.ID)
	v.Id = id
	leave_request := int64(e.LeaveRequestID)
	v.LeaveRequestId = leave_request
	reviewer := int64(e.ReviewerID)
	v.ReviewerId = reviewer
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	if edg := e.Edges.LeaveRequest; edg != nil {
		id := int64(edg.ID)
		v.LeaveRequest = &LeaveRequest{
			Id: id,
		}
	}
	if edg := e.Edges.Reviewer; edg != nil {
		id := int64(edg.ID)
		v.Reviewer = &Employee{
			Id: id,
		}
	}
	return v, nil
}

// toProtoLeaveApprovalList transforms a list of ent type to a list of pb type
func toProtoLeaveApprovalList(e []*ent.LeaveApproval) ([]*LeaveApproval, error) {
	var pbList []*LeaveApproval
	for _, entEntity := range e {
		pbEntity, err := toProtoLeaveApproval(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements LeaveApprovalServiceServer.Create
func (svc *LeaveApprovalService) Create(ctx context.Context, req *CreateLeaveApprovalRequest) (*LeaveApproval, error) {
	leaveapproval := req.GetLeaveApproval()
	m, err := svc.createBuilder(leaveapproval)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoLeaveApproval(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements LeaveApprovalServiceServer.Get
func (svc *LeaveApprovalService) Get(ctx context.Context, req *GetLeaveApprovalRequest) (*LeaveApproval, error) {
	var (
		err error
		get *ent.LeaveApproval
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetLeaveApprovalRequest_VIEW_UNSPECIFIED, GetLeaveApprovalRequest_BASIC:
		get, err = svc.client.LeaveApproval.Get(ctx, id)
	case GetLeaveApprovalRequest_WITH_EDGE_IDS:
		get, err = svc.client.LeaveApproval.Query().
			Where(leaveapproval.ID(id)).
			WithLeaveRequest(func(query *ent.LeaveRequestQuery) {
				query.Select(leaverequest.FieldID)
			}).
			WithReviewer(func(query *ent.EmployeeQuery) {
				query.Select(employee.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoLeaveApproval(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements LeaveApprovalServiceServer.Update
func (svc *LeaveApprovalService) Update(ctx context.Context, req *UpdateLeaveApprovalRequest) (*LeaveApproval, error) {
	leaveapproval := req.GetLeaveApproval()
	leaveapprovalID := int(leaveapproval.GetId())
	m := svc.client.LeaveApproval.UpdateOneID(leaveapprovalID)
	if leaveapproval.GetComment() != nil {
		leaveapprovalComment := leaveapproval.GetComment().GetValue()
		m.SetComment(leaveapprovalComment)
	}
	leaveapprovalCreatedAt := runtime.ExtractTime(leaveapproval.GetCreatedAt())
	m.SetCreatedAt(leaveapprovalCreatedAt)
	leaveapprovalLeaveRequestID := int(leaveapproval.GetLeaveRequestId())
	m.SetLeaveRequestID(leaveapprovalLeaveRequestID)
	leaveapprovalReviewerID := int(leaveapproval.GetReviewerId())
	m.SetReviewerID(leaveapprovalReviewerID)
	leaveapprovalUpdatedAt := runtime.ExtractTime(leaveapproval.GetUpdatedAt())
	m.SetUpdatedAt(leaveapprovalUpdatedAt)
	if leaveapproval.GetLeaveRequest() != nil {
		leaveapprovalLeaveRequest := int(leaveapproval.GetLeaveRequest().GetId())
		m.SetLeaveRequestID(leaveapprovalLeaveRequest)
	}
	if leaveapproval.GetReviewer() != nil {
		leaveapprovalReviewer := int(leaveapproval.GetReviewer().GetId())
		m.SetReviewerID(leaveapprovalReviewer)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoLeaveApproval(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements LeaveApprovalServiceServer.Delete
func (svc *LeaveApprovalService) Delete(ctx context.Context, req *DeleteLeaveApprovalRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.LeaveApproval.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements LeaveApprovalServiceServer.List
func (svc *LeaveApprovalService) List(ctx context.Context, req *ListLeaveApprovalRequest) (*ListLeaveApprovalResponse, error) {
	var (
		err      error
		entList  []*ent.LeaveApproval
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.LeaveApproval.Query().
		Order(ent.Desc(leaveapproval.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(leaveapproval.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListLeaveApprovalRequest_VIEW_UNSPECIFIED, ListLeaveApprovalRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListLeaveApprovalRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithLeaveRequest(func(query *ent.LeaveRequestQuery) {
				query.Select(leaverequest.FieldID)
			}).
			WithReviewer(func(query *ent.EmployeeQuery) {
				query.Select(employee.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoLeaveApprovalList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListLeaveApprovalResponse{
			LeaveApprovalList: protoList,
			NextPageToken:     nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements LeaveApprovalServiceServer.BatchCreate
func (svc *LeaveApprovalService) BatchCreate(ctx context.Context, req *BatchCreateLeaveApprovalsRequest) (*BatchCreateLeaveApprovalsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.LeaveApprovalCreate, len(requests))
	for i, req := range requests {
		leaveapproval := req.GetLeaveApproval()
		var err error
		bulk[i], err = svc.createBuilder(leaveapproval)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.LeaveApproval.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoLeaveApprovalList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateLeaveApprovalsResponse{
			LeaveApprovals: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *LeaveApprovalService) createBuilder(leaveapproval *LeaveApproval) (*ent.LeaveApprovalCreate, error) {
	m := svc.client.LeaveApproval.Create()
	if leaveapproval.GetComment() != nil {
		leaveapprovalComment := leaveapproval.GetComment().GetValue()
		m.SetComment(leaveapprovalComment)
	}
	leaveapprovalCreatedAt := runtime.ExtractTime(leaveapproval.GetCreatedAt())
	m.SetCreatedAt(leaveapprovalCreatedAt)
	leaveapprovalLeaveRequestID := int(leaveapproval.GetLeaveRequestId())
	m.SetLeaveRequestID(leaveapprovalLeaveRequestID)
	leaveapprovalReviewerID := int(leaveapproval.GetReviewerId())
	m.SetReviewerID(leaveapprovalReviewerID)
	leaveapprovalUpdatedAt := runtime.ExtractTime(leaveapproval.GetUpdatedAt())
	m.SetUpdatedAt(leaveapprovalUpdatedAt)
	if leaveapproval.GetLeaveRequest() != nil {
		leaveapprovalLeaveRequest := int(leaveapproval.GetLeaveRequest().GetId())
		m.SetLeaveRequestID(leaveapprovalLeaveRequest)
	}
	if leaveapproval.GetReviewer() != nil {
		leaveapprovalReviewer := int(leaveapproval.GetReviewer().GetId())
		m.SetReviewerID(leaveapprovalReviewer)
	}
	return m, nil
}
