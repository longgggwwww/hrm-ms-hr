// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/longgggwwww/hrm-ms-hr/ent"
	employee "github.com/longgggwwww/hrm-ms-hr/ent/employee"
	leaveapproval "github.com/longgggwwww/hrm-ms-hr/ent/leaveapproval"
	leaverequest "github.com/longgggwwww/hrm-ms-hr/ent/leaverequest"
	organization "github.com/longgggwwww/hrm-ms-hr/ent/organization"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	regexp "regexp"
	strconv "strconv"
	strings "strings"
)

// LeaveRequestService implements LeaveRequestServiceServer
type LeaveRequestService struct {
	client *ent.Client
	UnimplementedLeaveRequestServiceServer
}

// NewLeaveRequestService returns a new LeaveRequestService
func NewLeaveRequestService(client *ent.Client) *LeaveRequestService {
	return &LeaveRequestService{
		client: client,
	}
}

var protoIdentNormalizeRegexpLeaveRequest_Status = regexp.MustCompile(`[^a-zA-Z0-9_]+`)

func protoIdentNormalizeLeaveRequest_Status(e string) string {
	return protoIdentNormalizeRegexpLeaveRequest_Status.ReplaceAllString(e, "_")
}

func toProtoLeaveRequest_Status(e leaverequest.Status) LeaveRequest_Status {
	if v, ok := LeaveRequest_Status_value[strings.ToUpper("STATUS_"+protoIdentNormalizeLeaveRequest_Status(string(e)))]; ok {
		return LeaveRequest_Status(v)
	}
	return LeaveRequest_Status(0)
}

func toEntLeaveRequest_Status(e LeaveRequest_Status) leaverequest.Status {
	if v, ok := LeaveRequest_Status_name[int32(e)]; ok {
		entVal := map[string]string{
			"STATUS_PENDING":  "pending",
			"STATUS_REJECTED": "rejected",
			"STATUS_APPROVED": "approved",
		}[v]
		return leaverequest.Status(entVal)
	}
	return ""
}

var protoIdentNormalizeRegexpLeaveRequest_Type = regexp.MustCompile(`[^a-zA-Z0-9_]+`)

func protoIdentNormalizeLeaveRequest_Type(e string) string {
	return protoIdentNormalizeRegexpLeaveRequest_Type.ReplaceAllString(e, "_")
}

func toProtoLeaveRequest_Type(e leaverequest.Type) LeaveRequest_Type {
	if v, ok := LeaveRequest_Type_value[strings.ToUpper("TYPE_"+protoIdentNormalizeLeaveRequest_Type(string(e)))]; ok {
		return LeaveRequest_Type(v)
	}
	return LeaveRequest_Type(0)
}

func toEntLeaveRequest_Type(e LeaveRequest_Type) leaverequest.Type {
	if v, ok := LeaveRequest_Type_name[int32(e)]; ok {
		entVal := map[string]string{
			"TYPE_ANNUAL": "annual",
			"TYPE_UNPAID": "unpaid",
		}[v]
		return leaverequest.Type(entVal)
	}
	return ""
}

// toProtoLeaveRequest transforms the ent type to the pb type
func toProtoLeaveRequest(e *ent.LeaveRequest) (*LeaveRequest, error) {
	v := &LeaveRequest{}
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	applicant := int64(e.EmployeeID)
	v.EmployeeId = applicant
	end_at := timestamppb.New(e.EndAt)
	v.EndAt = end_at
	id := int64(e.ID)
	v.Id = id
	organization := int64(e.OrgID)
	v.OrgId = organization
	if e.Reason != nil {
		reason := wrapperspb.String(*e.Reason)
		v.Reason = reason
	}
	start_at := timestamppb.New(e.StartAt)
	v.StartAt = start_at
	status := toProtoLeaveRequest_Status(e.Status)
	v.Status = status
	total_days := e.TotalDays
	v.TotalDays = total_days
	_type := toProtoLeaveRequest_Type(e.Type)
	v.Type = _type
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	if edg := e.Edges.Applicant; edg != nil {
		id := int64(edg.ID)
		v.Applicant = &Employee{
			Id: id,
		}
	}
	for _, edg := range e.Edges.LeaveApproves {
		id := int64(edg.ID)
		v.LeaveApproves = append(v.LeaveApproves, &LeaveApproval{
			Id: id,
		})
	}
	if edg := e.Edges.Organization; edg != nil {
		id := int64(edg.ID)
		v.Organization = &Organization{
			Id: id,
		}
	}
	return v, nil
}

// toProtoLeaveRequestList transforms a list of ent type to a list of pb type
func toProtoLeaveRequestList(e []*ent.LeaveRequest) ([]*LeaveRequest, error) {
	var pbList []*LeaveRequest
	for _, entEntity := range e {
		pbEntity, err := toProtoLeaveRequest(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements LeaveRequestServiceServer.Create
func (svc *LeaveRequestService) Create(ctx context.Context, req *CreateLeaveRequestRequest) (*LeaveRequest, error) {
	leaverequest := req.GetLeaveRequest()
	m, err := svc.createBuilder(leaverequest)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoLeaveRequest(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements LeaveRequestServiceServer.Get
func (svc *LeaveRequestService) Get(ctx context.Context, req *GetLeaveRequestRequest) (*LeaveRequest, error) {
	var (
		err error
		get *ent.LeaveRequest
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetLeaveRequestRequest_VIEW_UNSPECIFIED, GetLeaveRequestRequest_BASIC:
		get, err = svc.client.LeaveRequest.Get(ctx, id)
	case GetLeaveRequestRequest_WITH_EDGE_IDS:
		get, err = svc.client.LeaveRequest.Query().
			Where(leaverequest.ID(id)).
			WithApplicant(func(query *ent.EmployeeQuery) {
				query.Select(employee.FieldID)
			}).
			WithLeaveApproves(func(query *ent.LeaveApprovalQuery) {
				query.Select(leaveapproval.FieldID)
			}).
			WithOrganization(func(query *ent.OrganizationQuery) {
				query.Select(organization.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoLeaveRequest(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements LeaveRequestServiceServer.Update
func (svc *LeaveRequestService) Update(ctx context.Context, req *UpdateLeaveRequestRequest) (*LeaveRequest, error) {
	leaverequest := req.GetLeaveRequest()
	leaverequestID := int(leaverequest.GetId())
	m := svc.client.LeaveRequest.UpdateOneID(leaverequestID)
	leaverequestCreatedAt := runtime.ExtractTime(leaverequest.GetCreatedAt())
	m.SetCreatedAt(leaverequestCreatedAt)
	leaverequestEmployeeID := int(leaverequest.GetEmployeeId())
	m.SetEmployeeID(leaverequestEmployeeID)
	leaverequestEndAt := runtime.ExtractTime(leaverequest.GetEndAt())
	m.SetEndAt(leaverequestEndAt)
	leaverequestOrgID := int(leaverequest.GetOrgId())
	m.SetOrgID(leaverequestOrgID)
	if leaverequest.GetReason() != nil {
		leaverequestReason := leaverequest.GetReason().GetValue()
		m.SetReason(leaverequestReason)
	}
	leaverequestStartAt := runtime.ExtractTime(leaverequest.GetStartAt())
	m.SetStartAt(leaverequestStartAt)
	leaverequestStatus := toEntLeaveRequest_Status(leaverequest.GetStatus())
	m.SetStatus(leaverequestStatus)
	leaverequestTotalDays := float64(leaverequest.GetTotalDays())
	m.SetTotalDays(leaverequestTotalDays)
	leaverequestType := toEntLeaveRequest_Type(leaverequest.GetType())
	m.SetType(leaverequestType)
	leaverequestUpdatedAt := runtime.ExtractTime(leaverequest.GetUpdatedAt())
	m.SetUpdatedAt(leaverequestUpdatedAt)
	if leaverequest.GetApplicant() != nil {
		leaverequestApplicant := int(leaverequest.GetApplicant().GetId())
		m.SetApplicantID(leaverequestApplicant)
	}
	for _, item := range leaverequest.GetLeaveApproves() {
		leaveapproves := int(item.GetId())
		m.AddLeaveApprofeIDs(leaveapproves)
	}
	if leaverequest.GetOrganization() != nil {
		leaverequestOrganization := int(leaverequest.GetOrganization().GetId())
		m.SetOrganizationID(leaverequestOrganization)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoLeaveRequest(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements LeaveRequestServiceServer.Delete
func (svc *LeaveRequestService) Delete(ctx context.Context, req *DeleteLeaveRequestRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.LeaveRequest.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements LeaveRequestServiceServer.List
func (svc *LeaveRequestService) List(ctx context.Context, req *ListLeaveRequestRequest) (*ListLeaveRequestResponse, error) {
	var (
		err      error
		entList  []*ent.LeaveRequest
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.LeaveRequest.Query().
		Order(ent.Desc(leaverequest.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(leaverequest.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListLeaveRequestRequest_VIEW_UNSPECIFIED, ListLeaveRequestRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListLeaveRequestRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithApplicant(func(query *ent.EmployeeQuery) {
				query.Select(employee.FieldID)
			}).
			WithLeaveApproves(func(query *ent.LeaveApprovalQuery) {
				query.Select(leaveapproval.FieldID)
			}).
			WithOrganization(func(query *ent.OrganizationQuery) {
				query.Select(organization.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoLeaveRequestList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListLeaveRequestResponse{
			LeaveRequestList: protoList,
			NextPageToken:    nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements LeaveRequestServiceServer.BatchCreate
func (svc *LeaveRequestService) BatchCreate(ctx context.Context, req *BatchCreateLeaveRequestsRequest) (*BatchCreateLeaveRequestsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.LeaveRequestCreate, len(requests))
	for i, req := range requests {
		leaverequest := req.GetLeaveRequest()
		var err error
		bulk[i], err = svc.createBuilder(leaverequest)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.LeaveRequest.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoLeaveRequestList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateLeaveRequestsResponse{
			LeaveRequests: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *LeaveRequestService) createBuilder(leaverequest *LeaveRequest) (*ent.LeaveRequestCreate, error) {
	m := svc.client.LeaveRequest.Create()
	leaverequestCreatedAt := runtime.ExtractTime(leaverequest.GetCreatedAt())
	m.SetCreatedAt(leaverequestCreatedAt)
	leaverequestEmployeeID := int(leaverequest.GetEmployeeId())
	m.SetEmployeeID(leaverequestEmployeeID)
	leaverequestEndAt := runtime.ExtractTime(leaverequest.GetEndAt())
	m.SetEndAt(leaverequestEndAt)
	leaverequestOrgID := int(leaverequest.GetOrgId())
	m.SetOrgID(leaverequestOrgID)
	if leaverequest.GetReason() != nil {
		leaverequestReason := leaverequest.GetReason().GetValue()
		m.SetReason(leaverequestReason)
	}
	leaverequestStartAt := runtime.ExtractTime(leaverequest.GetStartAt())
	m.SetStartAt(leaverequestStartAt)
	leaverequestStatus := toEntLeaveRequest_Status(leaverequest.GetStatus())
	m.SetStatus(leaverequestStatus)
	leaverequestTotalDays := float64(leaverequest.GetTotalDays())
	m.SetTotalDays(leaverequestTotalDays)
	leaverequestType := toEntLeaveRequest_Type(leaverequest.GetType())
	m.SetType(leaverequestType)
	leaverequestUpdatedAt := runtime.ExtractTime(leaverequest.GetUpdatedAt())
	m.SetUpdatedAt(leaverequestUpdatedAt)
	if leaverequest.GetApplicant() != nil {
		leaverequestApplicant := int(leaverequest.GetApplicant().GetId())
		m.SetApplicantID(leaverequestApplicant)
	}
	for _, item := range leaverequest.GetLeaveApproves() {
		leaveapproves := int(item.GetId())
		m.AddLeaveApprofeIDs(leaveapproves)
	}
	if leaverequest.GetOrganization() != nil {
		leaverequestOrganization := int(leaverequest.GetOrganization().GetId())
		m.SetOrganizationID(leaverequestOrganization)
	}
	return m, nil
}
