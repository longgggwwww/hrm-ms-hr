// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/longgggwwww/hrm-ms-hr/ent"
	employee "github.com/longgggwwww/hrm-ms-hr/ent/employee"
	task "github.com/longgggwwww/hrm-ms-hr/ent/task"
	taskreport "github.com/longgggwwww/hrm-ms-hr/ent/taskreport"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	strconv "strconv"
)

// TaskReportService implements TaskReportServiceServer
type TaskReportService struct {
	client *ent.Client
	UnimplementedTaskReportServiceServer
}

// NewTaskReportService returns a new TaskReportService
func NewTaskReportService(client *ent.Client) *TaskReportService {
	return &TaskReportService{
		client: client,
	}
}

// toProtoTaskReport transforms the ent type to the pb type
func toProtoTaskReport(e *ent.TaskReport) (*TaskReport, error) {
	v := &TaskReport{}
	content := wrapperspb.String(e.Content)
	v.Content = content
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	id := int64(e.ID)
	v.Id = id
	reporter := int64(e.ReporterID)
	v.ReporterId = reporter
	task := int64(e.TaskID)
	v.TaskId = task
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	if edg := e.Edges.Reporter; edg != nil {
		id := int64(edg.ID)
		v.Reporter = &Employee{
			Id: id,
		}
	}
	if edg := e.Edges.Task; edg != nil {
		id := int64(edg.ID)
		v.Task = &Task{
			Id: id,
		}
	}
	return v, nil
}

// toProtoTaskReportList transforms a list of ent type to a list of pb type
func toProtoTaskReportList(e []*ent.TaskReport) ([]*TaskReport, error) {
	var pbList []*TaskReport
	for _, entEntity := range e {
		pbEntity, err := toProtoTaskReport(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements TaskReportServiceServer.Create
func (svc *TaskReportService) Create(ctx context.Context, req *CreateTaskReportRequest) (*TaskReport, error) {
	taskreport := req.GetTaskReport()
	m, err := svc.createBuilder(taskreport)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoTaskReport(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements TaskReportServiceServer.Get
func (svc *TaskReportService) Get(ctx context.Context, req *GetTaskReportRequest) (*TaskReport, error) {
	var (
		err error
		get *ent.TaskReport
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetTaskReportRequest_VIEW_UNSPECIFIED, GetTaskReportRequest_BASIC:
		get, err = svc.client.TaskReport.Get(ctx, id)
	case GetTaskReportRequest_WITH_EDGE_IDS:
		get, err = svc.client.TaskReport.Query().
			Where(taskreport.ID(id)).
			WithReporter(func(query *ent.EmployeeQuery) {
				query.Select(employee.FieldID)
			}).
			WithTask(func(query *ent.TaskQuery) {
				query.Select(task.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoTaskReport(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements TaskReportServiceServer.Update
func (svc *TaskReportService) Update(ctx context.Context, req *UpdateTaskReportRequest) (*TaskReport, error) {
	taskreport := req.GetTaskReport()
	taskreportID := int(taskreport.GetId())
	m := svc.client.TaskReport.UpdateOneID(taskreportID)
	if taskreport.GetContent() != nil {
		taskreportContent := taskreport.GetContent().GetValue()
		m.SetContent(taskreportContent)
	}
	taskreportReporterID := int(taskreport.GetReporterId())
	m.SetReporterID(taskreportReporterID)
	taskreportTaskID := int(taskreport.GetTaskId())
	m.SetTaskID(taskreportTaskID)
	taskreportUpdatedAt := runtime.ExtractTime(taskreport.GetUpdatedAt())
	m.SetUpdatedAt(taskreportUpdatedAt)
	if taskreport.GetReporter() != nil {
		taskreportReporter := int(taskreport.GetReporter().GetId())
		m.SetReporterID(taskreportReporter)
	}
	if taskreport.GetTask() != nil {
		taskreportTask := int(taskreport.GetTask().GetId())
		m.SetTaskID(taskreportTask)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoTaskReport(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements TaskReportServiceServer.Delete
func (svc *TaskReportService) Delete(ctx context.Context, req *DeleteTaskReportRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.TaskReport.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements TaskReportServiceServer.List
func (svc *TaskReportService) List(ctx context.Context, req *ListTaskReportRequest) (*ListTaskReportResponse, error) {
	var (
		err      error
		entList  []*ent.TaskReport
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.TaskReport.Query().
		Order(ent.Desc(taskreport.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(taskreport.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListTaskReportRequest_VIEW_UNSPECIFIED, ListTaskReportRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListTaskReportRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithReporter(func(query *ent.EmployeeQuery) {
				query.Select(employee.FieldID)
			}).
			WithTask(func(query *ent.TaskQuery) {
				query.Select(task.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoTaskReportList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListTaskReportResponse{
			TaskReportList: protoList,
			NextPageToken:  nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements TaskReportServiceServer.BatchCreate
func (svc *TaskReportService) BatchCreate(ctx context.Context, req *BatchCreateTaskReportsRequest) (*BatchCreateTaskReportsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.TaskReportCreate, len(requests))
	for i, req := range requests {
		taskreport := req.GetTaskReport()
		var err error
		bulk[i], err = svc.createBuilder(taskreport)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.TaskReport.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoTaskReportList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateTaskReportsResponse{
			TaskReports: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *TaskReportService) createBuilder(taskreport *TaskReport) (*ent.TaskReportCreate, error) {
	m := svc.client.TaskReport.Create()
	if taskreport.GetContent() != nil {
		taskreportContent := taskreport.GetContent().GetValue()
		m.SetContent(taskreportContent)
	}
	taskreportCreatedAt := runtime.ExtractTime(taskreport.GetCreatedAt())
	m.SetCreatedAt(taskreportCreatedAt)
	taskreportReporterID := int(taskreport.GetReporterId())
	m.SetReporterID(taskreportReporterID)
	taskreportTaskID := int(taskreport.GetTaskId())
	m.SetTaskID(taskreportTaskID)
	taskreportUpdatedAt := runtime.ExtractTime(taskreport.GetUpdatedAt())
	m.SetUpdatedAt(taskreportUpdatedAt)
	if taskreport.GetReporter() != nil {
		taskreportReporter := int(taskreport.GetReporter().GetId())
		m.SetReporterID(taskreportReporter)
	}
	if taskreport.GetTask() != nil {
		taskreportTask := int(taskreport.GetTask().GetId())
		m.SetTaskID(taskreportTask)
	}
	return m, nil
}
