// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	uuid "github.com/google/uuid"
	ent "github.com/longgggwwww/hrm-ms-hr/ent"
	project "github.com/longgggwwww/hrm-ms-hr/ent/project"
	task "github.com/longgggwwww/hrm-ms-hr/ent/task"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// TaskService implements TaskServiceServer
type TaskService struct {
	client *ent.Client
	UnimplementedTaskServiceServer
}

// NewTaskService returns a new TaskService
func NewTaskService(client *ent.Client) *TaskService {
	return &TaskService{
		client: client,
	}
}

// toProtoTask transforms the ent type to the pb type
func toProtoTask(e *ent.Task) (*Task, error) {
	v := &Task{}
	branch_id, err := e.BranchID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.BranchId = branch_id
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	creator_id, err := e.CreatorID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.CreatorId = creator_id
	description := wrapperspb.String(e.Description)
	v.Description = description
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	process := int64(e.Process)
	v.Process = process
	project, err := e.ProjectID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.ProjectId = project
	start_at := timestamppb.New(e.StartAt)
	v.StartAt = start_at
	status := e.Status
	v.Status = status
	title := e.Title
	v.Title = title
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	updater_id, err := e.UpdaterID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.UpdaterId = updater_id
	if edg := e.Edges.Project; edg != nil {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Project = &Project{
			Id: id,
		}
	}
	return v, nil
}

// toProtoTaskList transforms a list of ent type to a list of pb type
func toProtoTaskList(e []*ent.Task) ([]*Task, error) {
	var pbList []*Task
	for _, entEntity := range e {
		pbEntity, err := toProtoTask(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements TaskServiceServer.Create
func (svc *TaskService) Create(ctx context.Context, req *CreateTaskRequest) (*Task, error) {
	task := req.GetTask()
	m, err := svc.createBuilder(task)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoTask(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements TaskServiceServer.Get
func (svc *TaskService) Get(ctx context.Context, req *GetTaskRequest) (*Task, error) {
	var (
		err error
		get *ent.Task
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetTaskRequest_VIEW_UNSPECIFIED, GetTaskRequest_BASIC:
		get, err = svc.client.Task.Get(ctx, id)
	case GetTaskRequest_WITH_EDGE_IDS:
		get, err = svc.client.Task.Query().
			Where(task.ID(id)).
			WithProject(func(query *ent.ProjectQuery) {
				query.Select(project.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoTask(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements TaskServiceServer.Update
func (svc *TaskService) Update(ctx context.Context, req *UpdateTaskRequest) (*Task, error) {
	task := req.GetTask()
	var taskID uuid.UUID
	if err := (&taskID).UnmarshalBinary(task.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.Task.UpdateOneID(taskID)
	var taskBranchID uuid.NullUUID
	if err := (&taskBranchID).UnmarshalBinary(task.GetBranchId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetBranchID(taskBranchID)
	taskCreatedAt := runtime.ExtractTime(task.GetCreatedAt())
	m.SetCreatedAt(taskCreatedAt)
	var taskCreatorID uuid.UUID
	if err := (&taskCreatorID).UnmarshalBinary(task.GetCreatorId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetCreatorID(taskCreatorID)
	if task.GetDescription() != nil {
		taskDescription := task.GetDescription().GetValue()
		m.SetDescription(taskDescription)
	}
	taskProcess := int(task.GetProcess())
	m.SetProcess(taskProcess)
	var taskProjectID uuid.UUID
	if err := (&taskProjectID).UnmarshalBinary(task.GetProjectId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetProjectID(taskProjectID)
	taskStartAt := runtime.ExtractTime(task.GetStartAt())
	m.SetStartAt(taskStartAt)
	taskStatus := task.GetStatus()
	m.SetStatus(taskStatus)
	taskTitle := task.GetTitle()
	m.SetTitle(taskTitle)
	taskUpdatedAt := runtime.ExtractTime(task.GetUpdatedAt())
	m.SetUpdatedAt(taskUpdatedAt)
	var taskUpdaterID uuid.NullUUID
	if err := (&taskUpdaterID).UnmarshalBinary(task.GetUpdaterId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetUpdaterID(taskUpdaterID)
	if task.GetProject() != nil {
		var taskProject uuid.UUID
		if err := (&taskProject).UnmarshalBinary(task.GetProject().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetProjectID(taskProject)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoTask(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements TaskServiceServer.Delete
func (svc *TaskService) Delete(ctx context.Context, req *DeleteTaskRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.Task.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements TaskServiceServer.List
func (svc *TaskService) List(ctx context.Context, req *ListTaskRequest) (*ListTaskResponse, error) {
	var (
		err      error
		entList  []*ent.Task
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Task.Query().
		Order(ent.Desc(task.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken, err := uuid.ParseBytes(bytes)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		listQuery = listQuery.
			Where(task.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListTaskRequest_VIEW_UNSPECIFIED, ListTaskRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListTaskRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithProject(func(query *ent.ProjectQuery) {
				query.Select(project.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoTaskList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListTaskResponse{
			TaskList:      protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements TaskServiceServer.BatchCreate
func (svc *TaskService) BatchCreate(ctx context.Context, req *BatchCreateTasksRequest) (*BatchCreateTasksResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.TaskCreate, len(requests))
	for i, req := range requests {
		task := req.GetTask()
		var err error
		bulk[i], err = svc.createBuilder(task)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Task.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoTaskList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateTasksResponse{
			Tasks: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *TaskService) createBuilder(task *Task) (*ent.TaskCreate, error) {
	m := svc.client.Task.Create()
	var taskBranchID uuid.NullUUID
	if err := (&taskBranchID).UnmarshalBinary(task.GetBranchId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetBranchID(taskBranchID)
	taskCreatedAt := runtime.ExtractTime(task.GetCreatedAt())
	m.SetCreatedAt(taskCreatedAt)
	var taskCreatorID uuid.UUID
	if err := (&taskCreatorID).UnmarshalBinary(task.GetCreatorId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetCreatorID(taskCreatorID)
	if task.GetDescription() != nil {
		taskDescription := task.GetDescription().GetValue()
		m.SetDescription(taskDescription)
	}
	taskProcess := int(task.GetProcess())
	m.SetProcess(taskProcess)
	var taskProjectID uuid.UUID
	if err := (&taskProjectID).UnmarshalBinary(task.GetProjectId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetProjectID(taskProjectID)
	taskStartAt := runtime.ExtractTime(task.GetStartAt())
	m.SetStartAt(taskStartAt)
	taskStatus := task.GetStatus()
	m.SetStatus(taskStatus)
	taskTitle := task.GetTitle()
	m.SetTitle(taskTitle)
	taskUpdatedAt := runtime.ExtractTime(task.GetUpdatedAt())
	m.SetUpdatedAt(taskUpdatedAt)
	var taskUpdaterID uuid.NullUUID
	if err := (&taskUpdaterID).UnmarshalBinary(task.GetUpdaterId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetUpdaterID(taskUpdaterID)
	if task.GetProject() != nil {
		var taskProject uuid.UUID
		if err := (&taskProject).UnmarshalBinary(task.GetProject().GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.SetProjectID(taskProject)
	}
	return m, nil
}
