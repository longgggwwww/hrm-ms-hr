// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/longgggwwww/hrm-ms-hr/ent"
	organization "github.com/longgggwwww/hrm-ms-hr/ent/organization"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	strconv "strconv"
)

// OrganizationService implements OrganizationServiceServer
type OrganizationService struct {
	client *ent.Client
	UnimplementedOrganizationServiceServer
}

// NewOrganizationService returns a new OrganizationService
func NewOrganizationService(client *ent.Client) *OrganizationService {
	return &OrganizationService{
		client: client,
	}
}

// toProtoOrganization transforms the ent type to the pb type
func toProtoOrganization(e *ent.Organization) (*Organization, error) {
	v := &Organization{}
	if e.Address != nil {
		address := wrapperspb.String(*e.Address)
		v.Address = address
	}
	code := e.Code
	v.Code = code
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	if e.Email != nil {
		email := wrapperspb.String(*e.Email)
		v.Email = email
	}
	id := int64(e.ID)
	v.Id = id
	if e.Logo != nil {
		logo := wrapperspb.String(*e.Logo)
		v.Logo = logo
	}
	name := e.Name
	v.Name = name
	if e.ParentID != nil {
		parent := wrapperspb.Int64(int64(*e.ParentID))
		v.ParentId = parent
	}
	if e.Phone != nil {
		phone := wrapperspb.String(*e.Phone)
		v.Phone = phone
	}
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	if e.Website != nil {
		website := wrapperspb.String(*e.Website)
		v.Website = website
	}
	for _, edg := range e.Edges.Children {
		id := int64(edg.ID)
		v.Children = append(v.Children, &Organization{
			Id: id,
		})
	}
	if edg := e.Edges.Parent; edg != nil {
		id := int64(edg.ID)
		v.Parent = &Organization{
			Id: id,
		}
	}
	return v, nil
}

// toProtoOrganizationList transforms a list of ent type to a list of pb type
func toProtoOrganizationList(e []*ent.Organization) ([]*Organization, error) {
	var pbList []*Organization
	for _, entEntity := range e {
		pbEntity, err := toProtoOrganization(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements OrganizationServiceServer.Create
func (svc *OrganizationService) Create(ctx context.Context, req *CreateOrganizationRequest) (*Organization, error) {
	organization := req.GetOrganization()
	m, err := svc.createBuilder(organization)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoOrganization(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements OrganizationServiceServer.Get
func (svc *OrganizationService) Get(ctx context.Context, req *GetOrganizationRequest) (*Organization, error) {
	var (
		err error
		get *ent.Organization
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetOrganizationRequest_VIEW_UNSPECIFIED, GetOrganizationRequest_BASIC:
		get, err = svc.client.Organization.Get(ctx, id)
	case GetOrganizationRequest_WITH_EDGE_IDS:
		get, err = svc.client.Organization.Query().
			Where(organization.ID(id)).
			WithChildren(func(query *ent.OrganizationQuery) {
				query.Select(organization.FieldID)
			}).
			WithParent(func(query *ent.OrganizationQuery) {
				query.Select(organization.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoOrganization(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements OrganizationServiceServer.Update
func (svc *OrganizationService) Update(ctx context.Context, req *UpdateOrganizationRequest) (*Organization, error) {
	organization := req.GetOrganization()
	organizationID := int(organization.GetId())
	m := svc.client.Organization.UpdateOneID(organizationID)
	if organization.GetAddress() != nil {
		organizationAddress := organization.GetAddress().GetValue()
		m.SetAddress(organizationAddress)
	}
	organizationCode := organization.GetCode()
	m.SetCode(organizationCode)
	organizationCreatedAt := runtime.ExtractTime(organization.GetCreatedAt())
	m.SetCreatedAt(organizationCreatedAt)
	if organization.GetEmail() != nil {
		organizationEmail := organization.GetEmail().GetValue()
		m.SetEmail(organizationEmail)
	}
	if organization.GetLogo() != nil {
		organizationLogo := organization.GetLogo().GetValue()
		m.SetLogo(organizationLogo)
	}
	organizationName := organization.GetName()
	m.SetName(organizationName)
	if organization.GetParentId() != nil {
		organizationParentID := int(organization.GetParentId().GetValue())
		m.SetParentID(organizationParentID)
	}
	if organization.GetPhone() != nil {
		organizationPhone := organization.GetPhone().GetValue()
		m.SetPhone(organizationPhone)
	}
	organizationUpdatedAt := runtime.ExtractTime(organization.GetUpdatedAt())
	m.SetUpdatedAt(organizationUpdatedAt)
	if organization.GetWebsite() != nil {
		organizationWebsite := organization.GetWebsite().GetValue()
		m.SetWebsite(organizationWebsite)
	}
	for _, item := range organization.GetChildren() {
		children := int(item.GetId())
		m.AddChildIDs(children)
	}
	if organization.GetParent() != nil {
		organizationParent := int(organization.GetParent().GetId())
		m.SetParentID(organizationParent)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoOrganization(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements OrganizationServiceServer.Delete
func (svc *OrganizationService) Delete(ctx context.Context, req *DeleteOrganizationRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Organization.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements OrganizationServiceServer.List
func (svc *OrganizationService) List(ctx context.Context, req *ListOrganizationRequest) (*ListOrganizationResponse, error) {
	var (
		err      error
		entList  []*ent.Organization
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Organization.Query().
		Order(ent.Desc(organization.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(organization.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListOrganizationRequest_VIEW_UNSPECIFIED, ListOrganizationRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListOrganizationRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithChildren(func(query *ent.OrganizationQuery) {
				query.Select(organization.FieldID)
			}).
			WithParent(func(query *ent.OrganizationQuery) {
				query.Select(organization.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoOrganizationList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListOrganizationResponse{
			OrganizationList: protoList,
			NextPageToken:    nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements OrganizationServiceServer.BatchCreate
func (svc *OrganizationService) BatchCreate(ctx context.Context, req *BatchCreateOrganizationsRequest) (*BatchCreateOrganizationsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.OrganizationCreate, len(requests))
	for i, req := range requests {
		organization := req.GetOrganization()
		var err error
		bulk[i], err = svc.createBuilder(organization)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Organization.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoOrganizationList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateOrganizationsResponse{
			Organizations: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *OrganizationService) createBuilder(organization *Organization) (*ent.OrganizationCreate, error) {
	m := svc.client.Organization.Create()
	if organization.GetAddress() != nil {
		organizationAddress := organization.GetAddress().GetValue()
		m.SetAddress(organizationAddress)
	}
	organizationCode := organization.GetCode()
	m.SetCode(organizationCode)
	organizationCreatedAt := runtime.ExtractTime(organization.GetCreatedAt())
	m.SetCreatedAt(organizationCreatedAt)
	if organization.GetEmail() != nil {
		organizationEmail := organization.GetEmail().GetValue()
		m.SetEmail(organizationEmail)
	}
	if organization.GetLogo() != nil {
		organizationLogo := organization.GetLogo().GetValue()
		m.SetLogo(organizationLogo)
	}
	organizationName := organization.GetName()
	m.SetName(organizationName)
	if organization.GetParentId() != nil {
		organizationParentID := int(organization.GetParentId().GetValue())
		m.SetParentID(organizationParentID)
	}
	if organization.GetPhone() != nil {
		organizationPhone := organization.GetPhone().GetValue()
		m.SetPhone(organizationPhone)
	}
	organizationUpdatedAt := runtime.ExtractTime(organization.GetUpdatedAt())
	m.SetUpdatedAt(organizationUpdatedAt)
	if organization.GetWebsite() != nil {
		organizationWebsite := organization.GetWebsite().GetValue()
		m.SetWebsite(organizationWebsite)
	}
	for _, item := range organization.GetChildren() {
		children := int(item.GetId())
		m.AddChildIDs(children)
	}
	if organization.GetParent() != nil {
		organizationParent := int(organization.GetParent().GetId())
		m.SetParentID(organizationParent)
	}
	return m, nil
}
