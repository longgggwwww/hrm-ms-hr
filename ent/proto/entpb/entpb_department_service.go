// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/longgggwwww/hrm-ms-hr/ent"
	department "github.com/longgggwwww/hrm-ms-hr/ent/department"
	organization "github.com/longgggwwww/hrm-ms-hr/ent/organization"
	position "github.com/longgggwwww/hrm-ms-hr/ent/position"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	strconv "strconv"
)

// DepartmentService implements DepartmentServiceServer
type DepartmentService struct {
	client *ent.Client
	UnimplementedDepartmentServiceServer
}

// NewDepartmentService returns a new DepartmentService
func NewDepartmentService(client *ent.Client) *DepartmentService {
	return &DepartmentService{
		client: client,
	}
}

// toProtoDepartment transforms the ent type to the pb type
func toProtoDepartment(e *ent.Department) (*Department, error) {
	v := &Department{}
	code := e.Code
	v.Code = code
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	id := int64(e.ID)
	v.Id = id
	name := e.Name
	v.Name = name
	organization := int64(e.OrgID)
	v.OrgId = organization
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	if e.ZaloGid != nil {
		zalo_gid := wrapperspb.String(*e.ZaloGid)
		v.ZaloGid = zalo_gid
	}
	if edg := e.Edges.Organization; edg != nil {
		id := int64(edg.ID)
		v.Organization = &Organization{
			Id: id,
		}
	}
	for _, edg := range e.Edges.Positions {
		id := int64(edg.ID)
		v.Positions = append(v.Positions, &Position{
			Id: id,
		})
	}
	return v, nil
}

// toProtoDepartmentList transforms a list of ent type to a list of pb type
func toProtoDepartmentList(e []*ent.Department) ([]*Department, error) {
	var pbList []*Department
	for _, entEntity := range e {
		pbEntity, err := toProtoDepartment(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements DepartmentServiceServer.Create
func (svc *DepartmentService) Create(ctx context.Context, req *CreateDepartmentRequest) (*Department, error) {
	department := req.GetDepartment()
	m, err := svc.createBuilder(department)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoDepartment(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements DepartmentServiceServer.Get
func (svc *DepartmentService) Get(ctx context.Context, req *GetDepartmentRequest) (*Department, error) {
	var (
		err error
		get *ent.Department
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetDepartmentRequest_VIEW_UNSPECIFIED, GetDepartmentRequest_BASIC:
		get, err = svc.client.Department.Get(ctx, id)
	case GetDepartmentRequest_WITH_EDGE_IDS:
		get, err = svc.client.Department.Query().
			Where(department.ID(id)).
			WithOrganization(func(query *ent.OrganizationQuery) {
				query.Select(organization.FieldID)
			}).
			WithPositions(func(query *ent.PositionQuery) {
				query.Select(position.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoDepartment(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements DepartmentServiceServer.Update
func (svc *DepartmentService) Update(ctx context.Context, req *UpdateDepartmentRequest) (*Department, error) {
	department := req.GetDepartment()
	departmentID := int(department.GetId())
	m := svc.client.Department.UpdateOneID(departmentID)
	departmentCode := department.GetCode()
	m.SetCode(departmentCode)
	departmentName := department.GetName()
	m.SetName(departmentName)
	departmentOrgID := int(department.GetOrgId())
	m.SetOrgID(departmentOrgID)
	departmentUpdatedAt := runtime.ExtractTime(department.GetUpdatedAt())
	m.SetUpdatedAt(departmentUpdatedAt)
	if department.GetZaloGid() != nil {
		departmentZaloGid := department.GetZaloGid().GetValue()
		m.SetZaloGid(departmentZaloGid)
	}
	if department.GetOrganization() != nil {
		departmentOrganization := int(department.GetOrganization().GetId())
		m.SetOrganizationID(departmentOrganization)
	}
	for _, item := range department.GetPositions() {
		positions := int(item.GetId())
		m.AddPositionIDs(positions)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoDepartment(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements DepartmentServiceServer.Delete
func (svc *DepartmentService) Delete(ctx context.Context, req *DeleteDepartmentRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Department.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements DepartmentServiceServer.List
func (svc *DepartmentService) List(ctx context.Context, req *ListDepartmentRequest) (*ListDepartmentResponse, error) {
	var (
		err      error
		entList  []*ent.Department
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Department.Query().
		Order(ent.Desc(department.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(department.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListDepartmentRequest_VIEW_UNSPECIFIED, ListDepartmentRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListDepartmentRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithOrganization(func(query *ent.OrganizationQuery) {
				query.Select(organization.FieldID)
			}).
			WithPositions(func(query *ent.PositionQuery) {
				query.Select(position.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoDepartmentList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListDepartmentResponse{
			DepartmentList: protoList,
			NextPageToken:  nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements DepartmentServiceServer.BatchCreate
func (svc *DepartmentService) BatchCreate(ctx context.Context, req *BatchCreateDepartmentsRequest) (*BatchCreateDepartmentsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.DepartmentCreate, len(requests))
	for i, req := range requests {
		department := req.GetDepartment()
		var err error
		bulk[i], err = svc.createBuilder(department)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Department.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoDepartmentList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateDepartmentsResponse{
			Departments: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *DepartmentService) createBuilder(department *Department) (*ent.DepartmentCreate, error) {
	m := svc.client.Department.Create()
	departmentCode := department.GetCode()
	m.SetCode(departmentCode)
	departmentCreatedAt := runtime.ExtractTime(department.GetCreatedAt())
	m.SetCreatedAt(departmentCreatedAt)
	departmentName := department.GetName()
	m.SetName(departmentName)
	departmentOrgID := int(department.GetOrgId())
	m.SetOrgID(departmentOrgID)
	departmentUpdatedAt := runtime.ExtractTime(department.GetUpdatedAt())
	m.SetUpdatedAt(departmentUpdatedAt)
	if department.GetZaloGid() != nil {
		departmentZaloGid := department.GetZaloGid().GetValue()
		m.SetZaloGid(departmentZaloGid)
	}
	if department.GetOrganization() != nil {
		departmentOrganization := int(department.GetOrganization().GetId())
		m.SetOrganizationID(departmentOrganization)
	}
	for _, item := range department.GetPositions() {
		positions := int(item.GetId())
		m.AddPositionIDs(positions)
	}
	return m, nil
}
