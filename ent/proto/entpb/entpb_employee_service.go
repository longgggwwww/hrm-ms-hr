// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/longgggwwww/hrm-ms-hr/ent"
	employee "github.com/longgggwwww/hrm-ms-hr/ent/employee"
	position "github.com/longgggwwww/hrm-ms-hr/ent/position"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	regexp "regexp"
	strconv "strconv"
	strings "strings"
)

// EmployeeService implements EmployeeServiceServer
type EmployeeService struct {
	client *ent.Client
	UnimplementedEmployeeServiceServer
}

// NewEmployeeService returns a new EmployeeService
func NewEmployeeService(client *ent.Client) *EmployeeService {
	return &EmployeeService{
		client: client,
	}
}

var protoIdentNormalizeRegexpEmployee_Status = regexp.MustCompile(`[^a-zA-Z0-9_]+`)

func protoIdentNormalizeEmployee_Status(e string) string {
	return protoIdentNormalizeRegexpEmployee_Status.ReplaceAllString(e, "_")
}

func toProtoEmployee_Status(e employee.Status) Employee_Status {
	if v, ok := Employee_Status_value[strings.ToUpper("STATUS_"+protoIdentNormalizeEmployee_Status(string(e)))]; ok {
		return Employee_Status(v)
	}
	return Employee_Status(0)
}

func toEntEmployee_Status(e Employee_Status) employee.Status {
	if v, ok := Employee_Status_name[int32(e)]; ok {
		entVal := map[string]string{
			"STATUS_ACTIVE":   "active",
			"STATUS_INACTIVE": "inactive",
		}[v]
		return employee.Status(entVal)
	}
	return ""
}

// toProtoEmployee transforms the ent type to the pb type
func toProtoEmployee(e *ent.Employee) (*Employee, error) {
	v := &Employee{}
	code := e.Code
	v.Code = code
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	id := int64(e.ID)
	v.Id = id
	joining_at := timestamppb.New(e.JoiningAt)
	v.JoiningAt = joining_at
	org_id := int64(e.OrgID)
	v.OrgId = org_id
	position := int64(e.PositionID)
	v.PositionId = position
	status := toProtoEmployee_Status(e.Status)
	v.Status = status
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	user_id := wrapperspb.String(e.UserID)
	v.UserId = user_id
	if edg := e.Edges.Position; edg != nil {
		id := int64(edg.ID)
		v.Position = &Position{
			Id: id,
		}
	}
	return v, nil
}

// toProtoEmployeeList transforms a list of ent type to a list of pb type
func toProtoEmployeeList(e []*ent.Employee) ([]*Employee, error) {
	var pbList []*Employee
	for _, entEntity := range e {
		pbEntity, err := toProtoEmployee(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements EmployeeServiceServer.Create
func (svc *EmployeeService) Create(ctx context.Context, req *CreateEmployeeRequest) (*Employee, error) {
	employee := req.GetEmployee()
	m, err := svc.createBuilder(employee)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoEmployee(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements EmployeeServiceServer.Get
func (svc *EmployeeService) Get(ctx context.Context, req *GetEmployeeRequest) (*Employee, error) {
	var (
		err error
		get *ent.Employee
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetEmployeeRequest_VIEW_UNSPECIFIED, GetEmployeeRequest_BASIC:
		get, err = svc.client.Employee.Get(ctx, id)
	case GetEmployeeRequest_WITH_EDGE_IDS:
		get, err = svc.client.Employee.Query().
			Where(employee.ID(id)).
			WithPosition(func(query *ent.PositionQuery) {
				query.Select(position.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoEmployee(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements EmployeeServiceServer.Update
func (svc *EmployeeService) Update(ctx context.Context, req *UpdateEmployeeRequest) (*Employee, error) {
	employee := req.GetEmployee()
	employeeID := int(employee.GetId())
	m := svc.client.Employee.UpdateOneID(employeeID)
	employeeCode := employee.GetCode()
	m.SetCode(employeeCode)
	employeeCreatedAt := runtime.ExtractTime(employee.GetCreatedAt())
	m.SetCreatedAt(employeeCreatedAt)
	employeeJoiningAt := runtime.ExtractTime(employee.GetJoiningAt())
	m.SetJoiningAt(employeeJoiningAt)
	employeeOrgID := int(employee.GetOrgId())
	m.SetOrgID(employeeOrgID)
	employeePositionID := int(employee.GetPositionId())
	m.SetPositionID(employeePositionID)
	employeeStatus := toEntEmployee_Status(employee.GetStatus())
	m.SetStatus(employeeStatus)
	employeeUpdatedAt := runtime.ExtractTime(employee.GetUpdatedAt())
	m.SetUpdatedAt(employeeUpdatedAt)
	if employee.GetUserId() != nil {
		employeeUserID := employee.GetUserId().GetValue()
		m.SetUserID(employeeUserID)
	}
	if employee.GetPosition() != nil {
		employeePosition := int(employee.GetPosition().GetId())
		m.SetPositionID(employeePosition)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoEmployee(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements EmployeeServiceServer.Delete
func (svc *EmployeeService) Delete(ctx context.Context, req *DeleteEmployeeRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Employee.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements EmployeeServiceServer.List
func (svc *EmployeeService) List(ctx context.Context, req *ListEmployeeRequest) (*ListEmployeeResponse, error) {
	var (
		err      error
		entList  []*ent.Employee
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Employee.Query().
		Order(ent.Desc(employee.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(employee.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListEmployeeRequest_VIEW_UNSPECIFIED, ListEmployeeRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListEmployeeRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithPosition(func(query *ent.PositionQuery) {
				query.Select(position.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoEmployeeList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListEmployeeResponse{
			EmployeeList:  protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements EmployeeServiceServer.BatchCreate
func (svc *EmployeeService) BatchCreate(ctx context.Context, req *BatchCreateEmployeesRequest) (*BatchCreateEmployeesResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.EmployeeCreate, len(requests))
	for i, req := range requests {
		employee := req.GetEmployee()
		var err error
		bulk[i], err = svc.createBuilder(employee)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Employee.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoEmployeeList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateEmployeesResponse{
			Employees: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *EmployeeService) createBuilder(employee *Employee) (*ent.EmployeeCreate, error) {
	m := svc.client.Employee.Create()
	employeeCode := employee.GetCode()
	m.SetCode(employeeCode)
	employeeCreatedAt := runtime.ExtractTime(employee.GetCreatedAt())
	m.SetCreatedAt(employeeCreatedAt)
	employeeJoiningAt := runtime.ExtractTime(employee.GetJoiningAt())
	m.SetJoiningAt(employeeJoiningAt)
	employeeOrgID := int(employee.GetOrgId())
	m.SetOrgID(employeeOrgID)
	employeePositionID := int(employee.GetPositionId())
	m.SetPositionID(employeePositionID)
	employeeStatus := toEntEmployee_Status(employee.GetStatus())
	m.SetStatus(employeeStatus)
	employeeUpdatedAt := runtime.ExtractTime(employee.GetUpdatedAt())
	m.SetUpdatedAt(employeeUpdatedAt)
	if employee.GetUserId() != nil {
		employeeUserID := employee.GetUserId().GetValue()
		m.SetUserID(employeeUserID)
	}
	if employee.GetPosition() != nil {
		employeePosition := int(employee.GetPosition().GetId())
		m.SetPositionID(employeePosition)
	}
	return m, nil
}
