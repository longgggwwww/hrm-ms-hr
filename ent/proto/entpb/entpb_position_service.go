// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	uuid "github.com/google/uuid"
	ent "github.com/longgggwwww/hrm-ms-hr/ent"
	position "github.com/longgggwwww/hrm-ms-hr/ent/position"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// PositionService implements PositionServiceServer
type PositionService struct {
	client *ent.Client
	UnimplementedPositionServiceServer
}

// NewPositionService returns a new PositionService
func NewPositionService(client *ent.Client) *PositionService {
	return &PositionService{
		client: client,
	}
}

// toProtoPosition transforms the ent type to the pb type
func toProtoPosition(e *ent.Position) (*Position, error) {
	v := &Position{}
	code := e.Code
	v.Code = code
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	department_id, err := e.DepartmentID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.DepartmentId = department_id
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	name := e.Name
	v.Name = name
	parent_id, err := e.ParentID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.ParentId = parent_id
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	return v, nil
}

// toProtoPositionList transforms a list of ent type to a list of pb type
func toProtoPositionList(e []*ent.Position) ([]*Position, error) {
	var pbList []*Position
	for _, entEntity := range e {
		pbEntity, err := toProtoPosition(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements PositionServiceServer.Create
func (svc *PositionService) Create(ctx context.Context, req *CreatePositionRequest) (*Position, error) {
	position := req.GetPosition()
	m, err := svc.createBuilder(position)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoPosition(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements PositionServiceServer.Get
func (svc *PositionService) Get(ctx context.Context, req *GetPositionRequest) (*Position, error) {
	var (
		err error
		get *ent.Position
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetPositionRequest_VIEW_UNSPECIFIED, GetPositionRequest_BASIC:
		get, err = svc.client.Position.Get(ctx, id)
	case GetPositionRequest_WITH_EDGE_IDS:
		get, err = svc.client.Position.Query().
			Where(position.ID(id)).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoPosition(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements PositionServiceServer.Update
func (svc *PositionService) Update(ctx context.Context, req *UpdatePositionRequest) (*Position, error) {
	position := req.GetPosition()
	var positionID uuid.UUID
	if err := (&positionID).UnmarshalBinary(position.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.Position.UpdateOneID(positionID)
	positionCode := position.GetCode()
	m.SetCode(positionCode)
	var positionDepartmentID uuid.UUID
	if err := (&positionDepartmentID).UnmarshalBinary(position.GetDepartmentId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetDepartmentID(positionDepartmentID)
	positionName := position.GetName()
	m.SetName(positionName)
	var positionParentID uuid.UUID
	if err := (&positionParentID).UnmarshalBinary(position.GetParentId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetParentID(positionParentID)
	positionUpdatedAt := runtime.ExtractTime(position.GetUpdatedAt())
	m.SetUpdatedAt(positionUpdatedAt)

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoPosition(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements PositionServiceServer.Delete
func (svc *PositionService) Delete(ctx context.Context, req *DeletePositionRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.Position.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements PositionServiceServer.List
func (svc *PositionService) List(ctx context.Context, req *ListPositionRequest) (*ListPositionResponse, error) {
	var (
		err      error
		entList  []*ent.Position
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Position.Query().
		Order(ent.Desc(position.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken, err := uuid.ParseBytes(bytes)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		listQuery = listQuery.
			Where(position.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListPositionRequest_VIEW_UNSPECIFIED, ListPositionRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListPositionRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoPositionList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListPositionResponse{
			PositionList:  protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements PositionServiceServer.BatchCreate
func (svc *PositionService) BatchCreate(ctx context.Context, req *BatchCreatePositionsRequest) (*BatchCreatePositionsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.PositionCreate, len(requests))
	for i, req := range requests {
		position := req.GetPosition()
		var err error
		bulk[i], err = svc.createBuilder(position)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Position.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoPositionList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreatePositionsResponse{
			Positions: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *PositionService) createBuilder(position *Position) (*ent.PositionCreate, error) {
	m := svc.client.Position.Create()
	positionCode := position.GetCode()
	m.SetCode(positionCode)
	positionCreatedAt := runtime.ExtractTime(position.GetCreatedAt())
	m.SetCreatedAt(positionCreatedAt)
	var positionDepartmentID uuid.UUID
	if err := (&positionDepartmentID).UnmarshalBinary(position.GetDepartmentId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetDepartmentID(positionDepartmentID)
	positionName := position.GetName()
	m.SetName(positionName)
	var positionParentID uuid.UUID
	if err := (&positionParentID).UnmarshalBinary(position.GetParentId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m.SetParentID(positionParentID)
	positionUpdatedAt := runtime.ExtractTime(position.GetUpdatedAt())
	m.SetUpdatedAt(positionUpdatedAt)
	return m, nil
}
