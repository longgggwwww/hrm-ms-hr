// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	runtime "entgo.io/contrib/entproto/runtime"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	uuid "github.com/google/uuid"
	ent "github.com/longgggwwww/hrm-ms-hr/ent"
	branch "github.com/longgggwwww/hrm-ms-hr/ent/branch"
	company "github.com/longgggwwww/hrm-ms-hr/ent/company"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// CompanyService implements CompanyServiceServer
type CompanyService struct {
	client *ent.Client
	UnimplementedCompanyServiceServer
}

// NewCompanyService returns a new CompanyService
func NewCompanyService(client *ent.Client) *CompanyService {
	return &CompanyService{
		client: client,
	}
}

// toProtoCompany transforms the ent type to the pb type
func toProtoCompany(e *ent.Company) (*Company, error) {
	v := &Company{}
	address := e.Address
	v.Address = address
	created_at := timestamppb.New(e.CreatedAt)
	v.CreatedAt = created_at
	id, err := e.ID.MarshalBinary()
	if err != nil {
		return nil, err
	}
	v.Id = id
	name := e.Name
	v.Name = name
	updated_at := timestamppb.New(e.UpdatedAt)
	v.UpdatedAt = updated_at
	for _, edg := range e.Edges.Branches {
		id, err := edg.ID.MarshalBinary()
		if err != nil {
			return nil, err
		}
		v.Branches = append(v.Branches, &Branch{
			Id: id,
		})
	}
	return v, nil
}

// toProtoCompanyList transforms a list of ent type to a list of pb type
func toProtoCompanyList(e []*ent.Company) ([]*Company, error) {
	var pbList []*Company
	for _, entEntity := range e {
		pbEntity, err := toProtoCompany(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements CompanyServiceServer.Create
func (svc *CompanyService) Create(ctx context.Context, req *CreateCompanyRequest) (*Company, error) {
	company := req.GetCompany()
	m, err := svc.createBuilder(company)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoCompany(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements CompanyServiceServer.Get
func (svc *CompanyService) Get(ctx context.Context, req *GetCompanyRequest) (*Company, error) {
	var (
		err error
		get *ent.Company
	)
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	switch req.GetView() {
	case GetCompanyRequest_VIEW_UNSPECIFIED, GetCompanyRequest_BASIC:
		get, err = svc.client.Company.Get(ctx, id)
	case GetCompanyRequest_WITH_EDGE_IDS:
		get, err = svc.client.Company.Query().
			Where(company.ID(id)).
			WithBranches(func(query *ent.BranchQuery) {
				query.Select(branch.FieldID)
			}).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoCompany(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements CompanyServiceServer.Update
func (svc *CompanyService) Update(ctx context.Context, req *UpdateCompanyRequest) (*Company, error) {
	company := req.GetCompany()
	var companyID uuid.UUID
	if err := (&companyID).UnmarshalBinary(company.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	m := svc.client.Company.UpdateOneID(companyID)
	companyAddress := company.GetAddress()
	m.SetAddress(companyAddress)
	companyCreatedAt := runtime.ExtractTime(company.GetCreatedAt())
	m.SetCreatedAt(companyCreatedAt)
	companyName := company.GetName()
	m.SetName(companyName)
	companyUpdatedAt := runtime.ExtractTime(company.GetUpdatedAt())
	m.SetUpdatedAt(companyUpdatedAt)
	for _, item := range company.GetBranches() {
		var branches uuid.UUID
		if err := (&branches).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddBranchIDs(branches)
	}

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoCompany(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements CompanyServiceServer.Delete
func (svc *CompanyService) Delete(ctx context.Context, req *DeleteCompanyRequest) (*emptypb.Empty, error) {
	var err error
	var id uuid.UUID
	if err := (&id).UnmarshalBinary(req.GetId()); err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	}
	err = svc.client.Company.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements CompanyServiceServer.List
func (svc *CompanyService) List(ctx context.Context, req *ListCompanyRequest) (*ListCompanyResponse, error) {
	var (
		err      error
		entList  []*ent.Company
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Company.Query().
		Order(ent.Desc(company.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken, err := uuid.ParseBytes(bytes)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		listQuery = listQuery.
			Where(company.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListCompanyRequest_VIEW_UNSPECIFIED, ListCompanyRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListCompanyRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			WithBranches(func(query *ent.BranchQuery) {
				query.Select(branch.FieldID)
			}).
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoCompanyList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListCompanyResponse{
			CompanyList:   protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements CompanyServiceServer.BatchCreate
func (svc *CompanyService) BatchCreate(ctx context.Context, req *BatchCreateCompaniesRequest) (*BatchCreateCompaniesResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.CompanyCreate, len(requests))
	for i, req := range requests {
		company := req.GetCompany()
		var err error
		bulk[i], err = svc.createBuilder(company)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Company.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoCompanyList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateCompaniesResponse{
			Companies: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *CompanyService) createBuilder(company *Company) (*ent.CompanyCreate, error) {
	m := svc.client.Company.Create()
	companyAddress := company.GetAddress()
	m.SetAddress(companyAddress)
	companyCreatedAt := runtime.ExtractTime(company.GetCreatedAt())
	m.SetCreatedAt(companyCreatedAt)
	companyName := company.GetName()
	m.SetName(companyName)
	companyUpdatedAt := runtime.ExtractTime(company.GetUpdatedAt())
	m.SetUpdatedAt(companyUpdatedAt)
	for _, item := range company.GetBranches() {
		var branches uuid.UUID
		if err := (&branches).UnmarshalBinary(item.GetId()); err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
		}
		m.AddBranchIDs(branches)
	}
	return m, nil
}
