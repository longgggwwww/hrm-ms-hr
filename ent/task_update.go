// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/label"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
	"github.com/longgggwwww/hrm-ms-hr/ent/project"
	"github.com/longgggwwww/hrm-ms-hr/ent/task"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TaskUpdate) SetName(s string) *TaskUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetCode sets the "code" field.
func (tu *TaskUpdate) SetCode(s string) *TaskUpdate {
	tu.mutation.SetCode(s)
	return tu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCode(s *string) *TaskUpdate {
	if s != nil {
		tu.SetCode(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TaskUpdate) SetDescription(s string) *TaskUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDescription(s *string) *TaskUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TaskUpdate) ClearDescription() *TaskUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetProcess sets the "process" field.
func (tu *TaskUpdate) SetProcess(i int) *TaskUpdate {
	tu.mutation.ResetProcess()
	tu.mutation.SetProcess(i)
	return tu
}

// SetNillableProcess sets the "process" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableProcess(i *int) *TaskUpdate {
	if i != nil {
		tu.SetProcess(*i)
	}
	return tu
}

// AddProcess adds i to the "process" field.
func (tu *TaskUpdate) AddProcess(i int) *TaskUpdate {
	tu.mutation.AddProcess(i)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaskUpdate) SetStatus(b bool) *TaskUpdate {
	tu.mutation.SetStatus(b)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStatus(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetStatus(*b)
	}
	return tu
}

// SetStartAt sets the "start_at" field.
func (tu *TaskUpdate) SetStartAt(t time.Time) *TaskUpdate {
	tu.mutation.SetStartAt(t)
	return tu
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStartAt(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetStartAt(*t)
	}
	return tu
}

// SetProjectID sets the "project_id" field.
func (tu *TaskUpdate) SetProjectID(i int) *TaskUpdate {
	tu.mutation.SetProjectID(i)
	return tu
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableProjectID(i *int) *TaskUpdate {
	if i != nil {
		tu.SetProjectID(*i)
	}
	return tu
}

// SetCreatorID sets the "creator_id" field.
func (tu *TaskUpdate) SetCreatorID(i int) *TaskUpdate {
	tu.mutation.ResetCreatorID()
	tu.mutation.SetCreatorID(i)
	return tu
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCreatorID(i *int) *TaskUpdate {
	if i != nil {
		tu.SetCreatorID(*i)
	}
	return tu
}

// AddCreatorID adds i to the "creator_id" field.
func (tu *TaskUpdate) AddCreatorID(i int) *TaskUpdate {
	tu.mutation.AddCreatorID(i)
	return tu
}

// SetUpdaterID sets the "updater_id" field.
func (tu *TaskUpdate) SetUpdaterID(i int) *TaskUpdate {
	tu.mutation.ResetUpdaterID()
	tu.mutation.SetUpdaterID(i)
	return tu
}

// SetNillableUpdaterID sets the "updater_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableUpdaterID(i *int) *TaskUpdate {
	if i != nil {
		tu.SetUpdaterID(*i)
	}
	return tu
}

// AddUpdaterID adds i to the "updater_id" field.
func (tu *TaskUpdate) AddUpdaterID(i int) *TaskUpdate {
	tu.mutation.AddUpdaterID(i)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TaskUpdate) SetUpdatedAt(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetType sets the "type" field.
func (tu *TaskUpdate) SetType(t task.Type) *TaskUpdate {
	tu.mutation.SetType(t)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableType(t *task.Type) *TaskUpdate {
	if t != nil {
		tu.SetType(*t)
	}
	return tu
}

// SetProject sets the "project" edge to the Project entity.
func (tu *TaskUpdate) SetProject(p *Project) *TaskUpdate {
	return tu.SetProjectID(p.ID)
}

// AddLabelIDs adds the "labels" edge to the Label entity by IDs.
func (tu *TaskUpdate) AddLabelIDs(ids ...int) *TaskUpdate {
	tu.mutation.AddLabelIDs(ids...)
	return tu
}

// AddLabels adds the "labels" edges to the Label entity.
func (tu *TaskUpdate) AddLabels(l ...*Label) *TaskUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.AddLabelIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (tu *TaskUpdate) ClearProject() *TaskUpdate {
	tu.mutation.ClearProject()
	return tu
}

// ClearLabels clears all "labels" edges to the Label entity.
func (tu *TaskUpdate) ClearLabels() *TaskUpdate {
	tu.mutation.ClearLabels()
	return tu
}

// RemoveLabelIDs removes the "labels" edge to Label entities by IDs.
func (tu *TaskUpdate) RemoveLabelIDs(ids ...int) *TaskUpdate {
	tu.mutation.RemoveLabelIDs(ids...)
	return tu
}

// RemoveLabels removes "labels" edges to Label entities.
func (tu *TaskUpdate) RemoveLabels(l ...*Label) *TaskUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.RemoveLabelIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TaskUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	if tu.mutation.ProjectCleared() && len(tu.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Task.project"`)
	}
	return nil
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Code(); ok {
		_spec.SetField(task.FieldCode, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(task.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.Process(); ok {
		_spec.SetField(task.FieldProcess, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedProcess(); ok {
		_spec.AddField(task.FieldProcess, field.TypeInt, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeBool, value)
	}
	if value, ok := tu.mutation.StartAt(); ok {
		_spec.SetField(task.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.CreatorID(); ok {
		_spec.SetField(task.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedCreatorID(); ok {
		_spec.AddField(task.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.UpdaterID(); ok {
		_spec.SetField(task.FieldUpdaterID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedUpdaterID(); ok {
		_spec.AddField(task.FieldUpdaterID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
	}
	if tu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.LabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.LabelsTable,
			Columns: []string{task.LabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedLabelsIDs(); len(nodes) > 0 && !tu.mutation.LabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.LabelsTable,
			Columns: []string{task.LabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.LabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.LabelsTable,
			Columns: []string{task.LabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetName sets the "name" field.
func (tuo *TaskUpdateOne) SetName(s string) *TaskUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetCode sets the "code" field.
func (tuo *TaskUpdateOne) SetCode(s string) *TaskUpdateOne {
	tuo.mutation.SetCode(s)
	return tuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCode(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetCode(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TaskUpdateOne) SetDescription(s string) *TaskUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDescription(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TaskUpdateOne) ClearDescription() *TaskUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetProcess sets the "process" field.
func (tuo *TaskUpdateOne) SetProcess(i int) *TaskUpdateOne {
	tuo.mutation.ResetProcess()
	tuo.mutation.SetProcess(i)
	return tuo
}

// SetNillableProcess sets the "process" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableProcess(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetProcess(*i)
	}
	return tuo
}

// AddProcess adds i to the "process" field.
func (tuo *TaskUpdateOne) AddProcess(i int) *TaskUpdateOne {
	tuo.mutation.AddProcess(i)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaskUpdateOne) SetStatus(b bool) *TaskUpdateOne {
	tuo.mutation.SetStatus(b)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStatus(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetStatus(*b)
	}
	return tuo
}

// SetStartAt sets the "start_at" field.
func (tuo *TaskUpdateOne) SetStartAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetStartAt(t)
	return tuo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStartAt(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetStartAt(*t)
	}
	return tuo
}

// SetProjectID sets the "project_id" field.
func (tuo *TaskUpdateOne) SetProjectID(i int) *TaskUpdateOne {
	tuo.mutation.SetProjectID(i)
	return tuo
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableProjectID(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetProjectID(*i)
	}
	return tuo
}

// SetCreatorID sets the "creator_id" field.
func (tuo *TaskUpdateOne) SetCreatorID(i int) *TaskUpdateOne {
	tuo.mutation.ResetCreatorID()
	tuo.mutation.SetCreatorID(i)
	return tuo
}

// SetNillableCreatorID sets the "creator_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCreatorID(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetCreatorID(*i)
	}
	return tuo
}

// AddCreatorID adds i to the "creator_id" field.
func (tuo *TaskUpdateOne) AddCreatorID(i int) *TaskUpdateOne {
	tuo.mutation.AddCreatorID(i)
	return tuo
}

// SetUpdaterID sets the "updater_id" field.
func (tuo *TaskUpdateOne) SetUpdaterID(i int) *TaskUpdateOne {
	tuo.mutation.ResetUpdaterID()
	tuo.mutation.SetUpdaterID(i)
	return tuo
}

// SetNillableUpdaterID sets the "updater_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUpdaterID(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetUpdaterID(*i)
	}
	return tuo
}

// AddUpdaterID adds i to the "updater_id" field.
func (tuo *TaskUpdateOne) AddUpdaterID(i int) *TaskUpdateOne {
	tuo.mutation.AddUpdaterID(i)
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TaskUpdateOne) SetUpdatedAt(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetType sets the "type" field.
func (tuo *TaskUpdateOne) SetType(t task.Type) *TaskUpdateOne {
	tuo.mutation.SetType(t)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableType(t *task.Type) *TaskUpdateOne {
	if t != nil {
		tuo.SetType(*t)
	}
	return tuo
}

// SetProject sets the "project" edge to the Project entity.
func (tuo *TaskUpdateOne) SetProject(p *Project) *TaskUpdateOne {
	return tuo.SetProjectID(p.ID)
}

// AddLabelIDs adds the "labels" edge to the Label entity by IDs.
func (tuo *TaskUpdateOne) AddLabelIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.AddLabelIDs(ids...)
	return tuo
}

// AddLabels adds the "labels" edges to the Label entity.
func (tuo *TaskUpdateOne) AddLabels(l ...*Label) *TaskUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.AddLabelIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (tuo *TaskUpdateOne) ClearProject() *TaskUpdateOne {
	tuo.mutation.ClearProject()
	return tuo
}

// ClearLabels clears all "labels" edges to the Label entity.
func (tuo *TaskUpdateOne) ClearLabels() *TaskUpdateOne {
	tuo.mutation.ClearLabels()
	return tuo
}

// RemoveLabelIDs removes the "labels" edge to Label entities by IDs.
func (tuo *TaskUpdateOne) RemoveLabelIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.RemoveLabelIDs(ids...)
	return tuo
}

// RemoveLabels removes "labels" edges to Label entities.
func (tuo *TaskUpdateOne) RemoveLabels(l ...*Label) *TaskUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.RemoveLabelIDs(ids...)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TaskUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	if tuo.mutation.ProjectCleared() && len(tuo.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Task.project"`)
	}
	return nil
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Code(); ok {
		_spec.SetField(task.FieldCode, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(task.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.Process(); ok {
		_spec.SetField(task.FieldProcess, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedProcess(); ok {
		_spec.AddField(task.FieldProcess, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeBool, value)
	}
	if value, ok := tuo.mutation.StartAt(); ok {
		_spec.SetField(task.FieldStartAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.CreatorID(); ok {
		_spec.SetField(task.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedCreatorID(); ok {
		_spec.AddField(task.FieldCreatorID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.UpdaterID(); ok {
		_spec.SetField(task.FieldUpdaterID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedUpdaterID(); ok {
		_spec.AddField(task.FieldUpdaterID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
	}
	if tuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.LabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.LabelsTable,
			Columns: []string{task.LabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedLabelsIDs(); len(nodes) > 0 && !tuo.mutation.LabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.LabelsTable,
			Columns: []string{task.LabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.LabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.LabelsTable,
			Columns: []string{task.LabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
