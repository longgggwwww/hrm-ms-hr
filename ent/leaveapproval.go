// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/longgggwwww/hrm-ms-hr/ent/leaveapproval"
)

// LeaveApproval is the model entity for the LeaveApproval schema.
type LeaveApproval struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment *string `json:"comment,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LeaveApproval) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case leaveapproval.FieldID:
			values[i] = new(sql.NullInt64)
		case leaveapproval.FieldComment:
			values[i] = new(sql.NullString)
		case leaveapproval.FieldCreatedAt, leaveapproval.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LeaveApproval fields.
func (la *LeaveApproval) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case leaveapproval.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			la.ID = int(value.Int64)
		case leaveapproval.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				la.Comment = new(string)
				*la.Comment = value.String
			}
		case leaveapproval.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				la.CreatedAt = value.Time
			}
		case leaveapproval.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				la.UpdatedAt = value.Time
			}
		default:
			la.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LeaveApproval.
// This includes values selected through modifiers, order, etc.
func (la *LeaveApproval) Value(name string) (ent.Value, error) {
	return la.selectValues.Get(name)
}

// Update returns a builder for updating this LeaveApproval.
// Note that you need to call LeaveApproval.Unwrap() before calling this method if this LeaveApproval
// was returned from a transaction, and the transaction was committed or rolled back.
func (la *LeaveApproval) Update() *LeaveApprovalUpdateOne {
	return NewLeaveApprovalClient(la.config).UpdateOne(la)
}

// Unwrap unwraps the LeaveApproval entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (la *LeaveApproval) Unwrap() *LeaveApproval {
	_tx, ok := la.config.driver.(*txDriver)
	if !ok {
		panic("ent: LeaveApproval is not a transactional entity")
	}
	la.config.driver = _tx.drv
	return la
}

// String implements the fmt.Stringer.
func (la *LeaveApproval) String() string {
	var builder strings.Builder
	builder.WriteString("LeaveApproval(")
	builder.WriteString(fmt.Sprintf("id=%v, ", la.ID))
	if v := la.Comment; v != nil {
		builder.WriteString("comment=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(la.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(la.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LeaveApprovals is a parsable slice of LeaveApproval.
type LeaveApprovals []*LeaveApproval
