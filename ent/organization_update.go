// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/organization"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationMutation
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ou *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetName sets the "name" field.
func (ou *OrganizationUpdate) SetName(s string) *OrganizationUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableName(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetCode sets the "code" field.
func (ou *OrganizationUpdate) SetCode(s string) *OrganizationUpdate {
	ou.mutation.SetCode(s)
	return ou
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableCode(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetCode(*s)
	}
	return ou
}

// SetLogo sets the "logo" field.
func (ou *OrganizationUpdate) SetLogo(s string) *OrganizationUpdate {
	ou.mutation.SetLogo(s)
	return ou
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableLogo(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetLogo(*s)
	}
	return ou
}

// ClearLogo clears the value of the "logo" field.
func (ou *OrganizationUpdate) ClearLogo() *OrganizationUpdate {
	ou.mutation.ClearLogo()
	return ou
}

// SetAddress sets the "address" field.
func (ou *OrganizationUpdate) SetAddress(s string) *OrganizationUpdate {
	ou.mutation.SetAddress(s)
	return ou
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableAddress(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetAddress(*s)
	}
	return ou
}

// ClearAddress clears the value of the "address" field.
func (ou *OrganizationUpdate) ClearAddress() *OrganizationUpdate {
	ou.mutation.ClearAddress()
	return ou
}

// SetPhone sets the "phone" field.
func (ou *OrganizationUpdate) SetPhone(s string) *OrganizationUpdate {
	ou.mutation.SetPhone(s)
	return ou
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillablePhone(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetPhone(*s)
	}
	return ou
}

// ClearPhone clears the value of the "phone" field.
func (ou *OrganizationUpdate) ClearPhone() *OrganizationUpdate {
	ou.mutation.ClearPhone()
	return ou
}

// SetEmail sets the "email" field.
func (ou *OrganizationUpdate) SetEmail(s string) *OrganizationUpdate {
	ou.mutation.SetEmail(s)
	return ou
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableEmail(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetEmail(*s)
	}
	return ou
}

// ClearEmail clears the value of the "email" field.
func (ou *OrganizationUpdate) ClearEmail() *OrganizationUpdate {
	ou.mutation.ClearEmail()
	return ou
}

// SetWebsite sets the "website" field.
func (ou *OrganizationUpdate) SetWebsite(s string) *OrganizationUpdate {
	ou.mutation.SetWebsite(s)
	return ou
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableWebsite(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetWebsite(*s)
	}
	return ou
}

// ClearWebsite clears the value of the "website" field.
func (ou *OrganizationUpdate) ClearWebsite() *OrganizationUpdate {
	ou.mutation.ClearWebsite()
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OrganizationUpdate) SetCreatedAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableCreatedAt(t *time.Time) *OrganizationUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrganizationUpdate) SetUpdatedAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// SetParentID sets the "parent_id" field.
func (ou *OrganizationUpdate) SetParentID(i int) *OrganizationUpdate {
	ou.mutation.SetParentID(i)
	return ou
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableParentID(i *int) *OrganizationUpdate {
	if i != nil {
		ou.SetParentID(*i)
	}
	return ou
}

// ClearParentID clears the value of the "parent_id" field.
func (ou *OrganizationUpdate) ClearParentID() *OrganizationUpdate {
	ou.mutation.ClearParentID()
	return ou
}

// AddChildIDs adds the "children" edge to the Organization entity by IDs.
func (ou *OrganizationUpdate) AddChildIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.AddChildIDs(ids...)
	return ou
}

// AddChildren adds the "children" edges to the Organization entity.
func (ou *OrganizationUpdate) AddChildren(o ...*Organization) *OrganizationUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the Organization entity.
func (ou *OrganizationUpdate) SetParent(o *Organization) *OrganizationUpdate {
	return ou.SetParentID(o.ID)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ou *OrganizationUpdate) Mutation() *OrganizationMutation {
	return ou.mutation
}

// ClearChildren clears all "children" edges to the Organization entity.
func (ou *OrganizationUpdate) ClearChildren() *OrganizationUpdate {
	ou.mutation.ClearChildren()
	return ou
}

// RemoveChildIDs removes the "children" edge to Organization entities by IDs.
func (ou *OrganizationUpdate) RemoveChildIDs(ids ...int) *OrganizationUpdate {
	ou.mutation.RemoveChildIDs(ids...)
	return ou
}

// RemoveChildren removes "children" edges to Organization entities.
func (ou *OrganizationUpdate) RemoveChildren(o ...*Organization) *OrganizationUpdate {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Organization entity.
func (ou *OrganizationUpdate) ClearParent() *OrganizationUpdate {
	ou.mutation.ClearParent()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrganizationUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := organization.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

func (ou *OrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.Code(); ok {
		_spec.SetField(organization.FieldCode, field.TypeString, value)
	}
	if value, ok := ou.mutation.Logo(); ok {
		_spec.SetField(organization.FieldLogo, field.TypeString, value)
	}
	if ou.mutation.LogoCleared() {
		_spec.ClearField(organization.FieldLogo, field.TypeString)
	}
	if value, ok := ou.mutation.Address(); ok {
		_spec.SetField(organization.FieldAddress, field.TypeString, value)
	}
	if ou.mutation.AddressCleared() {
		_spec.ClearField(organization.FieldAddress, field.TypeString)
	}
	if value, ok := ou.mutation.Phone(); ok {
		_spec.SetField(organization.FieldPhone, field.TypeString, value)
	}
	if ou.mutation.PhoneCleared() {
		_spec.ClearField(organization.FieldPhone, field.TypeString)
	}
	if value, ok := ou.mutation.Email(); ok {
		_spec.SetField(organization.FieldEmail, field.TypeString, value)
	}
	if ou.mutation.EmailCleared() {
		_spec.ClearField(organization.FieldEmail, field.TypeString)
	}
	if value, ok := ou.mutation.Website(); ok {
		_spec.SetField(organization.FieldWebsite, field.TypeString, value)
	}
	if ou.mutation.WebsiteCleared() {
		_spec.ClearField(organization.FieldWebsite, field.TypeString)
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.SetField(organization.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if ou.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ou.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.ParentTable,
			Columns: []string{organization.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.ParentTable,
			Columns: []string{organization.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationMutation
}

// SetName sets the "name" field.
func (ouo *OrganizationUpdateOne) SetName(s string) *OrganizationUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableName(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetCode sets the "code" field.
func (ouo *OrganizationUpdateOne) SetCode(s string) *OrganizationUpdateOne {
	ouo.mutation.SetCode(s)
	return ouo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableCode(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetCode(*s)
	}
	return ouo
}

// SetLogo sets the "logo" field.
func (ouo *OrganizationUpdateOne) SetLogo(s string) *OrganizationUpdateOne {
	ouo.mutation.SetLogo(s)
	return ouo
}

// SetNillableLogo sets the "logo" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableLogo(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetLogo(*s)
	}
	return ouo
}

// ClearLogo clears the value of the "logo" field.
func (ouo *OrganizationUpdateOne) ClearLogo() *OrganizationUpdateOne {
	ouo.mutation.ClearLogo()
	return ouo
}

// SetAddress sets the "address" field.
func (ouo *OrganizationUpdateOne) SetAddress(s string) *OrganizationUpdateOne {
	ouo.mutation.SetAddress(s)
	return ouo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableAddress(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetAddress(*s)
	}
	return ouo
}

// ClearAddress clears the value of the "address" field.
func (ouo *OrganizationUpdateOne) ClearAddress() *OrganizationUpdateOne {
	ouo.mutation.ClearAddress()
	return ouo
}

// SetPhone sets the "phone" field.
func (ouo *OrganizationUpdateOne) SetPhone(s string) *OrganizationUpdateOne {
	ouo.mutation.SetPhone(s)
	return ouo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillablePhone(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetPhone(*s)
	}
	return ouo
}

// ClearPhone clears the value of the "phone" field.
func (ouo *OrganizationUpdateOne) ClearPhone() *OrganizationUpdateOne {
	ouo.mutation.ClearPhone()
	return ouo
}

// SetEmail sets the "email" field.
func (ouo *OrganizationUpdateOne) SetEmail(s string) *OrganizationUpdateOne {
	ouo.mutation.SetEmail(s)
	return ouo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableEmail(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetEmail(*s)
	}
	return ouo
}

// ClearEmail clears the value of the "email" field.
func (ouo *OrganizationUpdateOne) ClearEmail() *OrganizationUpdateOne {
	ouo.mutation.ClearEmail()
	return ouo
}

// SetWebsite sets the "website" field.
func (ouo *OrganizationUpdateOne) SetWebsite(s string) *OrganizationUpdateOne {
	ouo.mutation.SetWebsite(s)
	return ouo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableWebsite(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetWebsite(*s)
	}
	return ouo
}

// ClearWebsite clears the value of the "website" field.
func (ouo *OrganizationUpdateOne) ClearWebsite() *OrganizationUpdateOne {
	ouo.mutation.ClearWebsite()
	return ouo
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OrganizationUpdateOne) SetCreatedAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableCreatedAt(t *time.Time) *OrganizationUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrganizationUpdateOne) SetUpdatedAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// SetParentID sets the "parent_id" field.
func (ouo *OrganizationUpdateOne) SetParentID(i int) *OrganizationUpdateOne {
	ouo.mutation.SetParentID(i)
	return ouo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableParentID(i *int) *OrganizationUpdateOne {
	if i != nil {
		ouo.SetParentID(*i)
	}
	return ouo
}

// ClearParentID clears the value of the "parent_id" field.
func (ouo *OrganizationUpdateOne) ClearParentID() *OrganizationUpdateOne {
	ouo.mutation.ClearParentID()
	return ouo
}

// AddChildIDs adds the "children" edge to the Organization entity by IDs.
func (ouo *OrganizationUpdateOne) AddChildIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.AddChildIDs(ids...)
	return ouo
}

// AddChildren adds the "children" edges to the Organization entity.
func (ouo *OrganizationUpdateOne) AddChildren(o ...*Organization) *OrganizationUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the Organization entity.
func (ouo *OrganizationUpdateOne) SetParent(o *Organization) *OrganizationUpdateOne {
	return ouo.SetParentID(o.ID)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ouo *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return ouo.mutation
}

// ClearChildren clears all "children" edges to the Organization entity.
func (ouo *OrganizationUpdateOne) ClearChildren() *OrganizationUpdateOne {
	ouo.mutation.ClearChildren()
	return ouo
}

// RemoveChildIDs removes the "children" edge to Organization entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveChildIDs(ids ...int) *OrganizationUpdateOne {
	ouo.mutation.RemoveChildIDs(ids...)
	return ouo
}

// RemoveChildren removes "children" edges to Organization entities.
func (ouo *OrganizationUpdateOne) RemoveChildren(o ...*Organization) *OrganizationUpdateOne {
	ids := make([]int, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Organization entity.
func (ouo *OrganizationUpdateOne) ClearParent() *OrganizationUpdateOne {
	ouo.mutation.ClearParent()
	return ouo
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ouo *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Organization entity.
func (ouo *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrganizationUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := organization.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

func (ouo *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Code(); ok {
		_spec.SetField(organization.FieldCode, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Logo(); ok {
		_spec.SetField(organization.FieldLogo, field.TypeString, value)
	}
	if ouo.mutation.LogoCleared() {
		_spec.ClearField(organization.FieldLogo, field.TypeString)
	}
	if value, ok := ouo.mutation.Address(); ok {
		_spec.SetField(organization.FieldAddress, field.TypeString, value)
	}
	if ouo.mutation.AddressCleared() {
		_spec.ClearField(organization.FieldAddress, field.TypeString)
	}
	if value, ok := ouo.mutation.Phone(); ok {
		_spec.SetField(organization.FieldPhone, field.TypeString, value)
	}
	if ouo.mutation.PhoneCleared() {
		_spec.ClearField(organization.FieldPhone, field.TypeString)
	}
	if value, ok := ouo.mutation.Email(); ok {
		_spec.SetField(organization.FieldEmail, field.TypeString, value)
	}
	if ouo.mutation.EmailCleared() {
		_spec.ClearField(organization.FieldEmail, field.TypeString)
	}
	if value, ok := ouo.mutation.Website(); ok {
		_spec.SetField(organization.FieldWebsite, field.TypeString, value)
	}
	if ouo.mutation.WebsiteCleared() {
		_spec.ClearField(organization.FieldWebsite, field.TypeString)
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.SetField(organization.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ouo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.ParentTable,
			Columns: []string{organization.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.ParentTable,
			Columns: []string{organization.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Organization{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
