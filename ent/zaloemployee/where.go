// Code generated by ent, DO NOT EDIT.

package zaloemployee

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldLTE(FieldID, id))
}

// ZaloUID applies equality check predicate on the "zalo_uid" field. It's identical to ZaloUIDEQ.
func ZaloUID(v string) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldEQ(FieldZaloUID, v))
}

// EmployeeID applies equality check predicate on the "employee_id" field. It's identical to EmployeeIDEQ.
func EmployeeID(v int) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldEQ(FieldEmployeeID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldEQ(FieldUpdatedAt, v))
}

// ZaloUIDEQ applies the EQ predicate on the "zalo_uid" field.
func ZaloUIDEQ(v string) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldEQ(FieldZaloUID, v))
}

// ZaloUIDNEQ applies the NEQ predicate on the "zalo_uid" field.
func ZaloUIDNEQ(v string) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldNEQ(FieldZaloUID, v))
}

// ZaloUIDIn applies the In predicate on the "zalo_uid" field.
func ZaloUIDIn(vs ...string) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldIn(FieldZaloUID, vs...))
}

// ZaloUIDNotIn applies the NotIn predicate on the "zalo_uid" field.
func ZaloUIDNotIn(vs ...string) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldNotIn(FieldZaloUID, vs...))
}

// ZaloUIDGT applies the GT predicate on the "zalo_uid" field.
func ZaloUIDGT(v string) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldGT(FieldZaloUID, v))
}

// ZaloUIDGTE applies the GTE predicate on the "zalo_uid" field.
func ZaloUIDGTE(v string) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldGTE(FieldZaloUID, v))
}

// ZaloUIDLT applies the LT predicate on the "zalo_uid" field.
func ZaloUIDLT(v string) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldLT(FieldZaloUID, v))
}

// ZaloUIDLTE applies the LTE predicate on the "zalo_uid" field.
func ZaloUIDLTE(v string) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldLTE(FieldZaloUID, v))
}

// ZaloUIDContains applies the Contains predicate on the "zalo_uid" field.
func ZaloUIDContains(v string) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldContains(FieldZaloUID, v))
}

// ZaloUIDHasPrefix applies the HasPrefix predicate on the "zalo_uid" field.
func ZaloUIDHasPrefix(v string) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldHasPrefix(FieldZaloUID, v))
}

// ZaloUIDHasSuffix applies the HasSuffix predicate on the "zalo_uid" field.
func ZaloUIDHasSuffix(v string) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldHasSuffix(FieldZaloUID, v))
}

// ZaloUIDEqualFold applies the EqualFold predicate on the "zalo_uid" field.
func ZaloUIDEqualFold(v string) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldEqualFold(FieldZaloUID, v))
}

// ZaloUIDContainsFold applies the ContainsFold predicate on the "zalo_uid" field.
func ZaloUIDContainsFold(v string) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldContainsFold(FieldZaloUID, v))
}

// EmployeeIDEQ applies the EQ predicate on the "employee_id" field.
func EmployeeIDEQ(v int) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "employee_id" field.
func EmployeeIDNEQ(v int) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "employee_id" field.
func EmployeeIDIn(vs ...int) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "employee_id" field.
func EmployeeIDNotIn(vs ...int) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.ZaloEmployee {
	return predicate.ZaloEmployee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(func(s *sql.Selector) {
		step := newEmployeeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ZaloEmployee) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ZaloEmployee) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ZaloEmployee) predicate.ZaloEmployee {
	return predicate.ZaloEmployee(sql.NotPredicates(p))
}
