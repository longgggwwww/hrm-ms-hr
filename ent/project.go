// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
	"github.com/longgggwwww/hrm-ms-hr/ent/organization"
	"github.com/longgggwwww/hrm-ms-hr/ent/project"
)

// Project is the model entity for the Project schema.
type Project struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// Code holds the value of the "code" field.
	Code string `json:"code"`
	// Description holds the value of the "description" field.
	Description *string `json:"description"`
	// StartAt holds the value of the "start_at" field.
	StartAt *time.Time `json:"start_at"`
	// EndAt holds the value of the "end_at" field.
	EndAt *time.Time `json:"end_at"`
	// CreatorID holds the value of the "creator_id" field.
	CreatorID int `json:"creator_id"`
	// UpdaterID holds the value of the "updater_id" field.
	UpdaterID int `json:"updater_id"`
	// OrgID holds the value of the "org_id" field.
	OrgID int `json:"org_id"`
	// Process holds the value of the "process" field.
	Process int `json:"process"`
	// Status holds the value of the "status" field.
	Status project.Status `json:"status"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectQuery when eager-loading is set.
	Edges        ProjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectEdges holds the relations/edges for other nodes in the graph.
type ProjectEdges struct {
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization"`
	// Creator holds the value of the creator edge.
	Creator *Employee `json:"creator"`
	// Updater holds the value of the updater edge.
	Updater *Employee `json:"updater"`
	// Members holds the value of the members edge.
	Members []*Employee `json:"members"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[0] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// CreatorOrErr returns the Creator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) CreatorOrErr() (*Employee, error) {
	if e.Creator != nil {
		return e.Creator, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: employee.Label}
	}
	return nil, &NotLoadedError{edge: "creator"}
}

// UpdaterOrErr returns the Updater value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectEdges) UpdaterOrErr() (*Employee, error) {
	if e.Updater != nil {
		return e.Updater, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: employee.Label}
	}
	return nil, &NotLoadedError{edge: "updater"}
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectEdges) MembersOrErr() ([]*Employee, error) {
	if e.loadedTypes[4] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Project) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case project.FieldID, project.FieldCreatorID, project.FieldUpdaterID, project.FieldOrgID, project.FieldProcess:
			values[i] = new(sql.NullInt64)
		case project.FieldName, project.FieldCode, project.FieldDescription, project.FieldStatus:
			values[i] = new(sql.NullString)
		case project.FieldStartAt, project.FieldEndAt, project.FieldCreatedAt, project.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Project fields.
func (pr *Project) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case project.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case project.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case project.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				pr.Code = value.String
			}
		case project.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				pr.Description = new(string)
				*pr.Description = value.String
			}
		case project.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				pr.StartAt = new(time.Time)
				*pr.StartAt = value.Time
			}
		case project.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				pr.EndAt = new(time.Time)
				*pr.EndAt = value.Time
			}
		case project.FieldCreatorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field creator_id", values[i])
			} else if value.Valid {
				pr.CreatorID = int(value.Int64)
			}
		case project.FieldUpdaterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updater_id", values[i])
			} else if value.Valid {
				pr.UpdaterID = int(value.Int64)
			}
		case project.FieldOrgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				pr.OrgID = int(value.Int64)
			}
		case project.FieldProcess:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field process", values[i])
			} else if value.Valid {
				pr.Process = int(value.Int64)
			}
		case project.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pr.Status = project.Status(value.String)
			}
		case project.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case project.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Project.
// This includes values selected through modifiers, order, etc.
func (pr *Project) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryTasks queries the "tasks" edge of the Project entity.
func (pr *Project) QueryTasks() *TaskQuery {
	return NewProjectClient(pr.config).QueryTasks(pr)
}

// QueryOrganization queries the "organization" edge of the Project entity.
func (pr *Project) QueryOrganization() *OrganizationQuery {
	return NewProjectClient(pr.config).QueryOrganization(pr)
}

// QueryCreator queries the "creator" edge of the Project entity.
func (pr *Project) QueryCreator() *EmployeeQuery {
	return NewProjectClient(pr.config).QueryCreator(pr)
}

// QueryUpdater queries the "updater" edge of the Project entity.
func (pr *Project) QueryUpdater() *EmployeeQuery {
	return NewProjectClient(pr.config).QueryUpdater(pr)
}

// QueryMembers queries the "members" edge of the Project entity.
func (pr *Project) QueryMembers() *EmployeeQuery {
	return NewProjectClient(pr.config).QueryMembers(pr)
}

// Update returns a builder for updating this Project.
// Note that you need to call Project.Unwrap() before calling this method if this Project
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Project) Update() *ProjectUpdateOne {
	return NewProjectClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Project entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Project) Unwrap() *Project {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Project is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Project) String() string {
	var builder strings.Builder
	builder.WriteString("Project(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(pr.Code)
	builder.WriteString(", ")
	if v := pr.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := pr.StartAt; v != nil {
		builder.WriteString("start_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := pr.EndAt; v != nil {
		builder.WriteString("end_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("creator_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.CreatorID))
	builder.WriteString(", ")
	builder.WriteString("updater_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.UpdaterID))
	builder.WriteString(", ")
	builder.WriteString("org_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.OrgID))
	builder.WriteString(", ")
	builder.WriteString("process=")
	builder.WriteString(fmt.Sprintf("%v", pr.Process))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", pr.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Projects is a parsable slice of Project.
type Projects []*Project
