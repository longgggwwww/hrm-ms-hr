// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/leaveapproval"
	"github.com/longgggwwww/hrm-ms-hr/ent/leaverequest"
)

// LeaveRequestCreate is the builder for creating a LeaveRequest entity.
type LeaveRequestCreate struct {
	config
	mutation *LeaveRequestMutation
	hooks    []Hook
}

// SetTotalDays sets the "total_days" field.
func (lrc *LeaveRequestCreate) SetTotalDays(f float64) *LeaveRequestCreate {
	lrc.mutation.SetTotalDays(f)
	return lrc
}

// SetStartAt sets the "start_at" field.
func (lrc *LeaveRequestCreate) SetStartAt(t time.Time) *LeaveRequestCreate {
	lrc.mutation.SetStartAt(t)
	return lrc
}

// SetEndAt sets the "end_at" field.
func (lrc *LeaveRequestCreate) SetEndAt(t time.Time) *LeaveRequestCreate {
	lrc.mutation.SetEndAt(t)
	return lrc
}

// SetReason sets the "reason" field.
func (lrc *LeaveRequestCreate) SetReason(s string) *LeaveRequestCreate {
	lrc.mutation.SetReason(s)
	return lrc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (lrc *LeaveRequestCreate) SetNillableReason(s *string) *LeaveRequestCreate {
	if s != nil {
		lrc.SetReason(*s)
	}
	return lrc
}

// SetType sets the "type" field.
func (lrc *LeaveRequestCreate) SetType(l leaverequest.Type) *LeaveRequestCreate {
	lrc.mutation.SetType(l)
	return lrc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (lrc *LeaveRequestCreate) SetNillableType(l *leaverequest.Type) *LeaveRequestCreate {
	if l != nil {
		lrc.SetType(*l)
	}
	return lrc
}

// SetStatus sets the "status" field.
func (lrc *LeaveRequestCreate) SetStatus(l leaverequest.Status) *LeaveRequestCreate {
	lrc.mutation.SetStatus(l)
	return lrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lrc *LeaveRequestCreate) SetNillableStatus(l *leaverequest.Status) *LeaveRequestCreate {
	if l != nil {
		lrc.SetStatus(*l)
	}
	return lrc
}

// SetCreatedAt sets the "created_at" field.
func (lrc *LeaveRequestCreate) SetCreatedAt(t time.Time) *LeaveRequestCreate {
	lrc.mutation.SetCreatedAt(t)
	return lrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lrc *LeaveRequestCreate) SetNillableCreatedAt(t *time.Time) *LeaveRequestCreate {
	if t != nil {
		lrc.SetCreatedAt(*t)
	}
	return lrc
}

// SetUpdatedAt sets the "updated_at" field.
func (lrc *LeaveRequestCreate) SetUpdatedAt(t time.Time) *LeaveRequestCreate {
	lrc.mutation.SetUpdatedAt(t)
	return lrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lrc *LeaveRequestCreate) SetNillableUpdatedAt(t *time.Time) *LeaveRequestCreate {
	if t != nil {
		lrc.SetUpdatedAt(*t)
	}
	return lrc
}

// SetLeaveapproveID sets the "leaveapprove" edge to the LeaveApproval entity by ID.
func (lrc *LeaveRequestCreate) SetLeaveapproveID(id int) *LeaveRequestCreate {
	lrc.mutation.SetLeaveapproveID(id)
	return lrc
}

// SetNillableLeaveapproveID sets the "leaveapprove" edge to the LeaveApproval entity by ID if the given value is not nil.
func (lrc *LeaveRequestCreate) SetNillableLeaveapproveID(id *int) *LeaveRequestCreate {
	if id != nil {
		lrc = lrc.SetLeaveapproveID(*id)
	}
	return lrc
}

// SetLeaveapprove sets the "leaveapprove" edge to the LeaveApproval entity.
func (lrc *LeaveRequestCreate) SetLeaveapprove(l *LeaveApproval) *LeaveRequestCreate {
	return lrc.SetLeaveapproveID(l.ID)
}

// Mutation returns the LeaveRequestMutation object of the builder.
func (lrc *LeaveRequestCreate) Mutation() *LeaveRequestMutation {
	return lrc.mutation
}

// Save creates the LeaveRequest in the database.
func (lrc *LeaveRequestCreate) Save(ctx context.Context) (*LeaveRequest, error) {
	lrc.defaults()
	return withHooks(ctx, lrc.sqlSave, lrc.mutation, lrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lrc *LeaveRequestCreate) SaveX(ctx context.Context) *LeaveRequest {
	v, err := lrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrc *LeaveRequestCreate) Exec(ctx context.Context) error {
	_, err := lrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrc *LeaveRequestCreate) ExecX(ctx context.Context) {
	if err := lrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lrc *LeaveRequestCreate) defaults() {
	if _, ok := lrc.mutation.GetType(); !ok {
		v := leaverequest.DefaultType
		lrc.mutation.SetType(v)
	}
	if _, ok := lrc.mutation.Status(); !ok {
		v := leaverequest.DefaultStatus
		lrc.mutation.SetStatus(v)
	}
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		v := leaverequest.DefaultCreatedAt()
		lrc.mutation.SetCreatedAt(v)
	}
	if _, ok := lrc.mutation.UpdatedAt(); !ok {
		v := leaverequest.DefaultUpdatedAt()
		lrc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lrc *LeaveRequestCreate) check() error {
	if _, ok := lrc.mutation.TotalDays(); !ok {
		return &ValidationError{Name: "total_days", err: errors.New(`ent: missing required field "LeaveRequest.total_days"`)}
	}
	if _, ok := lrc.mutation.StartAt(); !ok {
		return &ValidationError{Name: "start_at", err: errors.New(`ent: missing required field "LeaveRequest.start_at"`)}
	}
	if _, ok := lrc.mutation.EndAt(); !ok {
		return &ValidationError{Name: "end_at", err: errors.New(`ent: missing required field "LeaveRequest.end_at"`)}
	}
	if _, ok := lrc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "LeaveRequest.type"`)}
	}
	if v, ok := lrc.mutation.GetType(); ok {
		if err := leaverequest.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "LeaveRequest.type": %w`, err)}
		}
	}
	if _, ok := lrc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "LeaveRequest.status"`)}
	}
	if v, ok := lrc.mutation.Status(); ok {
		if err := leaverequest.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "LeaveRequest.status": %w`, err)}
		}
	}
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LeaveRequest.created_at"`)}
	}
	if _, ok := lrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LeaveRequest.updated_at"`)}
	}
	return nil
}

func (lrc *LeaveRequestCreate) sqlSave(ctx context.Context) (*LeaveRequest, error) {
	if err := lrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lrc.mutation.id = &_node.ID
	lrc.mutation.done = true
	return _node, nil
}

func (lrc *LeaveRequestCreate) createSpec() (*LeaveRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &LeaveRequest{config: lrc.config}
		_spec = sqlgraph.NewCreateSpec(leaverequest.Table, sqlgraph.NewFieldSpec(leaverequest.FieldID, field.TypeInt))
	)
	if value, ok := lrc.mutation.TotalDays(); ok {
		_spec.SetField(leaverequest.FieldTotalDays, field.TypeFloat64, value)
		_node.TotalDays = value
	}
	if value, ok := lrc.mutation.StartAt(); ok {
		_spec.SetField(leaverequest.FieldStartAt, field.TypeTime, value)
		_node.StartAt = value
	}
	if value, ok := lrc.mutation.EndAt(); ok {
		_spec.SetField(leaverequest.FieldEndAt, field.TypeTime, value)
		_node.EndAt = value
	}
	if value, ok := lrc.mutation.Reason(); ok {
		_spec.SetField(leaverequest.FieldReason, field.TypeString, value)
		_node.Reason = &value
	}
	if value, ok := lrc.mutation.GetType(); ok {
		_spec.SetField(leaverequest.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := lrc.mutation.Status(); ok {
		_spec.SetField(leaverequest.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := lrc.mutation.CreatedAt(); ok {
		_spec.SetField(leaverequest.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lrc.mutation.UpdatedAt(); ok {
		_spec.SetField(leaverequest.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := lrc.mutation.LeaveapproveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   leaverequest.LeaveapproveTable,
			Columns: []string{leaverequest.LeaveapproveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(leaveapproval.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.leave_request_leaveapprove = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LeaveRequestCreateBulk is the builder for creating many LeaveRequest entities in bulk.
type LeaveRequestCreateBulk struct {
	config
	err      error
	builders []*LeaveRequestCreate
}

// Save creates the LeaveRequest entities in the database.
func (lrcb *LeaveRequestCreateBulk) Save(ctx context.Context) ([]*LeaveRequest, error) {
	if lrcb.err != nil {
		return nil, lrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lrcb.builders))
	nodes := make([]*LeaveRequest, len(lrcb.builders))
	mutators := make([]Mutator, len(lrcb.builders))
	for i := range lrcb.builders {
		func(i int, root context.Context) {
			builder := lrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LeaveRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lrcb *LeaveRequestCreateBulk) SaveX(ctx context.Context) []*LeaveRequest {
	v, err := lrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrcb *LeaveRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := lrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrcb *LeaveRequestCreateBulk) ExecX(ctx context.Context) {
	if err := lrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
