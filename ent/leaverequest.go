// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/longgggwwww/hrm-ms-hr/ent/leaveapproval"
	"github.com/longgggwwww/hrm-ms-hr/ent/leaverequest"
)

// LeaveRequest is the model entity for the LeaveRequest schema.
type LeaveRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TotalDays holds the value of the "total_days" field.
	TotalDays float64 `json:"total_days,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt time.Time `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt time.Time `json:"end_at,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason *string `json:"reason,omitempty"`
	// Type holds the value of the "type" field.
	Type leaverequest.Type `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	Status leaverequest.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LeaveRequestQuery when eager-loading is set.
	Edges                      LeaveRequestEdges `json:"edges"`
	leave_request_leaveapprove *int
	selectValues               sql.SelectValues
}

// LeaveRequestEdges holds the relations/edges for other nodes in the graph.
type LeaveRequestEdges struct {
	// Leaveapprove holds the value of the leaveapprove edge.
	Leaveapprove *LeaveApproval `json:"leaveapprove,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LeaveapproveOrErr returns the Leaveapprove value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LeaveRequestEdges) LeaveapproveOrErr() (*LeaveApproval, error) {
	if e.Leaveapprove != nil {
		return e.Leaveapprove, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: leaveapproval.Label}
	}
	return nil, &NotLoadedError{edge: "leaveapprove"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LeaveRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case leaverequest.FieldTotalDays:
			values[i] = new(sql.NullFloat64)
		case leaverequest.FieldID:
			values[i] = new(sql.NullInt64)
		case leaverequest.FieldReason, leaverequest.FieldType, leaverequest.FieldStatus:
			values[i] = new(sql.NullString)
		case leaverequest.FieldStartAt, leaverequest.FieldEndAt, leaverequest.FieldCreatedAt, leaverequest.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case leaverequest.ForeignKeys[0]: // leave_request_leaveapprove
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LeaveRequest fields.
func (lr *LeaveRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case leaverequest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lr.ID = int(value.Int64)
		case leaverequest.FieldTotalDays:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field total_days", values[i])
			} else if value.Valid {
				lr.TotalDays = value.Float64
			}
		case leaverequest.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				lr.StartAt = value.Time
			}
		case leaverequest.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				lr.EndAt = value.Time
			}
		case leaverequest.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				lr.Reason = new(string)
				*lr.Reason = value.String
			}
		case leaverequest.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				lr.Type = leaverequest.Type(value.String)
			}
		case leaverequest.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				lr.Status = leaverequest.Status(value.String)
			}
		case leaverequest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lr.CreatedAt = value.Time
			}
		case leaverequest.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				lr.UpdatedAt = value.Time
			}
		case leaverequest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field leave_request_leaveapprove", value)
			} else if value.Valid {
				lr.leave_request_leaveapprove = new(int)
				*lr.leave_request_leaveapprove = int(value.Int64)
			}
		default:
			lr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LeaveRequest.
// This includes values selected through modifiers, order, etc.
func (lr *LeaveRequest) Value(name string) (ent.Value, error) {
	return lr.selectValues.Get(name)
}

// QueryLeaveapprove queries the "leaveapprove" edge of the LeaveRequest entity.
func (lr *LeaveRequest) QueryLeaveapprove() *LeaveApprovalQuery {
	return NewLeaveRequestClient(lr.config).QueryLeaveapprove(lr)
}

// Update returns a builder for updating this LeaveRequest.
// Note that you need to call LeaveRequest.Unwrap() before calling this method if this LeaveRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (lr *LeaveRequest) Update() *LeaveRequestUpdateOne {
	return NewLeaveRequestClient(lr.config).UpdateOne(lr)
}

// Unwrap unwraps the LeaveRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lr *LeaveRequest) Unwrap() *LeaveRequest {
	_tx, ok := lr.config.driver.(*txDriver)
	if !ok {
		panic("ent: LeaveRequest is not a transactional entity")
	}
	lr.config.driver = _tx.drv
	return lr
}

// String implements the fmt.Stringer.
func (lr *LeaveRequest) String() string {
	var builder strings.Builder
	builder.WriteString("LeaveRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lr.ID))
	builder.WriteString("total_days=")
	builder.WriteString(fmt.Sprintf("%v", lr.TotalDays))
	builder.WriteString(", ")
	builder.WriteString("start_at=")
	builder.WriteString(lr.StartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(lr.EndAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := lr.Reason; v != nil {
		builder.WriteString("reason=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", lr.Type))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", lr.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(lr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LeaveRequests is a parsable slice of LeaveRequest.
type LeaveRequests []*LeaveRequest
