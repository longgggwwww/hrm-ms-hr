// Code generated by ent, DO NOT EDIT.

package leaverequest

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the leaverequest type in the database.
	Label = "leave_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTotalDays holds the string denoting the total_days field in the database.
	FieldTotalDays = "total_days"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldEndAt holds the string denoting the end_at field in the database.
	FieldEndAt = "end_at"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeLeaveapprove holds the string denoting the leaveapprove edge name in mutations.
	EdgeLeaveapprove = "leaveapprove"
	// Table holds the table name of the leaverequest in the database.
	Table = "leave_requests"
	// LeaveapproveTable is the table that holds the leaveapprove relation/edge.
	LeaveapproveTable = "leave_requests"
	// LeaveapproveInverseTable is the table name for the LeaveApproval entity.
	// It exists in this package in order to avoid circular dependency with the "leaveapproval" package.
	LeaveapproveInverseTable = "leave_approvals"
	// LeaveapproveColumn is the table column denoting the leaveapprove relation/edge.
	LeaveapproveColumn = "leave_request_leaveapprove"
)

// Columns holds all SQL columns for leaverequest fields.
var Columns = []string{
	FieldID,
	FieldTotalDays,
	FieldStartAt,
	FieldEndAt,
	FieldReason,
	FieldType,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "leave_requests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"leave_request_leaveapprove",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// TypeAnnual is the default value of the Type enum.
const DefaultType = TypeAnnual

// Type values.
const (
	TypeAnnual Type = "annual"
	TypeUnpaid Type = "unpaid"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeAnnual, TypeUnpaid:
		return nil
	default:
		return fmt.Errorf("leaverequest: invalid enum value for type field: %q", _type)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending  Status = "pending"
	StatusRejected Status = "rejected"
	StatusApproved Status = "approved"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusRejected, StatusApproved:
		return nil
	default:
		return fmt.Errorf("leaverequest: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the LeaveRequest queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTotalDays orders the results by the total_days field.
func ByTotalDays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalDays, opts...).ToFunc()
}

// ByStartAt orders the results by the start_at field.
func ByStartAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartAt, opts...).ToFunc()
}

// ByEndAt orders the results by the end_at field.
func ByEndAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndAt, opts...).ToFunc()
}

// ByReason orders the results by the reason field.
func ByReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReason, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByLeaveapproveField orders the results by leaveapprove field.
func ByLeaveapproveField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLeaveapproveStep(), sql.OrderByField(field, opts...))
	}
}
func newLeaveapproveStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LeaveapproveInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LeaveapproveTable, LeaveapproveColumn),
	)
}
