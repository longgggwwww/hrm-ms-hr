// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
	"github.com/longgggwwww/hrm-ms-hr/ent/task"
	"github.com/longgggwwww/hrm-ms-hr/ent/taskreport"
)

// TaskReportCreate is the builder for creating a TaskReport entity.
type TaskReportCreate struct {
	config
	mutation *TaskReportMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (trc *TaskReportCreate) SetTitle(s string) *TaskReportCreate {
	trc.mutation.SetTitle(s)
	return trc
}

// SetContent sets the "content" field.
func (trc *TaskReportCreate) SetContent(s string) *TaskReportCreate {
	trc.mutation.SetContent(s)
	return trc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (trc *TaskReportCreate) SetNillableContent(s *string) *TaskReportCreate {
	if s != nil {
		trc.SetContent(*s)
	}
	return trc
}

// SetStatus sets the "status" field.
func (trc *TaskReportCreate) SetStatus(t taskreport.Status) *TaskReportCreate {
	trc.mutation.SetStatus(t)
	return trc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (trc *TaskReportCreate) SetNillableStatus(t *taskreport.Status) *TaskReportCreate {
	if t != nil {
		trc.SetStatus(*t)
	}
	return trc
}

// SetProgressPercentage sets the "progress_percentage" field.
func (trc *TaskReportCreate) SetProgressPercentage(i int) *TaskReportCreate {
	trc.mutation.SetProgressPercentage(i)
	return trc
}

// SetNillableProgressPercentage sets the "progress_percentage" field if the given value is not nil.
func (trc *TaskReportCreate) SetNillableProgressPercentage(i *int) *TaskReportCreate {
	if i != nil {
		trc.SetProgressPercentage(*i)
	}
	return trc
}

// SetReportedAt sets the "reported_at" field.
func (trc *TaskReportCreate) SetReportedAt(t time.Time) *TaskReportCreate {
	trc.mutation.SetReportedAt(t)
	return trc
}

// SetNillableReportedAt sets the "reported_at" field if the given value is not nil.
func (trc *TaskReportCreate) SetNillableReportedAt(t *time.Time) *TaskReportCreate {
	if t != nil {
		trc.SetReportedAt(*t)
	}
	return trc
}

// SetIssuesEncountered sets the "issues_encountered" field.
func (trc *TaskReportCreate) SetIssuesEncountered(s string) *TaskReportCreate {
	trc.mutation.SetIssuesEncountered(s)
	return trc
}

// SetNillableIssuesEncountered sets the "issues_encountered" field if the given value is not nil.
func (trc *TaskReportCreate) SetNillableIssuesEncountered(s *string) *TaskReportCreate {
	if s != nil {
		trc.SetIssuesEncountered(*s)
	}
	return trc
}

// SetNextSteps sets the "next_steps" field.
func (trc *TaskReportCreate) SetNextSteps(s string) *TaskReportCreate {
	trc.mutation.SetNextSteps(s)
	return trc
}

// SetNillableNextSteps sets the "next_steps" field if the given value is not nil.
func (trc *TaskReportCreate) SetNillableNextSteps(s *string) *TaskReportCreate {
	if s != nil {
		trc.SetNextSteps(*s)
	}
	return trc
}

// SetEstimatedCompletion sets the "estimated_completion" field.
func (trc *TaskReportCreate) SetEstimatedCompletion(t time.Time) *TaskReportCreate {
	trc.mutation.SetEstimatedCompletion(t)
	return trc
}

// SetNillableEstimatedCompletion sets the "estimated_completion" field if the given value is not nil.
func (trc *TaskReportCreate) SetNillableEstimatedCompletion(t *time.Time) *TaskReportCreate {
	if t != nil {
		trc.SetEstimatedCompletion(*t)
	}
	return trc
}

// SetTaskID sets the "task_id" field.
func (trc *TaskReportCreate) SetTaskID(i int) *TaskReportCreate {
	trc.mutation.SetTaskID(i)
	return trc
}

// SetReporterID sets the "reporter_id" field.
func (trc *TaskReportCreate) SetReporterID(i int) *TaskReportCreate {
	trc.mutation.SetReporterID(i)
	return trc
}

// SetCreatedAt sets the "created_at" field.
func (trc *TaskReportCreate) SetCreatedAt(t time.Time) *TaskReportCreate {
	trc.mutation.SetCreatedAt(t)
	return trc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (trc *TaskReportCreate) SetNillableCreatedAt(t *time.Time) *TaskReportCreate {
	if t != nil {
		trc.SetCreatedAt(*t)
	}
	return trc
}

// SetUpdatedAt sets the "updated_at" field.
func (trc *TaskReportCreate) SetUpdatedAt(t time.Time) *TaskReportCreate {
	trc.mutation.SetUpdatedAt(t)
	return trc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (trc *TaskReportCreate) SetNillableUpdatedAt(t *time.Time) *TaskReportCreate {
	if t != nil {
		trc.SetUpdatedAt(*t)
	}
	return trc
}

// SetTask sets the "task" edge to the Task entity.
func (trc *TaskReportCreate) SetTask(t *Task) *TaskReportCreate {
	return trc.SetTaskID(t.ID)
}

// SetReporter sets the "reporter" edge to the Employee entity.
func (trc *TaskReportCreate) SetReporter(e *Employee) *TaskReportCreate {
	return trc.SetReporterID(e.ID)
}

// Mutation returns the TaskReportMutation object of the builder.
func (trc *TaskReportCreate) Mutation() *TaskReportMutation {
	return trc.mutation
}

// Save creates the TaskReport in the database.
func (trc *TaskReportCreate) Save(ctx context.Context) (*TaskReport, error) {
	trc.defaults()
	return withHooks(ctx, trc.sqlSave, trc.mutation, trc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (trc *TaskReportCreate) SaveX(ctx context.Context) *TaskReport {
	v, err := trc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trc *TaskReportCreate) Exec(ctx context.Context) error {
	_, err := trc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trc *TaskReportCreate) ExecX(ctx context.Context) {
	if err := trc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (trc *TaskReportCreate) defaults() {
	if _, ok := trc.mutation.Status(); !ok {
		v := taskreport.DefaultStatus
		trc.mutation.SetStatus(v)
	}
	if _, ok := trc.mutation.ProgressPercentage(); !ok {
		v := taskreport.DefaultProgressPercentage
		trc.mutation.SetProgressPercentage(v)
	}
	if _, ok := trc.mutation.ReportedAt(); !ok {
		v := taskreport.DefaultReportedAt()
		trc.mutation.SetReportedAt(v)
	}
	if _, ok := trc.mutation.CreatedAt(); !ok {
		v := taskreport.DefaultCreatedAt()
		trc.mutation.SetCreatedAt(v)
	}
	if _, ok := trc.mutation.UpdatedAt(); !ok {
		v := taskreport.DefaultUpdatedAt()
		trc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (trc *TaskReportCreate) check() error {
	if _, ok := trc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "TaskReport.title"`)}
	}
	if _, ok := trc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "TaskReport.status"`)}
	}
	if v, ok := trc.mutation.Status(); ok {
		if err := taskreport.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "TaskReport.status": %w`, err)}
		}
	}
	if _, ok := trc.mutation.ProgressPercentage(); !ok {
		return &ValidationError{Name: "progress_percentage", err: errors.New(`ent: missing required field "TaskReport.progress_percentage"`)}
	}
	if v, ok := trc.mutation.ProgressPercentage(); ok {
		if err := taskreport.ProgressPercentageValidator(v); err != nil {
			return &ValidationError{Name: "progress_percentage", err: fmt.Errorf(`ent: validator failed for field "TaskReport.progress_percentage": %w`, err)}
		}
	}
	if _, ok := trc.mutation.ReportedAt(); !ok {
		return &ValidationError{Name: "reported_at", err: errors.New(`ent: missing required field "TaskReport.reported_at"`)}
	}
	if _, ok := trc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "TaskReport.task_id"`)}
	}
	if _, ok := trc.mutation.ReporterID(); !ok {
		return &ValidationError{Name: "reporter_id", err: errors.New(`ent: missing required field "TaskReport.reporter_id"`)}
	}
	if _, ok := trc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TaskReport.created_at"`)}
	}
	if _, ok := trc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TaskReport.updated_at"`)}
	}
	if len(trc.mutation.TaskIDs()) == 0 {
		return &ValidationError{Name: "task", err: errors.New(`ent: missing required edge "TaskReport.task"`)}
	}
	if len(trc.mutation.ReporterIDs()) == 0 {
		return &ValidationError{Name: "reporter", err: errors.New(`ent: missing required edge "TaskReport.reporter"`)}
	}
	return nil
}

func (trc *TaskReportCreate) sqlSave(ctx context.Context) (*TaskReport, error) {
	if err := trc.check(); err != nil {
		return nil, err
	}
	_node, _spec := trc.createSpec()
	if err := sqlgraph.CreateNode(ctx, trc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	trc.mutation.id = &_node.ID
	trc.mutation.done = true
	return _node, nil
}

func (trc *TaskReportCreate) createSpec() (*TaskReport, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskReport{config: trc.config}
		_spec = sqlgraph.NewCreateSpec(taskreport.Table, sqlgraph.NewFieldSpec(taskreport.FieldID, field.TypeInt))
	)
	_spec.OnConflict = trc.conflict
	if value, ok := trc.mutation.Title(); ok {
		_spec.SetField(taskreport.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := trc.mutation.Content(); ok {
		_spec.SetField(taskreport.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := trc.mutation.Status(); ok {
		_spec.SetField(taskreport.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := trc.mutation.ProgressPercentage(); ok {
		_spec.SetField(taskreport.FieldProgressPercentage, field.TypeInt, value)
		_node.ProgressPercentage = value
	}
	if value, ok := trc.mutation.ReportedAt(); ok {
		_spec.SetField(taskreport.FieldReportedAt, field.TypeTime, value)
		_node.ReportedAt = value
	}
	if value, ok := trc.mutation.IssuesEncountered(); ok {
		_spec.SetField(taskreport.FieldIssuesEncountered, field.TypeString, value)
		_node.IssuesEncountered = value
	}
	if value, ok := trc.mutation.NextSteps(); ok {
		_spec.SetField(taskreport.FieldNextSteps, field.TypeString, value)
		_node.NextSteps = value
	}
	if value, ok := trc.mutation.EstimatedCompletion(); ok {
		_spec.SetField(taskreport.FieldEstimatedCompletion, field.TypeTime, value)
		_node.EstimatedCompletion = value
	}
	if value, ok := trc.mutation.CreatedAt(); ok {
		_spec.SetField(taskreport.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := trc.mutation.UpdatedAt(); ok {
		_spec.SetField(taskreport.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := trc.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskreport.TaskTable,
			Columns: []string{taskreport.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TaskID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := trc.mutation.ReporterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   taskreport.ReporterTable,
			Columns: []string{taskreport.ReporterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ReporterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskReport.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskReportUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (trc *TaskReportCreate) OnConflict(opts ...sql.ConflictOption) *TaskReportUpsertOne {
	trc.conflict = opts
	return &TaskReportUpsertOne{
		create: trc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (trc *TaskReportCreate) OnConflictColumns(columns ...string) *TaskReportUpsertOne {
	trc.conflict = append(trc.conflict, sql.ConflictColumns(columns...))
	return &TaskReportUpsertOne{
		create: trc,
	}
}

type (
	// TaskReportUpsertOne is the builder for "upsert"-ing
	//  one TaskReport node.
	TaskReportUpsertOne struct {
		create *TaskReportCreate
	}

	// TaskReportUpsert is the "OnConflict" setter.
	TaskReportUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *TaskReportUpsert) SetTitle(v string) *TaskReportUpsert {
	u.Set(taskreport.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TaskReportUpsert) UpdateTitle() *TaskReportUpsert {
	u.SetExcluded(taskreport.FieldTitle)
	return u
}

// SetContent sets the "content" field.
func (u *TaskReportUpsert) SetContent(v string) *TaskReportUpsert {
	u.Set(taskreport.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *TaskReportUpsert) UpdateContent() *TaskReportUpsert {
	u.SetExcluded(taskreport.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *TaskReportUpsert) ClearContent() *TaskReportUpsert {
	u.SetNull(taskreport.FieldContent)
	return u
}

// SetStatus sets the "status" field.
func (u *TaskReportUpsert) SetStatus(v taskreport.Status) *TaskReportUpsert {
	u.Set(taskreport.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskReportUpsert) UpdateStatus() *TaskReportUpsert {
	u.SetExcluded(taskreport.FieldStatus)
	return u
}

// SetProgressPercentage sets the "progress_percentage" field.
func (u *TaskReportUpsert) SetProgressPercentage(v int) *TaskReportUpsert {
	u.Set(taskreport.FieldProgressPercentage, v)
	return u
}

// UpdateProgressPercentage sets the "progress_percentage" field to the value that was provided on create.
func (u *TaskReportUpsert) UpdateProgressPercentage() *TaskReportUpsert {
	u.SetExcluded(taskreport.FieldProgressPercentage)
	return u
}

// AddProgressPercentage adds v to the "progress_percentage" field.
func (u *TaskReportUpsert) AddProgressPercentage(v int) *TaskReportUpsert {
	u.Add(taskreport.FieldProgressPercentage, v)
	return u
}

// SetReportedAt sets the "reported_at" field.
func (u *TaskReportUpsert) SetReportedAt(v time.Time) *TaskReportUpsert {
	u.Set(taskreport.FieldReportedAt, v)
	return u
}

// UpdateReportedAt sets the "reported_at" field to the value that was provided on create.
func (u *TaskReportUpsert) UpdateReportedAt() *TaskReportUpsert {
	u.SetExcluded(taskreport.FieldReportedAt)
	return u
}

// SetIssuesEncountered sets the "issues_encountered" field.
func (u *TaskReportUpsert) SetIssuesEncountered(v string) *TaskReportUpsert {
	u.Set(taskreport.FieldIssuesEncountered, v)
	return u
}

// UpdateIssuesEncountered sets the "issues_encountered" field to the value that was provided on create.
func (u *TaskReportUpsert) UpdateIssuesEncountered() *TaskReportUpsert {
	u.SetExcluded(taskreport.FieldIssuesEncountered)
	return u
}

// ClearIssuesEncountered clears the value of the "issues_encountered" field.
func (u *TaskReportUpsert) ClearIssuesEncountered() *TaskReportUpsert {
	u.SetNull(taskreport.FieldIssuesEncountered)
	return u
}

// SetNextSteps sets the "next_steps" field.
func (u *TaskReportUpsert) SetNextSteps(v string) *TaskReportUpsert {
	u.Set(taskreport.FieldNextSteps, v)
	return u
}

// UpdateNextSteps sets the "next_steps" field to the value that was provided on create.
func (u *TaskReportUpsert) UpdateNextSteps() *TaskReportUpsert {
	u.SetExcluded(taskreport.FieldNextSteps)
	return u
}

// ClearNextSteps clears the value of the "next_steps" field.
func (u *TaskReportUpsert) ClearNextSteps() *TaskReportUpsert {
	u.SetNull(taskreport.FieldNextSteps)
	return u
}

// SetEstimatedCompletion sets the "estimated_completion" field.
func (u *TaskReportUpsert) SetEstimatedCompletion(v time.Time) *TaskReportUpsert {
	u.Set(taskreport.FieldEstimatedCompletion, v)
	return u
}

// UpdateEstimatedCompletion sets the "estimated_completion" field to the value that was provided on create.
func (u *TaskReportUpsert) UpdateEstimatedCompletion() *TaskReportUpsert {
	u.SetExcluded(taskreport.FieldEstimatedCompletion)
	return u
}

// ClearEstimatedCompletion clears the value of the "estimated_completion" field.
func (u *TaskReportUpsert) ClearEstimatedCompletion() *TaskReportUpsert {
	u.SetNull(taskreport.FieldEstimatedCompletion)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *TaskReportUpsert) SetTaskID(v int) *TaskReportUpsert {
	u.Set(taskreport.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TaskReportUpsert) UpdateTaskID() *TaskReportUpsert {
	u.SetExcluded(taskreport.FieldTaskID)
	return u
}

// SetReporterID sets the "reporter_id" field.
func (u *TaskReportUpsert) SetReporterID(v int) *TaskReportUpsert {
	u.Set(taskreport.FieldReporterID, v)
	return u
}

// UpdateReporterID sets the "reporter_id" field to the value that was provided on create.
func (u *TaskReportUpsert) UpdateReporterID() *TaskReportUpsert {
	u.SetExcluded(taskreport.FieldReporterID)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskReportUpsert) SetUpdatedAt(v time.Time) *TaskReportUpsert {
	u.Set(taskreport.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskReportUpsert) UpdateUpdatedAt() *TaskReportUpsert {
	u.SetExcluded(taskreport.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TaskReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskReportUpsertOne) UpdateNewValues() *TaskReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(taskreport.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskReport.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskReportUpsertOne) Ignore() *TaskReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskReportUpsertOne) DoNothing() *TaskReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskReportCreate.OnConflict
// documentation for more info.
func (u *TaskReportUpsertOne) Update(set func(*TaskReportUpsert)) *TaskReportUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *TaskReportUpsertOne) SetTitle(v string) *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TaskReportUpsertOne) UpdateTitle() *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *TaskReportUpsertOne) SetContent(v string) *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *TaskReportUpsertOne) UpdateContent() *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *TaskReportUpsertOne) ClearContent() *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.ClearContent()
	})
}

// SetStatus sets the "status" field.
func (u *TaskReportUpsertOne) SetStatus(v taskreport.Status) *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskReportUpsertOne) UpdateStatus() *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateStatus()
	})
}

// SetProgressPercentage sets the "progress_percentage" field.
func (u *TaskReportUpsertOne) SetProgressPercentage(v int) *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetProgressPercentage(v)
	})
}

// AddProgressPercentage adds v to the "progress_percentage" field.
func (u *TaskReportUpsertOne) AddProgressPercentage(v int) *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.AddProgressPercentage(v)
	})
}

// UpdateProgressPercentage sets the "progress_percentage" field to the value that was provided on create.
func (u *TaskReportUpsertOne) UpdateProgressPercentage() *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateProgressPercentage()
	})
}

// SetReportedAt sets the "reported_at" field.
func (u *TaskReportUpsertOne) SetReportedAt(v time.Time) *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetReportedAt(v)
	})
}

// UpdateReportedAt sets the "reported_at" field to the value that was provided on create.
func (u *TaskReportUpsertOne) UpdateReportedAt() *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateReportedAt()
	})
}

// SetIssuesEncountered sets the "issues_encountered" field.
func (u *TaskReportUpsertOne) SetIssuesEncountered(v string) *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetIssuesEncountered(v)
	})
}

// UpdateIssuesEncountered sets the "issues_encountered" field to the value that was provided on create.
func (u *TaskReportUpsertOne) UpdateIssuesEncountered() *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateIssuesEncountered()
	})
}

// ClearIssuesEncountered clears the value of the "issues_encountered" field.
func (u *TaskReportUpsertOne) ClearIssuesEncountered() *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.ClearIssuesEncountered()
	})
}

// SetNextSteps sets the "next_steps" field.
func (u *TaskReportUpsertOne) SetNextSteps(v string) *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetNextSteps(v)
	})
}

// UpdateNextSteps sets the "next_steps" field to the value that was provided on create.
func (u *TaskReportUpsertOne) UpdateNextSteps() *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateNextSteps()
	})
}

// ClearNextSteps clears the value of the "next_steps" field.
func (u *TaskReportUpsertOne) ClearNextSteps() *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.ClearNextSteps()
	})
}

// SetEstimatedCompletion sets the "estimated_completion" field.
func (u *TaskReportUpsertOne) SetEstimatedCompletion(v time.Time) *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetEstimatedCompletion(v)
	})
}

// UpdateEstimatedCompletion sets the "estimated_completion" field to the value that was provided on create.
func (u *TaskReportUpsertOne) UpdateEstimatedCompletion() *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateEstimatedCompletion()
	})
}

// ClearEstimatedCompletion clears the value of the "estimated_completion" field.
func (u *TaskReportUpsertOne) ClearEstimatedCompletion() *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.ClearEstimatedCompletion()
	})
}

// SetTaskID sets the "task_id" field.
func (u *TaskReportUpsertOne) SetTaskID(v int) *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TaskReportUpsertOne) UpdateTaskID() *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateTaskID()
	})
}

// SetReporterID sets the "reporter_id" field.
func (u *TaskReportUpsertOne) SetReporterID(v int) *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetReporterID(v)
	})
}

// UpdateReporterID sets the "reporter_id" field to the value that was provided on create.
func (u *TaskReportUpsertOne) UpdateReporterID() *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateReporterID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskReportUpsertOne) SetUpdatedAt(v time.Time) *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskReportUpsertOne) UpdateUpdatedAt() *TaskReportUpsertOne {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TaskReportUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskReportCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskReportUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskReportUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskReportUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskReportCreateBulk is the builder for creating many TaskReport entities in bulk.
type TaskReportCreateBulk struct {
	config
	err      error
	builders []*TaskReportCreate
	conflict []sql.ConflictOption
}

// Save creates the TaskReport entities in the database.
func (trcb *TaskReportCreateBulk) Save(ctx context.Context) ([]*TaskReport, error) {
	if trcb.err != nil {
		return nil, trcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(trcb.builders))
	nodes := make([]*TaskReport, len(trcb.builders))
	mutators := make([]Mutator, len(trcb.builders))
	for i := range trcb.builders {
		func(i int, root context.Context) {
			builder := trcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskReportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, trcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = trcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, trcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, trcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (trcb *TaskReportCreateBulk) SaveX(ctx context.Context) []*TaskReport {
	v, err := trcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (trcb *TaskReportCreateBulk) Exec(ctx context.Context) error {
	_, err := trcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (trcb *TaskReportCreateBulk) ExecX(ctx context.Context) {
	if err := trcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskReport.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskReportUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (trcb *TaskReportCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskReportUpsertBulk {
	trcb.conflict = opts
	return &TaskReportUpsertBulk{
		create: trcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskReport.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (trcb *TaskReportCreateBulk) OnConflictColumns(columns ...string) *TaskReportUpsertBulk {
	trcb.conflict = append(trcb.conflict, sql.ConflictColumns(columns...))
	return &TaskReportUpsertBulk{
		create: trcb,
	}
}

// TaskReportUpsertBulk is the builder for "upsert"-ing
// a bulk of TaskReport nodes.
type TaskReportUpsertBulk struct {
	create *TaskReportCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TaskReport.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskReportUpsertBulk) UpdateNewValues() *TaskReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(taskreport.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskReport.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskReportUpsertBulk) Ignore() *TaskReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskReportUpsertBulk) DoNothing() *TaskReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskReportCreateBulk.OnConflict
// documentation for more info.
func (u *TaskReportUpsertBulk) Update(set func(*TaskReportUpsert)) *TaskReportUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskReportUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *TaskReportUpsertBulk) SetTitle(v string) *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *TaskReportUpsertBulk) UpdateTitle() *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateTitle()
	})
}

// SetContent sets the "content" field.
func (u *TaskReportUpsertBulk) SetContent(v string) *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *TaskReportUpsertBulk) UpdateContent() *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *TaskReportUpsertBulk) ClearContent() *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.ClearContent()
	})
}

// SetStatus sets the "status" field.
func (u *TaskReportUpsertBulk) SetStatus(v taskreport.Status) *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskReportUpsertBulk) UpdateStatus() *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateStatus()
	})
}

// SetProgressPercentage sets the "progress_percentage" field.
func (u *TaskReportUpsertBulk) SetProgressPercentage(v int) *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetProgressPercentage(v)
	})
}

// AddProgressPercentage adds v to the "progress_percentage" field.
func (u *TaskReportUpsertBulk) AddProgressPercentage(v int) *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.AddProgressPercentage(v)
	})
}

// UpdateProgressPercentage sets the "progress_percentage" field to the value that was provided on create.
func (u *TaskReportUpsertBulk) UpdateProgressPercentage() *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateProgressPercentage()
	})
}

// SetReportedAt sets the "reported_at" field.
func (u *TaskReportUpsertBulk) SetReportedAt(v time.Time) *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetReportedAt(v)
	})
}

// UpdateReportedAt sets the "reported_at" field to the value that was provided on create.
func (u *TaskReportUpsertBulk) UpdateReportedAt() *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateReportedAt()
	})
}

// SetIssuesEncountered sets the "issues_encountered" field.
func (u *TaskReportUpsertBulk) SetIssuesEncountered(v string) *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetIssuesEncountered(v)
	})
}

// UpdateIssuesEncountered sets the "issues_encountered" field to the value that was provided on create.
func (u *TaskReportUpsertBulk) UpdateIssuesEncountered() *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateIssuesEncountered()
	})
}

// ClearIssuesEncountered clears the value of the "issues_encountered" field.
func (u *TaskReportUpsertBulk) ClearIssuesEncountered() *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.ClearIssuesEncountered()
	})
}

// SetNextSteps sets the "next_steps" field.
func (u *TaskReportUpsertBulk) SetNextSteps(v string) *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetNextSteps(v)
	})
}

// UpdateNextSteps sets the "next_steps" field to the value that was provided on create.
func (u *TaskReportUpsertBulk) UpdateNextSteps() *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateNextSteps()
	})
}

// ClearNextSteps clears the value of the "next_steps" field.
func (u *TaskReportUpsertBulk) ClearNextSteps() *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.ClearNextSteps()
	})
}

// SetEstimatedCompletion sets the "estimated_completion" field.
func (u *TaskReportUpsertBulk) SetEstimatedCompletion(v time.Time) *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetEstimatedCompletion(v)
	})
}

// UpdateEstimatedCompletion sets the "estimated_completion" field to the value that was provided on create.
func (u *TaskReportUpsertBulk) UpdateEstimatedCompletion() *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateEstimatedCompletion()
	})
}

// ClearEstimatedCompletion clears the value of the "estimated_completion" field.
func (u *TaskReportUpsertBulk) ClearEstimatedCompletion() *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.ClearEstimatedCompletion()
	})
}

// SetTaskID sets the "task_id" field.
func (u *TaskReportUpsertBulk) SetTaskID(v int) *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TaskReportUpsertBulk) UpdateTaskID() *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateTaskID()
	})
}

// SetReporterID sets the "reporter_id" field.
func (u *TaskReportUpsertBulk) SetReporterID(v int) *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetReporterID(v)
	})
}

// UpdateReporterID sets the "reporter_id" field to the value that was provided on create.
func (u *TaskReportUpsertBulk) UpdateReporterID() *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateReporterID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TaskReportUpsertBulk) SetUpdatedAt(v time.Time) *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TaskReportUpsertBulk) UpdateUpdatedAt() *TaskReportUpsertBulk {
	return u.Update(func(s *TaskReportUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TaskReportUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskReportCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskReportCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskReportUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
