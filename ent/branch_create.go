// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/longgggwwww/hrm-ms-hr/ent/branch"
	"github.com/longgggwwww/hrm-ms-hr/ent/company"
)

// BranchCreate is the builder for creating a Branch entity.
type BranchCreate struct {
	config
	mutation *BranchMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (bc *BranchCreate) SetName(s string) *BranchCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetCode sets the "code" field.
func (bc *BranchCreate) SetCode(s string) *BranchCreate {
	bc.mutation.SetCode(s)
	return bc
}

// SetAddress sets the "address" field.
func (bc *BranchCreate) SetAddress(s string) *BranchCreate {
	bc.mutation.SetAddress(s)
	return bc
}

// SetContactInfo sets the "contact_info" field.
func (bc *BranchCreate) SetContactInfo(s string) *BranchCreate {
	bc.mutation.SetContactInfo(s)
	return bc
}

// SetCreatedAt sets the "created_at" field.
func (bc *BranchCreate) SetCreatedAt(t time.Time) *BranchCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BranchCreate) SetNillableCreatedAt(t *time.Time) *BranchCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BranchCreate) SetUpdatedAt(t time.Time) *BranchCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BranchCreate) SetNillableUpdatedAt(t *time.Time) *BranchCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BranchCreate) SetID(u uuid.UUID) *BranchCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BranchCreate) SetNillableID(u *uuid.UUID) *BranchCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (bc *BranchCreate) SetCompanyID(id uuid.UUID) *BranchCreate {
	bc.mutation.SetCompanyID(id)
	return bc
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (bc *BranchCreate) SetNillableCompanyID(id *uuid.UUID) *BranchCreate {
	if id != nil {
		bc = bc.SetCompanyID(*id)
	}
	return bc
}

// SetCompany sets the "company" edge to the Company entity.
func (bc *BranchCreate) SetCompany(c *Company) *BranchCreate {
	return bc.SetCompanyID(c.ID)
}

// Mutation returns the BranchMutation object of the builder.
func (bc *BranchCreate) Mutation() *BranchMutation {
	return bc.mutation
}

// Save creates the Branch in the database.
func (bc *BranchCreate) Save(ctx context.Context) (*Branch, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BranchCreate) SaveX(ctx context.Context) *Branch {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BranchCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BranchCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BranchCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := branch.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := branch.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := branch.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BranchCreate) check() error {
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Branch.name"`)}
	}
	if _, ok := bc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Branch.code"`)}
	}
	if _, ok := bc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Branch.address"`)}
	}
	if _, ok := bc.mutation.ContactInfo(); !ok {
		return &ValidationError{Name: "contact_info", err: errors.New(`ent: missing required field "Branch.contact_info"`)}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Branch.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Branch.updated_at"`)}
	}
	return nil
}

func (bc *BranchCreate) sqlSave(ctx context.Context) (*Branch, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BranchCreate) createSpec() (*Branch, *sqlgraph.CreateSpec) {
	var (
		_node = &Branch{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(branch.Table, sqlgraph.NewFieldSpec(branch.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = bc.conflict
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(branch.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bc.mutation.Code(); ok {
		_spec.SetField(branch.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := bc.mutation.Address(); ok {
		_spec.SetField(branch.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := bc.mutation.ContactInfo(); ok {
		_spec.SetField(branch.FieldContactInfo, field.TypeString, value)
		_node.ContactInfo = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(branch.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(branch.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bc.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   branch.CompanyTable,
			Columns: []string{branch.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.company_branches = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Branch.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BranchUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (bc *BranchCreate) OnConflict(opts ...sql.ConflictOption) *BranchUpsertOne {
	bc.conflict = opts
	return &BranchUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Branch.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bc *BranchCreate) OnConflictColumns(columns ...string) *BranchUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BranchUpsertOne{
		create: bc,
	}
}

type (
	// BranchUpsertOne is the builder for "upsert"-ing
	//  one Branch node.
	BranchUpsertOne struct {
		create *BranchCreate
	}

	// BranchUpsert is the "OnConflict" setter.
	BranchUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *BranchUpsert) SetName(v string) *BranchUpsert {
	u.Set(branch.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BranchUpsert) UpdateName() *BranchUpsert {
	u.SetExcluded(branch.FieldName)
	return u
}

// SetCode sets the "code" field.
func (u *BranchUpsert) SetCode(v string) *BranchUpsert {
	u.Set(branch.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *BranchUpsert) UpdateCode() *BranchUpsert {
	u.SetExcluded(branch.FieldCode)
	return u
}

// SetAddress sets the "address" field.
func (u *BranchUpsert) SetAddress(v string) *BranchUpsert {
	u.Set(branch.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *BranchUpsert) UpdateAddress() *BranchUpsert {
	u.SetExcluded(branch.FieldAddress)
	return u
}

// SetContactInfo sets the "contact_info" field.
func (u *BranchUpsert) SetContactInfo(v string) *BranchUpsert {
	u.Set(branch.FieldContactInfo, v)
	return u
}

// UpdateContactInfo sets the "contact_info" field to the value that was provided on create.
func (u *BranchUpsert) UpdateContactInfo() *BranchUpsert {
	u.SetExcluded(branch.FieldContactInfo)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *BranchUpsert) SetCreatedAt(v time.Time) *BranchUpsert {
	u.Set(branch.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BranchUpsert) UpdateCreatedAt() *BranchUpsert {
	u.SetExcluded(branch.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BranchUpsert) SetUpdatedAt(v time.Time) *BranchUpsert {
	u.Set(branch.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BranchUpsert) UpdateUpdatedAt() *BranchUpsert {
	u.SetExcluded(branch.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Branch.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(branch.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BranchUpsertOne) UpdateNewValues() *BranchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(branch.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Branch.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BranchUpsertOne) Ignore() *BranchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BranchUpsertOne) DoNothing() *BranchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BranchCreate.OnConflict
// documentation for more info.
func (u *BranchUpsertOne) Update(set func(*BranchUpsert)) *BranchUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BranchUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *BranchUpsertOne) SetName(v string) *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BranchUpsertOne) UpdateName() *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateName()
	})
}

// SetCode sets the "code" field.
func (u *BranchUpsertOne) SetCode(v string) *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *BranchUpsertOne) UpdateCode() *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateCode()
	})
}

// SetAddress sets the "address" field.
func (u *BranchUpsertOne) SetAddress(v string) *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *BranchUpsertOne) UpdateAddress() *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateAddress()
	})
}

// SetContactInfo sets the "contact_info" field.
func (u *BranchUpsertOne) SetContactInfo(v string) *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.SetContactInfo(v)
	})
}

// UpdateContactInfo sets the "contact_info" field to the value that was provided on create.
func (u *BranchUpsertOne) UpdateContactInfo() *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateContactInfo()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *BranchUpsertOne) SetCreatedAt(v time.Time) *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BranchUpsertOne) UpdateCreatedAt() *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BranchUpsertOne) SetUpdatedAt(v time.Time) *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BranchUpsertOne) UpdateUpdatedAt() *BranchUpsertOne {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BranchUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BranchCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BranchUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BranchUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: BranchUpsertOne.ID is not supported by MySQL driver. Use BranchUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BranchUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BranchCreateBulk is the builder for creating many Branch entities in bulk.
type BranchCreateBulk struct {
	config
	err      error
	builders []*BranchCreate
	conflict []sql.ConflictOption
}

// Save creates the Branch entities in the database.
func (bcb *BranchCreateBulk) Save(ctx context.Context) ([]*Branch, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Branch, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BranchMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BranchCreateBulk) SaveX(ctx context.Context) []*Branch {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BranchCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BranchCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Branch.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BranchUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (bcb *BranchCreateBulk) OnConflict(opts ...sql.ConflictOption) *BranchUpsertBulk {
	bcb.conflict = opts
	return &BranchUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Branch.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcb *BranchCreateBulk) OnConflictColumns(columns ...string) *BranchUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BranchUpsertBulk{
		create: bcb,
	}
}

// BranchUpsertBulk is the builder for "upsert"-ing
// a bulk of Branch nodes.
type BranchUpsertBulk struct {
	create *BranchCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Branch.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(branch.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BranchUpsertBulk) UpdateNewValues() *BranchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(branch.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Branch.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BranchUpsertBulk) Ignore() *BranchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BranchUpsertBulk) DoNothing() *BranchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BranchCreateBulk.OnConflict
// documentation for more info.
func (u *BranchUpsertBulk) Update(set func(*BranchUpsert)) *BranchUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BranchUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *BranchUpsertBulk) SetName(v string) *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BranchUpsertBulk) UpdateName() *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateName()
	})
}

// SetCode sets the "code" field.
func (u *BranchUpsertBulk) SetCode(v string) *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *BranchUpsertBulk) UpdateCode() *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateCode()
	})
}

// SetAddress sets the "address" field.
func (u *BranchUpsertBulk) SetAddress(v string) *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *BranchUpsertBulk) UpdateAddress() *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateAddress()
	})
}

// SetContactInfo sets the "contact_info" field.
func (u *BranchUpsertBulk) SetContactInfo(v string) *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.SetContactInfo(v)
	})
}

// UpdateContactInfo sets the "contact_info" field to the value that was provided on create.
func (u *BranchUpsertBulk) UpdateContactInfo() *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateContactInfo()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *BranchUpsertBulk) SetCreatedAt(v time.Time) *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *BranchUpsertBulk) UpdateCreatedAt() *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BranchUpsertBulk) SetUpdatedAt(v time.Time) *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BranchUpsertBulk) UpdateUpdatedAt() *BranchUpsertBulk {
	return u.Update(func(s *BranchUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *BranchUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BranchCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BranchCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BranchUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
