// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/department"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
	"github.com/longgggwwww/hrm-ms-hr/ent/position"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
)

// PositionUpdate is the builder for updating Position entities.
type PositionUpdate struct {
	config
	hooks    []Hook
	mutation *PositionMutation
}

// Where appends a list predicates to the PositionUpdate builder.
func (pu *PositionUpdate) Where(ps ...predicate.Position) *PositionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PositionUpdate) SetName(s string) *PositionUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableName(s *string) *PositionUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetCode sets the "code" field.
func (pu *PositionUpdate) SetCode(s string) *PositionUpdate {
	pu.mutation.SetCode(s)
	return pu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableCode(s *string) *PositionUpdate {
	if s != nil {
		pu.SetCode(*s)
	}
	return pu
}

// SetDepartmentID sets the "department_id" field.
func (pu *PositionUpdate) SetDepartmentID(i int) *PositionUpdate {
	pu.mutation.SetDepartmentID(i)
	return pu
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableDepartmentID(i *int) *PositionUpdate {
	if i != nil {
		pu.SetDepartmentID(*i)
	}
	return pu
}

// SetParentID sets the "parent_id" field.
func (pu *PositionUpdate) SetParentID(i int) *PositionUpdate {
	pu.mutation.SetParentID(i)
	return pu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableParentID(i *int) *PositionUpdate {
	if i != nil {
		pu.SetParentID(*i)
	}
	return pu
}

// ClearParentID clears the value of the "parent_id" field.
func (pu *PositionUpdate) ClearParentID() *PositionUpdate {
	pu.mutation.ClearParentID()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PositionUpdate) SetUpdatedAt(t time.Time) *PositionUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// AddEmployeeIDs adds the "employees" edge to the Employee entity by IDs.
func (pu *PositionUpdate) AddEmployeeIDs(ids ...int) *PositionUpdate {
	pu.mutation.AddEmployeeIDs(ids...)
	return pu
}

// AddEmployees adds the "employees" edges to the Employee entity.
func (pu *PositionUpdate) AddEmployees(e ...*Employee) *PositionUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.AddEmployeeIDs(ids...)
}

// SetDepartmentsID sets the "departments" edge to the Department entity by ID.
func (pu *PositionUpdate) SetDepartmentsID(id int) *PositionUpdate {
	pu.mutation.SetDepartmentsID(id)
	return pu
}

// SetDepartments sets the "departments" edge to the Department entity.
func (pu *PositionUpdate) SetDepartments(d *Department) *PositionUpdate {
	return pu.SetDepartmentsID(d.ID)
}

// AddChildIDs adds the "children" edge to the Position entity by IDs.
func (pu *PositionUpdate) AddChildIDs(ids ...int) *PositionUpdate {
	pu.mutation.AddChildIDs(ids...)
	return pu
}

// AddChildren adds the "children" edges to the Position entity.
func (pu *PositionUpdate) AddChildren(p ...*Position) *PositionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the Position entity.
func (pu *PositionUpdate) SetParent(p *Position) *PositionUpdate {
	return pu.SetParentID(p.ID)
}

// Mutation returns the PositionMutation object of the builder.
func (pu *PositionUpdate) Mutation() *PositionMutation {
	return pu.mutation
}

// ClearEmployees clears all "employees" edges to the Employee entity.
func (pu *PositionUpdate) ClearEmployees() *PositionUpdate {
	pu.mutation.ClearEmployees()
	return pu
}

// RemoveEmployeeIDs removes the "employees" edge to Employee entities by IDs.
func (pu *PositionUpdate) RemoveEmployeeIDs(ids ...int) *PositionUpdate {
	pu.mutation.RemoveEmployeeIDs(ids...)
	return pu
}

// RemoveEmployees removes "employees" edges to Employee entities.
func (pu *PositionUpdate) RemoveEmployees(e ...*Employee) *PositionUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pu.RemoveEmployeeIDs(ids...)
}

// ClearDepartments clears the "departments" edge to the Department entity.
func (pu *PositionUpdate) ClearDepartments() *PositionUpdate {
	pu.mutation.ClearDepartments()
	return pu
}

// ClearChildren clears all "children" edges to the Position entity.
func (pu *PositionUpdate) ClearChildren() *PositionUpdate {
	pu.mutation.ClearChildren()
	return pu
}

// RemoveChildIDs removes the "children" edge to Position entities by IDs.
func (pu *PositionUpdate) RemoveChildIDs(ids ...int) *PositionUpdate {
	pu.mutation.RemoveChildIDs(ids...)
	return pu
}

// RemoveChildren removes "children" edges to Position entities.
func (pu *PositionUpdate) RemoveChildren(p ...*Position) *PositionUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Position entity.
func (pu *PositionUpdate) ClearParent() *PositionUpdate {
	pu.mutation.ClearParent()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PositionUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PositionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PositionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PositionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PositionUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := position.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PositionUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := position.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Position.name": %w`, err)}
		}
	}
	if pu.mutation.DepartmentsCleared() && len(pu.mutation.DepartmentsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Position.departments"`)
	}
	return nil
}

func (pu *PositionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(position.Table, position.Columns, sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(position.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Code(); ok {
		_spec.SetField(position.FieldCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(position.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.EmployeesTable,
			Columns: []string{position.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedEmployeesIDs(); len(nodes) > 0 && !pu.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.EmployeesTable,
			Columns: []string{position.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.EmployeesTable,
			Columns: []string{position.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.DepartmentsTable,
			Columns: []string{position.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.DepartmentsTable,
			Columns: []string{position.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ChildrenTable,
			Columns: []string{position.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ChildrenTable,
			Columns: []string{position.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ChildrenTable,
			Columns: []string{position.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.ParentTable,
			Columns: []string{position.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.ParentTable,
			Columns: []string{position.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{position.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PositionUpdateOne is the builder for updating a single Position entity.
type PositionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PositionMutation
}

// SetName sets the "name" field.
func (puo *PositionUpdateOne) SetName(s string) *PositionUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableName(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetCode sets the "code" field.
func (puo *PositionUpdateOne) SetCode(s string) *PositionUpdateOne {
	puo.mutation.SetCode(s)
	return puo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableCode(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetCode(*s)
	}
	return puo
}

// SetDepartmentID sets the "department_id" field.
func (puo *PositionUpdateOne) SetDepartmentID(i int) *PositionUpdateOne {
	puo.mutation.SetDepartmentID(i)
	return puo
}

// SetNillableDepartmentID sets the "department_id" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableDepartmentID(i *int) *PositionUpdateOne {
	if i != nil {
		puo.SetDepartmentID(*i)
	}
	return puo
}

// SetParentID sets the "parent_id" field.
func (puo *PositionUpdateOne) SetParentID(i int) *PositionUpdateOne {
	puo.mutation.SetParentID(i)
	return puo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableParentID(i *int) *PositionUpdateOne {
	if i != nil {
		puo.SetParentID(*i)
	}
	return puo
}

// ClearParentID clears the value of the "parent_id" field.
func (puo *PositionUpdateOne) ClearParentID() *PositionUpdateOne {
	puo.mutation.ClearParentID()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PositionUpdateOne) SetUpdatedAt(t time.Time) *PositionUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// AddEmployeeIDs adds the "employees" edge to the Employee entity by IDs.
func (puo *PositionUpdateOne) AddEmployeeIDs(ids ...int) *PositionUpdateOne {
	puo.mutation.AddEmployeeIDs(ids...)
	return puo
}

// AddEmployees adds the "employees" edges to the Employee entity.
func (puo *PositionUpdateOne) AddEmployees(e ...*Employee) *PositionUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.AddEmployeeIDs(ids...)
}

// SetDepartmentsID sets the "departments" edge to the Department entity by ID.
func (puo *PositionUpdateOne) SetDepartmentsID(id int) *PositionUpdateOne {
	puo.mutation.SetDepartmentsID(id)
	return puo
}

// SetDepartments sets the "departments" edge to the Department entity.
func (puo *PositionUpdateOne) SetDepartments(d *Department) *PositionUpdateOne {
	return puo.SetDepartmentsID(d.ID)
}

// AddChildIDs adds the "children" edge to the Position entity by IDs.
func (puo *PositionUpdateOne) AddChildIDs(ids ...int) *PositionUpdateOne {
	puo.mutation.AddChildIDs(ids...)
	return puo
}

// AddChildren adds the "children" edges to the Position entity.
func (puo *PositionUpdateOne) AddChildren(p ...*Position) *PositionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddChildIDs(ids...)
}

// SetParent sets the "parent" edge to the Position entity.
func (puo *PositionUpdateOne) SetParent(p *Position) *PositionUpdateOne {
	return puo.SetParentID(p.ID)
}

// Mutation returns the PositionMutation object of the builder.
func (puo *PositionUpdateOne) Mutation() *PositionMutation {
	return puo.mutation
}

// ClearEmployees clears all "employees" edges to the Employee entity.
func (puo *PositionUpdateOne) ClearEmployees() *PositionUpdateOne {
	puo.mutation.ClearEmployees()
	return puo
}

// RemoveEmployeeIDs removes the "employees" edge to Employee entities by IDs.
func (puo *PositionUpdateOne) RemoveEmployeeIDs(ids ...int) *PositionUpdateOne {
	puo.mutation.RemoveEmployeeIDs(ids...)
	return puo
}

// RemoveEmployees removes "employees" edges to Employee entities.
func (puo *PositionUpdateOne) RemoveEmployees(e ...*Employee) *PositionUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return puo.RemoveEmployeeIDs(ids...)
}

// ClearDepartments clears the "departments" edge to the Department entity.
func (puo *PositionUpdateOne) ClearDepartments() *PositionUpdateOne {
	puo.mutation.ClearDepartments()
	return puo
}

// ClearChildren clears all "children" edges to the Position entity.
func (puo *PositionUpdateOne) ClearChildren() *PositionUpdateOne {
	puo.mutation.ClearChildren()
	return puo
}

// RemoveChildIDs removes the "children" edge to Position entities by IDs.
func (puo *PositionUpdateOne) RemoveChildIDs(ids ...int) *PositionUpdateOne {
	puo.mutation.RemoveChildIDs(ids...)
	return puo
}

// RemoveChildren removes "children" edges to Position entities.
func (puo *PositionUpdateOne) RemoveChildren(p ...*Position) *PositionUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveChildIDs(ids...)
}

// ClearParent clears the "parent" edge to the Position entity.
func (puo *PositionUpdateOne) ClearParent() *PositionUpdateOne {
	puo.mutation.ClearParent()
	return puo
}

// Where appends a list predicates to the PositionUpdate builder.
func (puo *PositionUpdateOne) Where(ps ...predicate.Position) *PositionUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PositionUpdateOne) Select(field string, fields ...string) *PositionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Position entity.
func (puo *PositionUpdateOne) Save(ctx context.Context) (*Position, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PositionUpdateOne) SaveX(ctx context.Context) *Position {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PositionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PositionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PositionUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := position.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PositionUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := position.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Position.name": %w`, err)}
		}
	}
	if puo.mutation.DepartmentsCleared() && len(puo.mutation.DepartmentsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Position.departments"`)
	}
	return nil
}

func (puo *PositionUpdateOne) sqlSave(ctx context.Context) (_node *Position, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(position.Table, position.Columns, sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Position.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, position.FieldID)
		for _, f := range fields {
			if !position.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != position.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(position.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Code(); ok {
		_spec.SetField(position.FieldCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(position.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.EmployeesTable,
			Columns: []string{position.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedEmployeesIDs(); len(nodes) > 0 && !puo.mutation.EmployeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.EmployeesTable,
			Columns: []string{position.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EmployeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.EmployeesTable,
			Columns: []string{position.EmployeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DepartmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.DepartmentsTable,
			Columns: []string{position.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DepartmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.DepartmentsTable,
			Columns: []string{position.DepartmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ChildrenTable,
			Columns: []string{position.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !puo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ChildrenTable,
			Columns: []string{position.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   position.ChildrenTable,
			Columns: []string{position.ChildrenColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.ParentTable,
			Columns: []string{position.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.ParentTable,
			Columns: []string{position.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Position{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{position.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
