// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
)

// EmployeeCreate is the builder for creating a Employee entity.
type EmployeeCreate struct {
	config
	mutation *EmployeeMutation
	hooks    []Hook
}

// SetEmployeeID sets the "employee_id" field.
func (ec *EmployeeCreate) SetEmployeeID(s string) *EmployeeCreate {
	ec.mutation.SetEmployeeID(s)
	return ec
}

// SetCode sets the "code" field.
func (ec *EmployeeCreate) SetCode(s string) *EmployeeCreate {
	ec.mutation.SetCode(s)
	return ec
}

// SetStatus sets the "status" field.
func (ec *EmployeeCreate) SetStatus(b bool) *EmployeeCreate {
	ec.mutation.SetStatus(b)
	return ec
}

// SetPositionID sets the "position_id" field.
func (ec *EmployeeCreate) SetPositionID(u uuid.UUID) *EmployeeCreate {
	ec.mutation.SetPositionID(u)
	return ec
}

// SetJoiningAt sets the "joining_at" field.
func (ec *EmployeeCreate) SetJoiningAt(t time.Time) *EmployeeCreate {
	ec.mutation.SetJoiningAt(t)
	return ec
}

// SetBranchID sets the "branch_id" field.
func (ec *EmployeeCreate) SetBranchID(u uuid.UUID) *EmployeeCreate {
	ec.mutation.SetBranchID(u)
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EmployeeCreate) SetCreatedAt(t time.Time) *EmployeeCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableCreatedAt(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EmployeeCreate) SetUpdatedAt(t time.Time) *EmployeeCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableUpdatedAt(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetDepartmentID sets the "department_id" field.
func (ec *EmployeeCreate) SetDepartmentID(u uuid.UUID) *EmployeeCreate {
	ec.mutation.SetDepartmentID(u)
	return ec
}

// SetID sets the "id" field.
func (ec *EmployeeCreate) SetID(u uuid.UUID) *EmployeeCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableID(u *uuid.UUID) *EmployeeCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// Mutation returns the EmployeeMutation object of the builder.
func (ec *EmployeeCreate) Mutation() *EmployeeMutation {
	return ec.mutation
}

// Save creates the Employee in the database.
func (ec *EmployeeCreate) Save(ctx context.Context) (*Employee, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmployeeCreate) SaveX(ctx context.Context) *Employee {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EmployeeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EmployeeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EmployeeCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := employee.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := employee.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		v := employee.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EmployeeCreate) check() error {
	if _, ok := ec.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "employee_id", err: errors.New(`ent: missing required field "Employee.employee_id"`)}
	}
	if _, ok := ec.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Employee.code"`)}
	}
	if _, ok := ec.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Employee.status"`)}
	}
	if _, ok := ec.mutation.PositionID(); !ok {
		return &ValidationError{Name: "position_id", err: errors.New(`ent: missing required field "Employee.position_id"`)}
	}
	if _, ok := ec.mutation.JoiningAt(); !ok {
		return &ValidationError{Name: "joining_at", err: errors.New(`ent: missing required field "Employee.joining_at"`)}
	}
	if _, ok := ec.mutation.BranchID(); !ok {
		return &ValidationError{Name: "branch_id", err: errors.New(`ent: missing required field "Employee.branch_id"`)}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Employee.created_at"`)}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Employee.updated_at"`)}
	}
	if _, ok := ec.mutation.DepartmentID(); !ok {
		return &ValidationError{Name: "department_id", err: errors.New(`ent: missing required field "Employee.department_id"`)}
	}
	return nil
}

func (ec *EmployeeCreate) sqlSave(ctx context.Context) (*Employee, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EmployeeCreate) createSpec() (*Employee, *sqlgraph.CreateSpec) {
	var (
		_node = &Employee{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(employee.Table, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.EmployeeID(); ok {
		_spec.SetField(employee.FieldEmployeeID, field.TypeString, value)
		_node.EmployeeID = value
	}
	if value, ok := ec.mutation.Code(); ok {
		_spec.SetField(employee.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := ec.mutation.Status(); ok {
		_spec.SetField(employee.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	if value, ok := ec.mutation.PositionID(); ok {
		_spec.SetField(employee.FieldPositionID, field.TypeUUID, value)
		_node.PositionID = value
	}
	if value, ok := ec.mutation.JoiningAt(); ok {
		_spec.SetField(employee.FieldJoiningAt, field.TypeTime, value)
		_node.JoiningAt = value
	}
	if value, ok := ec.mutation.BranchID(); ok {
		_spec.SetField(employee.FieldBranchID, field.TypeUUID, value)
		_node.BranchID = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(employee.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(employee.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ec.mutation.DepartmentID(); ok {
		_spec.SetField(employee.FieldDepartmentID, field.TypeUUID, value)
		_node.DepartmentID = value
	}
	return _node, _spec
}

// EmployeeCreateBulk is the builder for creating many Employee entities in bulk.
type EmployeeCreateBulk struct {
	config
	err      error
	builders []*EmployeeCreate
}

// Save creates the Employee entities in the database.
func (ecb *EmployeeCreateBulk) Save(ctx context.Context) ([]*Employee, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Employee, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmployeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) SaveX(ctx context.Context) []*Employee {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EmployeeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
