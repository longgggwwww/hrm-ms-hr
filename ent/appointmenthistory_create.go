// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/appointmenthistory"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
)

// AppointmentHistoryCreate is the builder for creating a AppointmentHistory entity.
type AppointmentHistoryCreate struct {
	config
	mutation *AppointmentHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEmployeeID sets the "employee_id" field.
func (ahc *AppointmentHistoryCreate) SetEmployeeID(i int) *AppointmentHistoryCreate {
	ahc.mutation.SetEmployeeID(i)
	return ahc
}

// SetPositionName sets the "position_name" field.
func (ahc *AppointmentHistoryCreate) SetPositionName(s string) *AppointmentHistoryCreate {
	ahc.mutation.SetPositionName(s)
	return ahc
}

// SetJoiningAt sets the "joining_at" field.
func (ahc *AppointmentHistoryCreate) SetJoiningAt(t time.Time) *AppointmentHistoryCreate {
	ahc.mutation.SetJoiningAt(t)
	return ahc
}

// SetDescription sets the "description" field.
func (ahc *AppointmentHistoryCreate) SetDescription(s string) *AppointmentHistoryCreate {
	ahc.mutation.SetDescription(s)
	return ahc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ahc *AppointmentHistoryCreate) SetNillableDescription(s *string) *AppointmentHistoryCreate {
	if s != nil {
		ahc.SetDescription(*s)
	}
	return ahc
}

// SetAttachmentUrls sets the "attachment_urls" field.
func (ahc *AppointmentHistoryCreate) SetAttachmentUrls(s []string) *AppointmentHistoryCreate {
	ahc.mutation.SetAttachmentUrls(s)
	return ahc
}

// SetCreatedAt sets the "created_at" field.
func (ahc *AppointmentHistoryCreate) SetCreatedAt(t time.Time) *AppointmentHistoryCreate {
	ahc.mutation.SetCreatedAt(t)
	return ahc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ahc *AppointmentHistoryCreate) SetNillableCreatedAt(t *time.Time) *AppointmentHistoryCreate {
	if t != nil {
		ahc.SetCreatedAt(*t)
	}
	return ahc
}

// SetUpdatedAt sets the "updated_at" field.
func (ahc *AppointmentHistoryCreate) SetUpdatedAt(t time.Time) *AppointmentHistoryCreate {
	ahc.mutation.SetUpdatedAt(t)
	return ahc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ahc *AppointmentHistoryCreate) SetNillableUpdatedAt(t *time.Time) *AppointmentHistoryCreate {
	if t != nil {
		ahc.SetUpdatedAt(*t)
	}
	return ahc
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (ahc *AppointmentHistoryCreate) SetEmployee(e *Employee) *AppointmentHistoryCreate {
	return ahc.SetEmployeeID(e.ID)
}

// Mutation returns the AppointmentHistoryMutation object of the builder.
func (ahc *AppointmentHistoryCreate) Mutation() *AppointmentHistoryMutation {
	return ahc.mutation
}

// Save creates the AppointmentHistory in the database.
func (ahc *AppointmentHistoryCreate) Save(ctx context.Context) (*AppointmentHistory, error) {
	ahc.defaults()
	return withHooks(ctx, ahc.sqlSave, ahc.mutation, ahc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ahc *AppointmentHistoryCreate) SaveX(ctx context.Context) *AppointmentHistory {
	v, err := ahc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ahc *AppointmentHistoryCreate) Exec(ctx context.Context) error {
	_, err := ahc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahc *AppointmentHistoryCreate) ExecX(ctx context.Context) {
	if err := ahc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ahc *AppointmentHistoryCreate) defaults() {
	if _, ok := ahc.mutation.CreatedAt(); !ok {
		v := appointmenthistory.DefaultCreatedAt()
		ahc.mutation.SetCreatedAt(v)
	}
	if _, ok := ahc.mutation.UpdatedAt(); !ok {
		v := appointmenthistory.DefaultUpdatedAt()
		ahc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ahc *AppointmentHistoryCreate) check() error {
	if _, ok := ahc.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "employee_id", err: errors.New(`ent: missing required field "AppointmentHistory.employee_id"`)}
	}
	if _, ok := ahc.mutation.PositionName(); !ok {
		return &ValidationError{Name: "position_name", err: errors.New(`ent: missing required field "AppointmentHistory.position_name"`)}
	}
	if _, ok := ahc.mutation.JoiningAt(); !ok {
		return &ValidationError{Name: "joining_at", err: errors.New(`ent: missing required field "AppointmentHistory.joining_at"`)}
	}
	if _, ok := ahc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppointmentHistory.created_at"`)}
	}
	if _, ok := ahc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppointmentHistory.updated_at"`)}
	}
	if len(ahc.mutation.EmployeeIDs()) == 0 {
		return &ValidationError{Name: "employee", err: errors.New(`ent: missing required edge "AppointmentHistory.employee"`)}
	}
	return nil
}

func (ahc *AppointmentHistoryCreate) sqlSave(ctx context.Context) (*AppointmentHistory, error) {
	if err := ahc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ahc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ahc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ahc.mutation.id = &_node.ID
	ahc.mutation.done = true
	return _node, nil
}

func (ahc *AppointmentHistoryCreate) createSpec() (*AppointmentHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &AppointmentHistory{config: ahc.config}
		_spec = sqlgraph.NewCreateSpec(appointmenthistory.Table, sqlgraph.NewFieldSpec(appointmenthistory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ahc.conflict
	if value, ok := ahc.mutation.PositionName(); ok {
		_spec.SetField(appointmenthistory.FieldPositionName, field.TypeString, value)
		_node.PositionName = value
	}
	if value, ok := ahc.mutation.JoiningAt(); ok {
		_spec.SetField(appointmenthistory.FieldJoiningAt, field.TypeTime, value)
		_node.JoiningAt = value
	}
	if value, ok := ahc.mutation.Description(); ok {
		_spec.SetField(appointmenthistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ahc.mutation.AttachmentUrls(); ok {
		_spec.SetField(appointmenthistory.FieldAttachmentUrls, field.TypeJSON, value)
		_node.AttachmentUrls = value
	}
	if value, ok := ahc.mutation.CreatedAt(); ok {
		_spec.SetField(appointmenthistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ahc.mutation.UpdatedAt(); ok {
		_spec.SetField(appointmenthistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ahc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmenthistory.EmployeeTable,
			Columns: []string{appointmenthistory.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppointmentHistory.Create().
//		SetEmployeeID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppointmentHistoryUpsert) {
//			SetEmployeeID(v+v).
//		}).
//		Exec(ctx)
func (ahc *AppointmentHistoryCreate) OnConflict(opts ...sql.ConflictOption) *AppointmentHistoryUpsertOne {
	ahc.conflict = opts
	return &AppointmentHistoryUpsertOne{
		create: ahc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppointmentHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ahc *AppointmentHistoryCreate) OnConflictColumns(columns ...string) *AppointmentHistoryUpsertOne {
	ahc.conflict = append(ahc.conflict, sql.ConflictColumns(columns...))
	return &AppointmentHistoryUpsertOne{
		create: ahc,
	}
}

type (
	// AppointmentHistoryUpsertOne is the builder for "upsert"-ing
	//  one AppointmentHistory node.
	AppointmentHistoryUpsertOne struct {
		create *AppointmentHistoryCreate
	}

	// AppointmentHistoryUpsert is the "OnConflict" setter.
	AppointmentHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetEmployeeID sets the "employee_id" field.
func (u *AppointmentHistoryUpsert) SetEmployeeID(v int) *AppointmentHistoryUpsert {
	u.Set(appointmenthistory.FieldEmployeeID, v)
	return u
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *AppointmentHistoryUpsert) UpdateEmployeeID() *AppointmentHistoryUpsert {
	u.SetExcluded(appointmenthistory.FieldEmployeeID)
	return u
}

// SetPositionName sets the "position_name" field.
func (u *AppointmentHistoryUpsert) SetPositionName(v string) *AppointmentHistoryUpsert {
	u.Set(appointmenthistory.FieldPositionName, v)
	return u
}

// UpdatePositionName sets the "position_name" field to the value that was provided on create.
func (u *AppointmentHistoryUpsert) UpdatePositionName() *AppointmentHistoryUpsert {
	u.SetExcluded(appointmenthistory.FieldPositionName)
	return u
}

// SetJoiningAt sets the "joining_at" field.
func (u *AppointmentHistoryUpsert) SetJoiningAt(v time.Time) *AppointmentHistoryUpsert {
	u.Set(appointmenthistory.FieldJoiningAt, v)
	return u
}

// UpdateJoiningAt sets the "joining_at" field to the value that was provided on create.
func (u *AppointmentHistoryUpsert) UpdateJoiningAt() *AppointmentHistoryUpsert {
	u.SetExcluded(appointmenthistory.FieldJoiningAt)
	return u
}

// SetDescription sets the "description" field.
func (u *AppointmentHistoryUpsert) SetDescription(v string) *AppointmentHistoryUpsert {
	u.Set(appointmenthistory.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AppointmentHistoryUpsert) UpdateDescription() *AppointmentHistoryUpsert {
	u.SetExcluded(appointmenthistory.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *AppointmentHistoryUpsert) ClearDescription() *AppointmentHistoryUpsert {
	u.SetNull(appointmenthistory.FieldDescription)
	return u
}

// SetAttachmentUrls sets the "attachment_urls" field.
func (u *AppointmentHistoryUpsert) SetAttachmentUrls(v []string) *AppointmentHistoryUpsert {
	u.Set(appointmenthistory.FieldAttachmentUrls, v)
	return u
}

// UpdateAttachmentUrls sets the "attachment_urls" field to the value that was provided on create.
func (u *AppointmentHistoryUpsert) UpdateAttachmentUrls() *AppointmentHistoryUpsert {
	u.SetExcluded(appointmenthistory.FieldAttachmentUrls)
	return u
}

// ClearAttachmentUrls clears the value of the "attachment_urls" field.
func (u *AppointmentHistoryUpsert) ClearAttachmentUrls() *AppointmentHistoryUpsert {
	u.SetNull(appointmenthistory.FieldAttachmentUrls)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AppointmentHistoryUpsert) SetCreatedAt(v time.Time) *AppointmentHistoryUpsert {
	u.Set(appointmenthistory.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppointmentHistoryUpsert) UpdateCreatedAt() *AppointmentHistoryUpsert {
	u.SetExcluded(appointmenthistory.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppointmentHistoryUpsert) SetUpdatedAt(v time.Time) *AppointmentHistoryUpsert {
	u.Set(appointmenthistory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppointmentHistoryUpsert) UpdateUpdatedAt() *AppointmentHistoryUpsert {
	u.SetExcluded(appointmenthistory.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AppointmentHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AppointmentHistoryUpsertOne) UpdateNewValues() *AppointmentHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppointmentHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppointmentHistoryUpsertOne) Ignore() *AppointmentHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppointmentHistoryUpsertOne) DoNothing() *AppointmentHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppointmentHistoryCreate.OnConflict
// documentation for more info.
func (u *AppointmentHistoryUpsertOne) Update(set func(*AppointmentHistoryUpsert)) *AppointmentHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppointmentHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *AppointmentHistoryUpsertOne) SetEmployeeID(v int) *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *AppointmentHistoryUpsertOne) UpdateEmployeeID() *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.UpdateEmployeeID()
	})
}

// SetPositionName sets the "position_name" field.
func (u *AppointmentHistoryUpsertOne) SetPositionName(v string) *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.SetPositionName(v)
	})
}

// UpdatePositionName sets the "position_name" field to the value that was provided on create.
func (u *AppointmentHistoryUpsertOne) UpdatePositionName() *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.UpdatePositionName()
	})
}

// SetJoiningAt sets the "joining_at" field.
func (u *AppointmentHistoryUpsertOne) SetJoiningAt(v time.Time) *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.SetJoiningAt(v)
	})
}

// UpdateJoiningAt sets the "joining_at" field to the value that was provided on create.
func (u *AppointmentHistoryUpsertOne) UpdateJoiningAt() *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.UpdateJoiningAt()
	})
}

// SetDescription sets the "description" field.
func (u *AppointmentHistoryUpsertOne) SetDescription(v string) *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AppointmentHistoryUpsertOne) UpdateDescription() *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AppointmentHistoryUpsertOne) ClearDescription() *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.ClearDescription()
	})
}

// SetAttachmentUrls sets the "attachment_urls" field.
func (u *AppointmentHistoryUpsertOne) SetAttachmentUrls(v []string) *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.SetAttachmentUrls(v)
	})
}

// UpdateAttachmentUrls sets the "attachment_urls" field to the value that was provided on create.
func (u *AppointmentHistoryUpsertOne) UpdateAttachmentUrls() *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.UpdateAttachmentUrls()
	})
}

// ClearAttachmentUrls clears the value of the "attachment_urls" field.
func (u *AppointmentHistoryUpsertOne) ClearAttachmentUrls() *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.ClearAttachmentUrls()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppointmentHistoryUpsertOne) SetCreatedAt(v time.Time) *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppointmentHistoryUpsertOne) UpdateCreatedAt() *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppointmentHistoryUpsertOne) SetUpdatedAt(v time.Time) *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppointmentHistoryUpsertOne) UpdateUpdatedAt() *AppointmentHistoryUpsertOne {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *AppointmentHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppointmentHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppointmentHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppointmentHistoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppointmentHistoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppointmentHistoryCreateBulk is the builder for creating many AppointmentHistory entities in bulk.
type AppointmentHistoryCreateBulk struct {
	config
	err      error
	builders []*AppointmentHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the AppointmentHistory entities in the database.
func (ahcb *AppointmentHistoryCreateBulk) Save(ctx context.Context) ([]*AppointmentHistory, error) {
	if ahcb.err != nil {
		return nil, ahcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ahcb.builders))
	nodes := make([]*AppointmentHistory, len(ahcb.builders))
	mutators := make([]Mutator, len(ahcb.builders))
	for i := range ahcb.builders {
		func(i int, root context.Context) {
			builder := ahcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppointmentHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ahcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ahcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ahcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ahcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ahcb *AppointmentHistoryCreateBulk) SaveX(ctx context.Context) []*AppointmentHistory {
	v, err := ahcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ahcb *AppointmentHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ahcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahcb *AppointmentHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ahcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppointmentHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppointmentHistoryUpsert) {
//			SetEmployeeID(v+v).
//		}).
//		Exec(ctx)
func (ahcb *AppointmentHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppointmentHistoryUpsertBulk {
	ahcb.conflict = opts
	return &AppointmentHistoryUpsertBulk{
		create: ahcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppointmentHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ahcb *AppointmentHistoryCreateBulk) OnConflictColumns(columns ...string) *AppointmentHistoryUpsertBulk {
	ahcb.conflict = append(ahcb.conflict, sql.ConflictColumns(columns...))
	return &AppointmentHistoryUpsertBulk{
		create: ahcb,
	}
}

// AppointmentHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of AppointmentHistory nodes.
type AppointmentHistoryUpsertBulk struct {
	create *AppointmentHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppointmentHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AppointmentHistoryUpsertBulk) UpdateNewValues() *AppointmentHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppointmentHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppointmentHistoryUpsertBulk) Ignore() *AppointmentHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppointmentHistoryUpsertBulk) DoNothing() *AppointmentHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppointmentHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *AppointmentHistoryUpsertBulk) Update(set func(*AppointmentHistoryUpsert)) *AppointmentHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppointmentHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *AppointmentHistoryUpsertBulk) SetEmployeeID(v int) *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *AppointmentHistoryUpsertBulk) UpdateEmployeeID() *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.UpdateEmployeeID()
	})
}

// SetPositionName sets the "position_name" field.
func (u *AppointmentHistoryUpsertBulk) SetPositionName(v string) *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.SetPositionName(v)
	})
}

// UpdatePositionName sets the "position_name" field to the value that was provided on create.
func (u *AppointmentHistoryUpsertBulk) UpdatePositionName() *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.UpdatePositionName()
	})
}

// SetJoiningAt sets the "joining_at" field.
func (u *AppointmentHistoryUpsertBulk) SetJoiningAt(v time.Time) *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.SetJoiningAt(v)
	})
}

// UpdateJoiningAt sets the "joining_at" field to the value that was provided on create.
func (u *AppointmentHistoryUpsertBulk) UpdateJoiningAt() *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.UpdateJoiningAt()
	})
}

// SetDescription sets the "description" field.
func (u *AppointmentHistoryUpsertBulk) SetDescription(v string) *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *AppointmentHistoryUpsertBulk) UpdateDescription() *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *AppointmentHistoryUpsertBulk) ClearDescription() *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.ClearDescription()
	})
}

// SetAttachmentUrls sets the "attachment_urls" field.
func (u *AppointmentHistoryUpsertBulk) SetAttachmentUrls(v []string) *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.SetAttachmentUrls(v)
	})
}

// UpdateAttachmentUrls sets the "attachment_urls" field to the value that was provided on create.
func (u *AppointmentHistoryUpsertBulk) UpdateAttachmentUrls() *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.UpdateAttachmentUrls()
	})
}

// ClearAttachmentUrls clears the value of the "attachment_urls" field.
func (u *AppointmentHistoryUpsertBulk) ClearAttachmentUrls() *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.ClearAttachmentUrls()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *AppointmentHistoryUpsertBulk) SetCreatedAt(v time.Time) *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AppointmentHistoryUpsertBulk) UpdateCreatedAt() *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppointmentHistoryUpsertBulk) SetUpdatedAt(v time.Time) *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppointmentHistoryUpsertBulk) UpdateUpdatedAt() *AppointmentHistoryUpsertBulk {
	return u.Update(func(s *AppointmentHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *AppointmentHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppointmentHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppointmentHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppointmentHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
