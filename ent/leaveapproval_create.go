// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/leaveapproval"
)

// LeaveApprovalCreate is the builder for creating a LeaveApproval entity.
type LeaveApprovalCreate struct {
	config
	mutation *LeaveApprovalMutation
	hooks    []Hook
}

// SetComment sets the "comment" field.
func (lac *LeaveApprovalCreate) SetComment(s string) *LeaveApprovalCreate {
	lac.mutation.SetComment(s)
	return lac
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (lac *LeaveApprovalCreate) SetNillableComment(s *string) *LeaveApprovalCreate {
	if s != nil {
		lac.SetComment(*s)
	}
	return lac
}

// SetCreatedAt sets the "created_at" field.
func (lac *LeaveApprovalCreate) SetCreatedAt(t time.Time) *LeaveApprovalCreate {
	lac.mutation.SetCreatedAt(t)
	return lac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lac *LeaveApprovalCreate) SetNillableCreatedAt(t *time.Time) *LeaveApprovalCreate {
	if t != nil {
		lac.SetCreatedAt(*t)
	}
	return lac
}

// SetUpdatedAt sets the "updated_at" field.
func (lac *LeaveApprovalCreate) SetUpdatedAt(t time.Time) *LeaveApprovalCreate {
	lac.mutation.SetUpdatedAt(t)
	return lac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lac *LeaveApprovalCreate) SetNillableUpdatedAt(t *time.Time) *LeaveApprovalCreate {
	if t != nil {
		lac.SetUpdatedAt(*t)
	}
	return lac
}

// Mutation returns the LeaveApprovalMutation object of the builder.
func (lac *LeaveApprovalCreate) Mutation() *LeaveApprovalMutation {
	return lac.mutation
}

// Save creates the LeaveApproval in the database.
func (lac *LeaveApprovalCreate) Save(ctx context.Context) (*LeaveApproval, error) {
	lac.defaults()
	return withHooks(ctx, lac.sqlSave, lac.mutation, lac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lac *LeaveApprovalCreate) SaveX(ctx context.Context) *LeaveApproval {
	v, err := lac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lac *LeaveApprovalCreate) Exec(ctx context.Context) error {
	_, err := lac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lac *LeaveApprovalCreate) ExecX(ctx context.Context) {
	if err := lac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lac *LeaveApprovalCreate) defaults() {
	if _, ok := lac.mutation.CreatedAt(); !ok {
		v := leaveapproval.DefaultCreatedAt()
		lac.mutation.SetCreatedAt(v)
	}
	if _, ok := lac.mutation.UpdatedAt(); !ok {
		v := leaveapproval.DefaultUpdatedAt()
		lac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lac *LeaveApprovalCreate) check() error {
	if _, ok := lac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LeaveApproval.created_at"`)}
	}
	if _, ok := lac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "LeaveApproval.updated_at"`)}
	}
	return nil
}

func (lac *LeaveApprovalCreate) sqlSave(ctx context.Context) (*LeaveApproval, error) {
	if err := lac.check(); err != nil {
		return nil, err
	}
	_node, _spec := lac.createSpec()
	if err := sqlgraph.CreateNode(ctx, lac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lac.mutation.id = &_node.ID
	lac.mutation.done = true
	return _node, nil
}

func (lac *LeaveApprovalCreate) createSpec() (*LeaveApproval, *sqlgraph.CreateSpec) {
	var (
		_node = &LeaveApproval{config: lac.config}
		_spec = sqlgraph.NewCreateSpec(leaveapproval.Table, sqlgraph.NewFieldSpec(leaveapproval.FieldID, field.TypeInt))
	)
	if value, ok := lac.mutation.Comment(); ok {
		_spec.SetField(leaveapproval.FieldComment, field.TypeString, value)
		_node.Comment = &value
	}
	if value, ok := lac.mutation.CreatedAt(); ok {
		_spec.SetField(leaveapproval.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lac.mutation.UpdatedAt(); ok {
		_spec.SetField(leaveapproval.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// LeaveApprovalCreateBulk is the builder for creating many LeaveApproval entities in bulk.
type LeaveApprovalCreateBulk struct {
	config
	err      error
	builders []*LeaveApprovalCreate
}

// Save creates the LeaveApproval entities in the database.
func (lacb *LeaveApprovalCreateBulk) Save(ctx context.Context) ([]*LeaveApproval, error) {
	if lacb.err != nil {
		return nil, lacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lacb.builders))
	nodes := make([]*LeaveApproval, len(lacb.builders))
	mutators := make([]Mutator, len(lacb.builders))
	for i := range lacb.builders {
		func(i int, root context.Context) {
			builder := lacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LeaveApprovalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lacb *LeaveApprovalCreateBulk) SaveX(ctx context.Context) []*LeaveApproval {
	v, err := lacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lacb *LeaveApprovalCreateBulk) Exec(ctx context.Context) error {
	_, err := lacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lacb *LeaveApprovalCreateBulk) ExecX(ctx context.Context) {
	if err := lacb.Exec(ctx); err != nil {
		panic(err)
	}
}
