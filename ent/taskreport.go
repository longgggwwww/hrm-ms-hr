// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
	"github.com/longgggwwww/hrm-ms-hr/ent/task"
	"github.com/longgggwwww/hrm-ms-hr/ent/taskreport"
)

// TaskReport is the model entity for the TaskReport schema.
type TaskReport struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID int `json:"task_id,omitempty"`
	// ReporterID holds the value of the "reporter_id" field.
	ReporterID int `json:"reporter_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskReportQuery when eager-loading is set.
	Edges        TaskReportEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TaskReportEdges holds the relations/edges for other nodes in the graph.
type TaskReportEdges struct {
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// Reporter holds the value of the reporter edge.
	Reporter *Employee `json:"reporter,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskReportEdges) TaskOrErr() (*Task, error) {
	if e.Task != nil {
		return e.Task, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: task.Label}
	}
	return nil, &NotLoadedError{edge: "task"}
}

// ReporterOrErr returns the Reporter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskReportEdges) ReporterOrErr() (*Employee, error) {
	if e.Reporter != nil {
		return e.Reporter, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: employee.Label}
	}
	return nil, &NotLoadedError{edge: "reporter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskReport) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taskreport.FieldID, taskreport.FieldTaskID, taskreport.FieldReporterID:
			values[i] = new(sql.NullInt64)
		case taskreport.FieldContent:
			values[i] = new(sql.NullString)
		case taskreport.FieldCreatedAt, taskreport.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskReport fields.
func (tr *TaskReport) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taskreport.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tr.ID = int(value.Int64)
		case taskreport.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				tr.Content = value.String
			}
		case taskreport.FieldTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				tr.TaskID = int(value.Int64)
			}
		case taskreport.FieldReporterID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reporter_id", values[i])
			} else if value.Valid {
				tr.ReporterID = int(value.Int64)
			}
		case taskreport.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tr.CreatedAt = value.Time
			}
		case taskreport.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tr.UpdatedAt = value.Time
			}
		default:
			tr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaskReport.
// This includes values selected through modifiers, order, etc.
func (tr *TaskReport) Value(name string) (ent.Value, error) {
	return tr.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the TaskReport entity.
func (tr *TaskReport) QueryTask() *TaskQuery {
	return NewTaskReportClient(tr.config).QueryTask(tr)
}

// QueryReporter queries the "reporter" edge of the TaskReport entity.
func (tr *TaskReport) QueryReporter() *EmployeeQuery {
	return NewTaskReportClient(tr.config).QueryReporter(tr)
}

// Update returns a builder for updating this TaskReport.
// Note that you need to call TaskReport.Unwrap() before calling this method if this TaskReport
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TaskReport) Update() *TaskReportUpdateOne {
	return NewTaskReportClient(tr.config).UpdateOne(tr)
}

// Unwrap unwraps the TaskReport entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TaskReport) Unwrap() *TaskReport {
	_tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskReport is not a transactional entity")
	}
	tr.config.driver = _tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TaskReport) String() string {
	var builder strings.Builder
	builder.WriteString("TaskReport(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tr.ID))
	builder.WriteString("content=")
	builder.WriteString(tr.Content)
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", tr.TaskID))
	builder.WriteString(", ")
	builder.WriteString("reporter_id=")
	builder.WriteString(fmt.Sprintf("%v", tr.ReporterID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TaskReports is a parsable slice of TaskReport.
type TaskReports []*TaskReport
