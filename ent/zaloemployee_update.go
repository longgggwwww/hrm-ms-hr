// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
	"github.com/longgggwwww/hrm-ms-hr/ent/zaloemployee"
)

// ZaloEmployeeUpdate is the builder for updating ZaloEmployee entities.
type ZaloEmployeeUpdate struct {
	config
	hooks    []Hook
	mutation *ZaloEmployeeMutation
}

// Where appends a list predicates to the ZaloEmployeeUpdate builder.
func (zeu *ZaloEmployeeUpdate) Where(ps ...predicate.ZaloEmployee) *ZaloEmployeeUpdate {
	zeu.mutation.Where(ps...)
	return zeu
}

// SetZaloUID sets the "zalo_uid" field.
func (zeu *ZaloEmployeeUpdate) SetZaloUID(s string) *ZaloEmployeeUpdate {
	zeu.mutation.SetZaloUID(s)
	return zeu
}

// SetNillableZaloUID sets the "zalo_uid" field if the given value is not nil.
func (zeu *ZaloEmployeeUpdate) SetNillableZaloUID(s *string) *ZaloEmployeeUpdate {
	if s != nil {
		zeu.SetZaloUID(*s)
	}
	return zeu
}

// SetEmployeeID sets the "employee_id" field.
func (zeu *ZaloEmployeeUpdate) SetEmployeeID(i int) *ZaloEmployeeUpdate {
	zeu.mutation.SetEmployeeID(i)
	return zeu
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (zeu *ZaloEmployeeUpdate) SetNillableEmployeeID(i *int) *ZaloEmployeeUpdate {
	if i != nil {
		zeu.SetEmployeeID(*i)
	}
	return zeu
}

// SetUpdatedAt sets the "updated_at" field.
func (zeu *ZaloEmployeeUpdate) SetUpdatedAt(t time.Time) *ZaloEmployeeUpdate {
	zeu.mutation.SetUpdatedAt(t)
	return zeu
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (zeu *ZaloEmployeeUpdate) SetEmployee(e *Employee) *ZaloEmployeeUpdate {
	return zeu.SetEmployeeID(e.ID)
}

// Mutation returns the ZaloEmployeeMutation object of the builder.
func (zeu *ZaloEmployeeUpdate) Mutation() *ZaloEmployeeMutation {
	return zeu.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (zeu *ZaloEmployeeUpdate) ClearEmployee() *ZaloEmployeeUpdate {
	zeu.mutation.ClearEmployee()
	return zeu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (zeu *ZaloEmployeeUpdate) Save(ctx context.Context) (int, error) {
	zeu.defaults()
	return withHooks(ctx, zeu.sqlSave, zeu.mutation, zeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (zeu *ZaloEmployeeUpdate) SaveX(ctx context.Context) int {
	affected, err := zeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (zeu *ZaloEmployeeUpdate) Exec(ctx context.Context) error {
	_, err := zeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (zeu *ZaloEmployeeUpdate) ExecX(ctx context.Context) {
	if err := zeu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (zeu *ZaloEmployeeUpdate) defaults() {
	if _, ok := zeu.mutation.UpdatedAt(); !ok {
		v := zaloemployee.UpdateDefaultUpdatedAt()
		zeu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (zeu *ZaloEmployeeUpdate) check() error {
	if v, ok := zeu.mutation.ZaloUID(); ok {
		if err := zaloemployee.ZaloUIDValidator(v); err != nil {
			return &ValidationError{Name: "zalo_uid", err: fmt.Errorf(`ent: validator failed for field "ZaloEmployee.zalo_uid": %w`, err)}
		}
	}
	if zeu.mutation.EmployeeCleared() && len(zeu.mutation.EmployeeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ZaloEmployee.employee"`)
	}
	return nil
}

func (zeu *ZaloEmployeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := zeu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(zaloemployee.Table, zaloemployee.Columns, sqlgraph.NewFieldSpec(zaloemployee.FieldID, field.TypeInt))
	if ps := zeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := zeu.mutation.ZaloUID(); ok {
		_spec.SetField(zaloemployee.FieldZaloUID, field.TypeString, value)
	}
	if value, ok := zeu.mutation.UpdatedAt(); ok {
		_spec.SetField(zaloemployee.FieldUpdatedAt, field.TypeTime, value)
	}
	if zeu.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   zaloemployee.EmployeeTable,
			Columns: []string{zaloemployee.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := zeu.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   zaloemployee.EmployeeTable,
			Columns: []string{zaloemployee.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, zeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{zaloemployee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	zeu.mutation.done = true
	return n, nil
}

// ZaloEmployeeUpdateOne is the builder for updating a single ZaloEmployee entity.
type ZaloEmployeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ZaloEmployeeMutation
}

// SetZaloUID sets the "zalo_uid" field.
func (zeuo *ZaloEmployeeUpdateOne) SetZaloUID(s string) *ZaloEmployeeUpdateOne {
	zeuo.mutation.SetZaloUID(s)
	return zeuo
}

// SetNillableZaloUID sets the "zalo_uid" field if the given value is not nil.
func (zeuo *ZaloEmployeeUpdateOne) SetNillableZaloUID(s *string) *ZaloEmployeeUpdateOne {
	if s != nil {
		zeuo.SetZaloUID(*s)
	}
	return zeuo
}

// SetEmployeeID sets the "employee_id" field.
func (zeuo *ZaloEmployeeUpdateOne) SetEmployeeID(i int) *ZaloEmployeeUpdateOne {
	zeuo.mutation.SetEmployeeID(i)
	return zeuo
}

// SetNillableEmployeeID sets the "employee_id" field if the given value is not nil.
func (zeuo *ZaloEmployeeUpdateOne) SetNillableEmployeeID(i *int) *ZaloEmployeeUpdateOne {
	if i != nil {
		zeuo.SetEmployeeID(*i)
	}
	return zeuo
}

// SetUpdatedAt sets the "updated_at" field.
func (zeuo *ZaloEmployeeUpdateOne) SetUpdatedAt(t time.Time) *ZaloEmployeeUpdateOne {
	zeuo.mutation.SetUpdatedAt(t)
	return zeuo
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (zeuo *ZaloEmployeeUpdateOne) SetEmployee(e *Employee) *ZaloEmployeeUpdateOne {
	return zeuo.SetEmployeeID(e.ID)
}

// Mutation returns the ZaloEmployeeMutation object of the builder.
func (zeuo *ZaloEmployeeUpdateOne) Mutation() *ZaloEmployeeMutation {
	return zeuo.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (zeuo *ZaloEmployeeUpdateOne) ClearEmployee() *ZaloEmployeeUpdateOne {
	zeuo.mutation.ClearEmployee()
	return zeuo
}

// Where appends a list predicates to the ZaloEmployeeUpdate builder.
func (zeuo *ZaloEmployeeUpdateOne) Where(ps ...predicate.ZaloEmployee) *ZaloEmployeeUpdateOne {
	zeuo.mutation.Where(ps...)
	return zeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (zeuo *ZaloEmployeeUpdateOne) Select(field string, fields ...string) *ZaloEmployeeUpdateOne {
	zeuo.fields = append([]string{field}, fields...)
	return zeuo
}

// Save executes the query and returns the updated ZaloEmployee entity.
func (zeuo *ZaloEmployeeUpdateOne) Save(ctx context.Context) (*ZaloEmployee, error) {
	zeuo.defaults()
	return withHooks(ctx, zeuo.sqlSave, zeuo.mutation, zeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (zeuo *ZaloEmployeeUpdateOne) SaveX(ctx context.Context) *ZaloEmployee {
	node, err := zeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (zeuo *ZaloEmployeeUpdateOne) Exec(ctx context.Context) error {
	_, err := zeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (zeuo *ZaloEmployeeUpdateOne) ExecX(ctx context.Context) {
	if err := zeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (zeuo *ZaloEmployeeUpdateOne) defaults() {
	if _, ok := zeuo.mutation.UpdatedAt(); !ok {
		v := zaloemployee.UpdateDefaultUpdatedAt()
		zeuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (zeuo *ZaloEmployeeUpdateOne) check() error {
	if v, ok := zeuo.mutation.ZaloUID(); ok {
		if err := zaloemployee.ZaloUIDValidator(v); err != nil {
			return &ValidationError{Name: "zalo_uid", err: fmt.Errorf(`ent: validator failed for field "ZaloEmployee.zalo_uid": %w`, err)}
		}
	}
	if zeuo.mutation.EmployeeCleared() && len(zeuo.mutation.EmployeeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ZaloEmployee.employee"`)
	}
	return nil
}

func (zeuo *ZaloEmployeeUpdateOne) sqlSave(ctx context.Context) (_node *ZaloEmployee, err error) {
	if err := zeuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(zaloemployee.Table, zaloemployee.Columns, sqlgraph.NewFieldSpec(zaloemployee.FieldID, field.TypeInt))
	id, ok := zeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ZaloEmployee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := zeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, zaloemployee.FieldID)
		for _, f := range fields {
			if !zaloemployee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != zaloemployee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := zeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := zeuo.mutation.ZaloUID(); ok {
		_spec.SetField(zaloemployee.FieldZaloUID, field.TypeString, value)
	}
	if value, ok := zeuo.mutation.UpdatedAt(); ok {
		_spec.SetField(zaloemployee.FieldUpdatedAt, field.TypeTime, value)
	}
	if zeuo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   zaloemployee.EmployeeTable,
			Columns: []string{zaloemployee.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := zeuo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   zaloemployee.EmployeeTable,
			Columns: []string{zaloemployee.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ZaloEmployee{config: zeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, zeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{zaloemployee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	zeuo.mutation.done = true
	return _node, nil
}
