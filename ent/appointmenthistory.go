// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/longgggwwww/hrm-ms-hr/ent/appointmenthistory"
	"github.com/longgggwwww/hrm-ms-hr/ent/employee"
)

// AppointmentHistory is the model entity for the AppointmentHistory schema.
type AppointmentHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EmployeeID holds the value of the "employee_id" field.
	EmployeeID int `json:"employee_id,omitempty"`
	// PositionName holds the value of the "position_name" field.
	PositionName string `json:"position_name,omitempty"`
	// JoiningAt holds the value of the "joining_at" field.
	JoiningAt time.Time `json:"joining_at,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// AttachmentUrls holds the value of the "attachment_urls" field.
	AttachmentUrls []string `json:"attachment_urls,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppointmentHistoryQuery when eager-loading is set.
	Edges        AppointmentHistoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AppointmentHistoryEdges holds the relations/edges for other nodes in the graph.
type AppointmentHistoryEdges struct {
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentHistoryEdges) EmployeeOrErr() (*Employee, error) {
	if e.Employee != nil {
		return e.Employee, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: employee.Label}
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppointmentHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appointmenthistory.FieldAttachmentUrls:
			values[i] = new([]byte)
		case appointmenthistory.FieldID, appointmenthistory.FieldEmployeeID:
			values[i] = new(sql.NullInt64)
		case appointmenthistory.FieldPositionName, appointmenthistory.FieldDescription:
			values[i] = new(sql.NullString)
		case appointmenthistory.FieldJoiningAt, appointmenthistory.FieldCreatedAt, appointmenthistory.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppointmentHistory fields.
func (ah *AppointmentHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appointmenthistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ah.ID = int(value.Int64)
		case appointmenthistory.FieldEmployeeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value.Valid {
				ah.EmployeeID = int(value.Int64)
			}
		case appointmenthistory.FieldPositionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position_name", values[i])
			} else if value.Valid {
				ah.PositionName = value.String
			}
		case appointmenthistory.FieldJoiningAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field joining_at", values[i])
			} else if value.Valid {
				ah.JoiningAt = value.Time
			}
		case appointmenthistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ah.Description = value.String
			}
		case appointmenthistory.FieldAttachmentUrls:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attachment_urls", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ah.AttachmentUrls); err != nil {
					return fmt.Errorf("unmarshal field attachment_urls: %w", err)
				}
			}
		case appointmenthistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ah.CreatedAt = value.Time
			}
		case appointmenthistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ah.UpdatedAt = value.Time
			}
		default:
			ah.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppointmentHistory.
// This includes values selected through modifiers, order, etc.
func (ah *AppointmentHistory) Value(name string) (ent.Value, error) {
	return ah.selectValues.Get(name)
}

// QueryEmployee queries the "employee" edge of the AppointmentHistory entity.
func (ah *AppointmentHistory) QueryEmployee() *EmployeeQuery {
	return NewAppointmentHistoryClient(ah.config).QueryEmployee(ah)
}

// Update returns a builder for updating this AppointmentHistory.
// Note that you need to call AppointmentHistory.Unwrap() before calling this method if this AppointmentHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ah *AppointmentHistory) Update() *AppointmentHistoryUpdateOne {
	return NewAppointmentHistoryClient(ah.config).UpdateOne(ah)
}

// Unwrap unwraps the AppointmentHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ah *AppointmentHistory) Unwrap() *AppointmentHistory {
	_tx, ok := ah.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppointmentHistory is not a transactional entity")
	}
	ah.config.driver = _tx.drv
	return ah
}

// String implements the fmt.Stringer.
func (ah *AppointmentHistory) String() string {
	var builder strings.Builder
	builder.WriteString("AppointmentHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ah.ID))
	builder.WriteString("employee_id=")
	builder.WriteString(fmt.Sprintf("%v", ah.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("position_name=")
	builder.WriteString(ah.PositionName)
	builder.WriteString(", ")
	builder.WriteString("joining_at=")
	builder.WriteString(ah.JoiningAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ah.Description)
	builder.WriteString(", ")
	builder.WriteString("attachment_urls=")
	builder.WriteString(fmt.Sprintf("%v", ah.AttachmentUrls))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ah.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ah.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AppointmentHistories is a parsable slice of AppointmentHistory.
type AppointmentHistories []*AppointmentHistory
