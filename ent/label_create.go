// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/longgggwwww/hrm-ms-hr/ent/label"
	"github.com/longgggwwww/hrm-ms-hr/ent/organization"
	"github.com/longgggwwww/hrm-ms-hr/ent/task"
)

// LabelCreate is the builder for creating a Label entity.
type LabelCreate struct {
	config
	mutation *LabelMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (lc *LabelCreate) SetName(s string) *LabelCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetDescription sets the "description" field.
func (lc *LabelCreate) SetDescription(s string) *LabelCreate {
	lc.mutation.SetDescription(s)
	return lc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (lc *LabelCreate) SetNillableDescription(s *string) *LabelCreate {
	if s != nil {
		lc.SetDescription(*s)
	}
	return lc
}

// SetColor sets the "color" field.
func (lc *LabelCreate) SetColor(s string) *LabelCreate {
	lc.mutation.SetColor(s)
	return lc
}

// SetOrgID sets the "org_id" field.
func (lc *LabelCreate) SetOrgID(i int) *LabelCreate {
	lc.mutation.SetOrgID(i)
	return lc
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (lc *LabelCreate) SetNillableOrgID(i *int) *LabelCreate {
	if i != nil {
		lc.SetOrgID(*i)
	}
	return lc
}

// SetCreatedAt sets the "created_at" field.
func (lc *LabelCreate) SetCreatedAt(t time.Time) *LabelCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LabelCreate) SetNillableCreatedAt(t *time.Time) *LabelCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *LabelCreate) SetUpdatedAt(t time.Time) *LabelCreate {
	lc.mutation.SetUpdatedAt(t)
	return lc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lc *LabelCreate) SetNillableUpdatedAt(t *time.Time) *LabelCreate {
	if t != nil {
		lc.SetUpdatedAt(*t)
	}
	return lc
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (lc *LabelCreate) AddTaskIDs(ids ...int) *LabelCreate {
	lc.mutation.AddTaskIDs(ids...)
	return lc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (lc *LabelCreate) AddTasks(t ...*Task) *LabelCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return lc.AddTaskIDs(ids...)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (lc *LabelCreate) SetOrganizationID(id int) *LabelCreate {
	lc.mutation.SetOrganizationID(id)
	return lc
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (lc *LabelCreate) SetNillableOrganizationID(id *int) *LabelCreate {
	if id != nil {
		lc = lc.SetOrganizationID(*id)
	}
	return lc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (lc *LabelCreate) SetOrganization(o *Organization) *LabelCreate {
	return lc.SetOrganizationID(o.ID)
}

// Mutation returns the LabelMutation object of the builder.
func (lc *LabelCreate) Mutation() *LabelMutation {
	return lc.mutation
}

// Save creates the Label in the database.
func (lc *LabelCreate) Save(ctx context.Context) (*Label, error) {
	lc.defaults()
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LabelCreate) SaveX(ctx context.Context) *Label {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LabelCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LabelCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LabelCreate) defaults() {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := label.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		v := label.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LabelCreate) check() error {
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Label.name"`)}
	}
	if v, ok := lc.mutation.Name(); ok {
		if err := label.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Label.name": %w`, err)}
		}
	}
	if _, ok := lc.mutation.Color(); !ok {
		return &ValidationError{Name: "color", err: errors.New(`ent: missing required field "Label.color"`)}
	}
	if v, ok := lc.mutation.Color(); ok {
		if err := label.ColorValidator(v); err != nil {
			return &ValidationError{Name: "color", err: fmt.Errorf(`ent: validator failed for field "Label.color": %w`, err)}
		}
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Label.created_at"`)}
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Label.updated_at"`)}
	}
	return nil
}

func (lc *LabelCreate) sqlSave(ctx context.Context) (*Label, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LabelCreate) createSpec() (*Label, *sqlgraph.CreateSpec) {
	var (
		_node = &Label{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(label.Table, sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt))
	)
	_spec.OnConflict = lc.conflict
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(label.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lc.mutation.Description(); ok {
		_spec.SetField(label.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := lc.mutation.Color(); ok {
		_spec.SetField(label.FieldColor, field.TypeString, value)
		_node.Color = value
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(label.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.SetField(label.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := lc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   label.TasksTable,
			Columns: []string{label.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   label.OrganizationTable,
			Columns: []string{label.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrgID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Label.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LabelUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (lc *LabelCreate) OnConflict(opts ...sql.ConflictOption) *LabelUpsertOne {
	lc.conflict = opts
	return &LabelUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Label.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lc *LabelCreate) OnConflictColumns(columns ...string) *LabelUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LabelUpsertOne{
		create: lc,
	}
}

type (
	// LabelUpsertOne is the builder for "upsert"-ing
	//  one Label node.
	LabelUpsertOne struct {
		create *LabelCreate
	}

	// LabelUpsert is the "OnConflict" setter.
	LabelUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *LabelUpsert) SetName(v string) *LabelUpsert {
	u.Set(label.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LabelUpsert) UpdateName() *LabelUpsert {
	u.SetExcluded(label.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *LabelUpsert) SetDescription(v string) *LabelUpsert {
	u.Set(label.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *LabelUpsert) UpdateDescription() *LabelUpsert {
	u.SetExcluded(label.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *LabelUpsert) ClearDescription() *LabelUpsert {
	u.SetNull(label.FieldDescription)
	return u
}

// SetColor sets the "color" field.
func (u *LabelUpsert) SetColor(v string) *LabelUpsert {
	u.Set(label.FieldColor, v)
	return u
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *LabelUpsert) UpdateColor() *LabelUpsert {
	u.SetExcluded(label.FieldColor)
	return u
}

// SetOrgID sets the "org_id" field.
func (u *LabelUpsert) SetOrgID(v int) *LabelUpsert {
	u.Set(label.FieldOrgID, v)
	return u
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *LabelUpsert) UpdateOrgID() *LabelUpsert {
	u.SetExcluded(label.FieldOrgID)
	return u
}

// ClearOrgID clears the value of the "org_id" field.
func (u *LabelUpsert) ClearOrgID() *LabelUpsert {
	u.SetNull(label.FieldOrgID)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LabelUpsert) SetUpdatedAt(v time.Time) *LabelUpsert {
	u.Set(label.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LabelUpsert) UpdateUpdatedAt() *LabelUpsert {
	u.SetExcluded(label.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Label.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LabelUpsertOne) UpdateNewValues() *LabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(label.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Label.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LabelUpsertOne) Ignore() *LabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LabelUpsertOne) DoNothing() *LabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LabelCreate.OnConflict
// documentation for more info.
func (u *LabelUpsertOne) Update(set func(*LabelUpsert)) *LabelUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LabelUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *LabelUpsertOne) SetName(v string) *LabelUpsertOne {
	return u.Update(func(s *LabelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LabelUpsertOne) UpdateName() *LabelUpsertOne {
	return u.Update(func(s *LabelUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *LabelUpsertOne) SetDescription(v string) *LabelUpsertOne {
	return u.Update(func(s *LabelUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *LabelUpsertOne) UpdateDescription() *LabelUpsertOne {
	return u.Update(func(s *LabelUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *LabelUpsertOne) ClearDescription() *LabelUpsertOne {
	return u.Update(func(s *LabelUpsert) {
		s.ClearDescription()
	})
}

// SetColor sets the "color" field.
func (u *LabelUpsertOne) SetColor(v string) *LabelUpsertOne {
	return u.Update(func(s *LabelUpsert) {
		s.SetColor(v)
	})
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *LabelUpsertOne) UpdateColor() *LabelUpsertOne {
	return u.Update(func(s *LabelUpsert) {
		s.UpdateColor()
	})
}

// SetOrgID sets the "org_id" field.
func (u *LabelUpsertOne) SetOrgID(v int) *LabelUpsertOne {
	return u.Update(func(s *LabelUpsert) {
		s.SetOrgID(v)
	})
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *LabelUpsertOne) UpdateOrgID() *LabelUpsertOne {
	return u.Update(func(s *LabelUpsert) {
		s.UpdateOrgID()
	})
}

// ClearOrgID clears the value of the "org_id" field.
func (u *LabelUpsertOne) ClearOrgID() *LabelUpsertOne {
	return u.Update(func(s *LabelUpsert) {
		s.ClearOrgID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LabelUpsertOne) SetUpdatedAt(v time.Time) *LabelUpsertOne {
	return u.Update(func(s *LabelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LabelUpsertOne) UpdateUpdatedAt() *LabelUpsertOne {
	return u.Update(func(s *LabelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *LabelUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LabelCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LabelUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LabelUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LabelUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LabelCreateBulk is the builder for creating many Label entities in bulk.
type LabelCreateBulk struct {
	config
	err      error
	builders []*LabelCreate
	conflict []sql.ConflictOption
}

// Save creates the Label entities in the database.
func (lcb *LabelCreateBulk) Save(ctx context.Context) ([]*Label, error) {
	if lcb.err != nil {
		return nil, lcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Label, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LabelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LabelCreateBulk) SaveX(ctx context.Context) []*Label {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LabelCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LabelCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Label.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LabelUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (lcb *LabelCreateBulk) OnConflict(opts ...sql.ConflictOption) *LabelUpsertBulk {
	lcb.conflict = opts
	return &LabelUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Label.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lcb *LabelCreateBulk) OnConflictColumns(columns ...string) *LabelUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LabelUpsertBulk{
		create: lcb,
	}
}

// LabelUpsertBulk is the builder for "upsert"-ing
// a bulk of Label nodes.
type LabelUpsertBulk struct {
	create *LabelCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Label.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *LabelUpsertBulk) UpdateNewValues() *LabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(label.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Label.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LabelUpsertBulk) Ignore() *LabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LabelUpsertBulk) DoNothing() *LabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LabelCreateBulk.OnConflict
// documentation for more info.
func (u *LabelUpsertBulk) Update(set func(*LabelUpsert)) *LabelUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LabelUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *LabelUpsertBulk) SetName(v string) *LabelUpsertBulk {
	return u.Update(func(s *LabelUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *LabelUpsertBulk) UpdateName() *LabelUpsertBulk {
	return u.Update(func(s *LabelUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *LabelUpsertBulk) SetDescription(v string) *LabelUpsertBulk {
	return u.Update(func(s *LabelUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *LabelUpsertBulk) UpdateDescription() *LabelUpsertBulk {
	return u.Update(func(s *LabelUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *LabelUpsertBulk) ClearDescription() *LabelUpsertBulk {
	return u.Update(func(s *LabelUpsert) {
		s.ClearDescription()
	})
}

// SetColor sets the "color" field.
func (u *LabelUpsertBulk) SetColor(v string) *LabelUpsertBulk {
	return u.Update(func(s *LabelUpsert) {
		s.SetColor(v)
	})
}

// UpdateColor sets the "color" field to the value that was provided on create.
func (u *LabelUpsertBulk) UpdateColor() *LabelUpsertBulk {
	return u.Update(func(s *LabelUpsert) {
		s.UpdateColor()
	})
}

// SetOrgID sets the "org_id" field.
func (u *LabelUpsertBulk) SetOrgID(v int) *LabelUpsertBulk {
	return u.Update(func(s *LabelUpsert) {
		s.SetOrgID(v)
	})
}

// UpdateOrgID sets the "org_id" field to the value that was provided on create.
func (u *LabelUpsertBulk) UpdateOrgID() *LabelUpsertBulk {
	return u.Update(func(s *LabelUpsert) {
		s.UpdateOrgID()
	})
}

// ClearOrgID clears the value of the "org_id" field.
func (u *LabelUpsertBulk) ClearOrgID() *LabelUpsertBulk {
	return u.Update(func(s *LabelUpsert) {
		s.ClearOrgID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LabelUpsertBulk) SetUpdatedAt(v time.Time) *LabelUpsertBulk {
	return u.Update(func(s *LabelUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LabelUpsertBulk) UpdateUpdatedAt() *LabelUpsertBulk {
	return u.Update(func(s *LabelUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *LabelUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LabelCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LabelCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LabelUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
