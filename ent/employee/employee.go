// Code generated by ent, DO NOT EDIT.

package employee

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the employee type in the database.
	Label = "employee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPositionID holds the string denoting the position_id field in the database.
	FieldPositionID = "position_id"
	// FieldJoiningAt holds the string denoting the joining_at field in the database.
	FieldJoiningAt = "joining_at"
	// FieldOrgID holds the string denoting the org_id field in the database.
	FieldOrgID = "org_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgePosition holds the string denoting the position edge name in mutations.
	EdgePosition = "position"
	// EdgeCreatedProjects holds the string denoting the created_projects edge name in mutations.
	EdgeCreatedProjects = "created_projects"
	// EdgeUpdatedProjects holds the string denoting the updated_projects edge name in mutations.
	EdgeUpdatedProjects = "updated_projects"
	// EdgeAssignedTasks holds the string denoting the assigned_tasks edge name in mutations.
	EdgeAssignedTasks = "assigned_tasks"
	// EdgeLeaveApproves holds the string denoting the leave_approves edge name in mutations.
	EdgeLeaveApproves = "leave_approves"
	// EdgeLeaveRequests holds the string denoting the leave_requests edge name in mutations.
	EdgeLeaveRequests = "leave_requests"
	// Table holds the table name of the employee in the database.
	Table = "employees"
	// PositionTable is the table that holds the position relation/edge.
	PositionTable = "employees"
	// PositionInverseTable is the table name for the Position entity.
	// It exists in this package in order to avoid circular dependency with the "position" package.
	PositionInverseTable = "positions"
	// PositionColumn is the table column denoting the position relation/edge.
	PositionColumn = "position_id"
	// CreatedProjectsTable is the table that holds the created_projects relation/edge.
	CreatedProjectsTable = "projects"
	// CreatedProjectsInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	CreatedProjectsInverseTable = "projects"
	// CreatedProjectsColumn is the table column denoting the created_projects relation/edge.
	CreatedProjectsColumn = "creator_id"
	// UpdatedProjectsTable is the table that holds the updated_projects relation/edge.
	UpdatedProjectsTable = "projects"
	// UpdatedProjectsInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	UpdatedProjectsInverseTable = "projects"
	// UpdatedProjectsColumn is the table column denoting the updated_projects relation/edge.
	UpdatedProjectsColumn = "updater_id"
	// AssignedTasksTable is the table that holds the assigned_tasks relation/edge. The primary key declared below.
	AssignedTasksTable = "task_assignees"
	// AssignedTasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	AssignedTasksInverseTable = "tasks"
	// LeaveApprovesTable is the table that holds the leave_approves relation/edge.
	LeaveApprovesTable = "leave_approvals"
	// LeaveApprovesInverseTable is the table name for the LeaveApproval entity.
	// It exists in this package in order to avoid circular dependency with the "leaveapproval" package.
	LeaveApprovesInverseTable = "leave_approvals"
	// LeaveApprovesColumn is the table column denoting the leave_approves relation/edge.
	LeaveApprovesColumn = "reviewer_id"
	// LeaveRequestsTable is the table that holds the leave_requests relation/edge.
	LeaveRequestsTable = "leave_requests"
	// LeaveRequestsInverseTable is the table name for the LeaveRequest entity.
	// It exists in this package in order to avoid circular dependency with the "leaverequest" package.
	LeaveRequestsInverseTable = "leave_requests"
	// LeaveRequestsColumn is the table column denoting the leave_requests relation/edge.
	LeaveRequestsColumn = "employee_id"
)

// Columns holds all SQL columns for employee fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldCode,
	FieldStatus,
	FieldPositionID,
	FieldJoiningAt,
	FieldOrgID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "employees"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_members",
}

var (
	// AssignedTasksPrimaryKey and AssignedTasksColumn2 are the table columns denoting the
	// primary key for the assigned_tasks relation (M2M).
	AssignedTasksPrimaryKey = []string{"task_id", "employee_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusActive is the default value of the Status enum.
const DefaultStatus = StatusActive

// Status values.
const (
	StatusActive   Status = "active"
	StatusInactive Status = "inactive"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusActive, StatusInactive:
		return nil
	default:
		return fmt.Errorf("employee: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Employee queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPositionID orders the results by the position_id field.
func ByPositionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPositionID, opts...).ToFunc()
}

// ByJoiningAt orders the results by the joining_at field.
func ByJoiningAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJoiningAt, opts...).ToFunc()
}

// ByOrgID orders the results by the org_id field.
func ByOrgID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrgID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByPositionField orders the results by position field.
func ByPositionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPositionStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatedProjectsCount orders the results by created_projects count.
func ByCreatedProjectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreatedProjectsStep(), opts...)
	}
}

// ByCreatedProjects orders the results by created_projects terms.
func ByCreatedProjects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedProjectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUpdatedProjectsCount orders the results by updated_projects count.
func ByUpdatedProjectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUpdatedProjectsStep(), opts...)
	}
}

// ByUpdatedProjects orders the results by updated_projects terms.
func ByUpdatedProjects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatedProjectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssignedTasksCount orders the results by assigned_tasks count.
func ByAssignedTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssignedTasksStep(), opts...)
	}
}

// ByAssignedTasks orders the results by assigned_tasks terms.
func ByAssignedTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignedTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLeaveApprovesCount orders the results by leave_approves count.
func ByLeaveApprovesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLeaveApprovesStep(), opts...)
	}
}

// ByLeaveApproves orders the results by leave_approves terms.
func ByLeaveApproves(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLeaveApprovesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByLeaveRequestsCount orders the results by leave_requests count.
func ByLeaveRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newLeaveRequestsStep(), opts...)
	}
}

// ByLeaveRequests orders the results by leave_requests terms.
func ByLeaveRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLeaveRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPositionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PositionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PositionTable, PositionColumn),
	)
}
func newCreatedProjectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedProjectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreatedProjectsTable, CreatedProjectsColumn),
	)
}
func newUpdatedProjectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdatedProjectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UpdatedProjectsTable, UpdatedProjectsColumn),
	)
}
func newAssignedTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignedTasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AssignedTasksTable, AssignedTasksPrimaryKey...),
	)
}
func newLeaveApprovesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LeaveApprovesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LeaveApprovesTable, LeaveApprovesColumn),
	)
}
func newLeaveRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LeaveRequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, LeaveRequestsTable, LeaveRequestsColumn),
	)
}
