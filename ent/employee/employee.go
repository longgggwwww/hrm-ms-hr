// Code generated by ent, DO NOT EDIT.

package employee

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the employee type in the database.
	Label = "employee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPositionID holds the string denoting the position_id field in the database.
	FieldPositionID = "position_id"
	// FieldJoiningAt holds the string denoting the joining_at field in the database.
	FieldJoiningAt = "joining_at"
	// FieldBranchID holds the string denoting the branch_id field in the database.
	FieldBranchID = "branch_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDepartmentID holds the string denoting the department_id field in the database.
	FieldDepartmentID = "department_id"
	// EdgePosition holds the string denoting the position edge name in mutations.
	EdgePosition = "position"
	// Table holds the table name of the employee in the database.
	Table = "employees"
	// PositionTable is the table that holds the position relation/edge.
	PositionTable = "employees"
	// PositionInverseTable is the table name for the Position entity.
	// It exists in this package in order to avoid circular dependency with the "position" package.
	PositionInverseTable = "positions"
	// PositionColumn is the table column denoting the position relation/edge.
	PositionColumn = "position_id"
)

// Columns holds all SQL columns for employee fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldCode,
	FieldStatus,
	FieldPositionID,
	FieldJoiningAt,
	FieldBranchID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDepartmentID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Employee queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPositionID orders the results by the position_id field.
func ByPositionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPositionID, opts...).ToFunc()
}

// ByJoiningAt orders the results by the joining_at field.
func ByJoiningAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJoiningAt, opts...).ToFunc()
}

// ByBranchID orders the results by the branch_id field.
func ByBranchID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBranchID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDepartmentID orders the results by the department_id field.
func ByDepartmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartmentID, opts...).ToFunc()
}

// ByPositionField orders the results by position field.
func ByPositionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPositionStep(), sql.OrderByField(field, opts...))
	}
}
func newPositionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PositionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PositionTable, PositionColumn),
	)
}
