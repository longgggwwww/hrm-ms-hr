// Code generated by ent, DO NOT EDIT.

package employee

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/longgggwwww/hrm-ms-hr/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldID, id))
}

// EmployeeID applies equality check predicate on the "employee_id" field. It's identical to EmployeeIDEQ.
func EmployeeID(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldEmployeeID, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldCode, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v bool) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldStatus, v))
}

// PositionID applies equality check predicate on the "position_id" field. It's identical to PositionIDEQ.
func PositionID(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldPositionID, v))
}

// JoiningAt applies equality check predicate on the "joining_at" field. It's identical to JoiningAtEQ.
func JoiningAt(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldJoiningAt, v))
}

// BranchID applies equality check predicate on the "branch_id" field. It's identical to BranchIDEQ.
func BranchID(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldBranchID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldUpdatedAt, v))
}

// DepartmentID applies equality check predicate on the "department_id" field. It's identical to DepartmentIDEQ.
func DepartmentID(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldDepartmentID, v))
}

// EmployeeIDEQ applies the EQ predicate on the "employee_id" field.
func EmployeeIDEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "employee_id" field.
func EmployeeIDNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "employee_id" field.
func EmployeeIDIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "employee_id" field.
func EmployeeIDNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// EmployeeIDGT applies the GT predicate on the "employee_id" field.
func EmployeeIDGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldEmployeeID, v))
}

// EmployeeIDGTE applies the GTE predicate on the "employee_id" field.
func EmployeeIDGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldEmployeeID, v))
}

// EmployeeIDLT applies the LT predicate on the "employee_id" field.
func EmployeeIDLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldEmployeeID, v))
}

// EmployeeIDLTE applies the LTE predicate on the "employee_id" field.
func EmployeeIDLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldEmployeeID, v))
}

// EmployeeIDContains applies the Contains predicate on the "employee_id" field.
func EmployeeIDContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldEmployeeID, v))
}

// EmployeeIDHasPrefix applies the HasPrefix predicate on the "employee_id" field.
func EmployeeIDHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldEmployeeID, v))
}

// EmployeeIDHasSuffix applies the HasSuffix predicate on the "employee_id" field.
func EmployeeIDHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldEmployeeID, v))
}

// EmployeeIDEqualFold applies the EqualFold predicate on the "employee_id" field.
func EmployeeIDEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldEmployeeID, v))
}

// EmployeeIDContainsFold applies the ContainsFold predicate on the "employee_id" field.
func EmployeeIDContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldEmployeeID, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldCode, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v bool) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v bool) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldStatus, v))
}

// PositionIDEQ applies the EQ predicate on the "position_id" field.
func PositionIDEQ(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldPositionID, v))
}

// PositionIDNEQ applies the NEQ predicate on the "position_id" field.
func PositionIDNEQ(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldPositionID, v))
}

// PositionIDIn applies the In predicate on the "position_id" field.
func PositionIDIn(vs ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldPositionID, vs...))
}

// PositionIDNotIn applies the NotIn predicate on the "position_id" field.
func PositionIDNotIn(vs ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldPositionID, vs...))
}

// JoiningAtEQ applies the EQ predicate on the "joining_at" field.
func JoiningAtEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldJoiningAt, v))
}

// JoiningAtNEQ applies the NEQ predicate on the "joining_at" field.
func JoiningAtNEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldJoiningAt, v))
}

// JoiningAtIn applies the In predicate on the "joining_at" field.
func JoiningAtIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldJoiningAt, vs...))
}

// JoiningAtNotIn applies the NotIn predicate on the "joining_at" field.
func JoiningAtNotIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldJoiningAt, vs...))
}

// JoiningAtGT applies the GT predicate on the "joining_at" field.
func JoiningAtGT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldJoiningAt, v))
}

// JoiningAtGTE applies the GTE predicate on the "joining_at" field.
func JoiningAtGTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldJoiningAt, v))
}

// JoiningAtLT applies the LT predicate on the "joining_at" field.
func JoiningAtLT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldJoiningAt, v))
}

// JoiningAtLTE applies the LTE predicate on the "joining_at" field.
func JoiningAtLTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldJoiningAt, v))
}

// BranchIDEQ applies the EQ predicate on the "branch_id" field.
func BranchIDEQ(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldBranchID, v))
}

// BranchIDNEQ applies the NEQ predicate on the "branch_id" field.
func BranchIDNEQ(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldBranchID, v))
}

// BranchIDIn applies the In predicate on the "branch_id" field.
func BranchIDIn(vs ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldBranchID, vs...))
}

// BranchIDNotIn applies the NotIn predicate on the "branch_id" field.
func BranchIDNotIn(vs ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldBranchID, vs...))
}

// BranchIDGT applies the GT predicate on the "branch_id" field.
func BranchIDGT(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldBranchID, v))
}

// BranchIDGTE applies the GTE predicate on the "branch_id" field.
func BranchIDGTE(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldBranchID, v))
}

// BranchIDLT applies the LT predicate on the "branch_id" field.
func BranchIDLT(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldBranchID, v))
}

// BranchIDLTE applies the LTE predicate on the "branch_id" field.
func BranchIDLTE(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldBranchID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldUpdatedAt, v))
}

// DepartmentIDEQ applies the EQ predicate on the "department_id" field.
func DepartmentIDEQ(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldDepartmentID, v))
}

// DepartmentIDNEQ applies the NEQ predicate on the "department_id" field.
func DepartmentIDNEQ(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldDepartmentID, v))
}

// DepartmentIDIn applies the In predicate on the "department_id" field.
func DepartmentIDIn(vs ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldDepartmentID, vs...))
}

// DepartmentIDNotIn applies the NotIn predicate on the "department_id" field.
func DepartmentIDNotIn(vs ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldDepartmentID, vs...))
}

// DepartmentIDGT applies the GT predicate on the "department_id" field.
func DepartmentIDGT(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldDepartmentID, v))
}

// DepartmentIDGTE applies the GTE predicate on the "department_id" field.
func DepartmentIDGTE(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldDepartmentID, v))
}

// DepartmentIDLT applies the LT predicate on the "department_id" field.
func DepartmentIDLT(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldDepartmentID, v))
}

// DepartmentIDLTE applies the LTE predicate on the "department_id" field.
func DepartmentIDLTE(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldDepartmentID, v))
}

// HasPosition applies the HasEdge predicate on the "position" edge.
func HasPosition() predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PositionTable, PositionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPositionWith applies the HasEdge predicate on the "position" edge with a given conditions (other predicates).
func HasPositionWith(preds ...predicate.Position) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := newPositionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Employee) predicate.Employee {
	return predicate.Employee(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Employee) predicate.Employee {
	return predicate.Employee(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Employee) predicate.Employee {
	return predicate.Employee(sql.NotPredicates(p))
}
